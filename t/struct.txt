typedef_enum 
   INTERVAL_FULL_RANGE = 32767
   INTERVAL_MASK_MONTH = 16
   INTERVAL_MASK_HOUR = 4
   INTERVAL_MASK_MINUTE = 2
   INTERVAL_MASK_DAY = 8
   INTERVAL_MASK_SECOND = 1
   INTERVAL_MASK_YEAR = 32
typedef_enum 
   RELPERSISTENCE_UNLOGGED = "u"
   RELPERSISTENCE_PERMANENT = "p"
   RELPERSISTENCE_TEMP = "t"
typedef_enum 
   CAS_DEFERRABLE = 2
   CAS_INITIALLY_DEFERRED = 8
   CAS_INITIALLY_IMMEDIATE = 4
   CAS_NOT_DEFERRABLE = 1
   CAS_NOT_VALID = 16
typedef_enum CmdType
   CMD_UNKNOWN = UNKNOWN
   CMD_SELECT = SELECT
   CMD_UPDATE = UPDATE
   CMD_INSERT = INSERT
   CMD_DELETE = DELETE
   CMD_UTILITY = UTILITY
   CMD_NOTHING = NOTHING
typedef_enum JoinType
   JOIN_INNER = INNER
   JOIN_LEFT = LEFT
   JOIN_FULL = FULL
   JOIN_RIGHT = RIGHT
   JOIN_SEMI = SEMI
   JOIN_ANTI = ANTI
   JOIN_UNIQUE_OUTER = UNIQUE_OUTER
   JOIN_UNIQUE_INNER = UNIQUE_INNER
typedef_struct Alias
typedef_enum InhOption
   INH_NO = NO
   INH_YES = YES
   INH_DEFAULT = DEFAULT
typedef_enum OnCommitAction
   ONCOMMIT_NOOP = NOOP
   ONCOMMIT_PRESERVE_ROWS = PRESERVE_ROWS
   ONCOMMIT_DELETE_ROWS = DELETE_ROWS
   ONCOMMIT_DROP = DROP
typedef_struct RangeVar
typedef_struct IntoClause
typedef_struct Expr
typedef_enum 
   OUTER_VAR = 65001
   INNER_VAR = 65000
   INDEX_VAR = 65002
typedef_struct Var
typedef_struct Const
typedef_enum ParamKind
   PARAM_EXTERN = EXTERN
   PARAM_EXEC = EXEC
   PARAM_SUBLINK = SUBLINK
typedef_struct Param
typedef_struct WindowFunc
typedef_enum CoercionContext
   COERCION_IMPLICIT = IMPLICIT
   COERCION_ASSIGNMENT = ASSIGNMENT
   COERCION_EXPLICIT = EXPLICIT
typedef_enum CoercionForm
   COERCE_EXPLICIT_CALL = EXPLICIT_CALL
   COERCE_EXPLICIT_CAST = EXPLICIT_CAST
   COERCE_IMPLICIT_CAST = IMPLICIT_CAST
   COERCE_DONTCARE = DONTCARE
typedef_struct Function::Expression
typedef_struct NamedArgExpr
typedef_struct OpExpr
typedef_struct DistinctExpr
typedef_struct NullIfExpr
typedef_struct ScalarArrayOpExpr
typedef_enum BoolExprType
   AND_EXPR = AND_EXPR
   OR_EXPR = OR_EXPR
   NOT_EXPR = NOT_EXPR
typedef_struct BoolExpr
typedef_enum SubLinkType
   EXISTS_SUBLINK = EXISTS_SUBLINK
   ALL_SUBLINK = ALL_SUBLINK
   ANY_SUBLINK = ANY_SUBLINK
   ROWCOMPARE_SUBLINK = ROWCOMPARE_SUBLINK
   EXPR_SUBLINK = EXPR_SUBLINK
   ARRAY_SUBLINK = ARRAY_SUBLINK
   CTE_SUBLINK = CTE_SUBLINK
typedef_struct SubLink
typedef_struct CaseExpr
typedef_struct CaseWhen
typedef_struct ArrayExpr
typedef_struct RowExpr
typedef_enum RowCompareType
   ROWCOMPARE_NE = 6
   ROWCOMPARE_LE = 2
   ROWCOMPARE_EQ = 3
   ROWCOMPARE_GT = 5
   ROWCOMPARE_GE = 4
   ROWCOMPARE_LT = 1
typedef_struct RowCompareExpr
typedef_struct CoalesceExpr
typedef_enum MinMaxOp
   IS_GREATEST = GREATEST
   IS_LEAST = LEAST
typedef_struct MinMaxExpr
typedef_enum XmlExprOp
   IS_XMLCONCAT = XMLCONCAT
   IS_XMLELEMENT = XMLELEMENT
   IS_XMLFOREST = XMLFOREST
   IS_XMLPARSE = XMLPARSE
   IS_XMLPI = XMLPI
   IS_XMLROOT = XMLROOT
   IS_XMLSERIALIZE = XMLSERIALIZE
   IS_DOCUMENT = DOCUMENT
typedef_enum XmlOptionType
   XMLOPTION_DOCUMENT = DOCUMENT
   XMLOPTION_CONTENT = CONTENT
typedef_struct XmlExpr
typedef_enum NullTestType
   IS_NULL = ULL
   IS_NOT_NULL = OT_NULL
typedef_struct NullTest
typedef_enum BoolTestType
   IS_TRUE = TRUE
   IS_NOT_TRUE = NOT_TRUE
   IS_FALSE = FALSE
   IS_NOT_FALSE = NOT_FALSE
   IS_UNKNOWN = UNKNOWN
   IS_NOT_UNKNOWN = NOT_UNKNOWN
typedef_struct BooleanTest
typedef_struct SetToDefault
typedef_struct CurrentOfExpr
typedef_struct TargetEntry
typedef_struct RangeTblRef
typedef_struct JoinExpr
typedef_struct FromExpr
typedef_enum SortByDir
   SORTBY_DEFAULT = DEFAULT
   SORTBY_ASC = ASC
   SORTBY_DESC = DESC
   SORTBY_USING = USING
typedef_enum SortByNulls
   SORTBY_NULLS_DEFAULT = DEFAULT
   SORTBY_NULLS_FIRST = FIRST
   SORTBY_NULLS_LAST = LAST
typedef_struct TypeName
typedef_struct Column::Reference
typedef_struct ParamRef
typedef_struct WindowDef
typedef_enum A_Expr_Kind
   AEXPR_OP = OP
   AEXPR_AND = AND
   AEXPR_OR = OR
   AEXPR_NOT = NOT
   AEXPR_OP_ANY = OP_ANY
   AEXPR_OP_ALL = OP_ALL
   AEXPR_DISTINCT = DISTINCT
   AEXPR_NULLIF = NULLIF
   AEXPR_OF = OF
   AEXPR_IN = IN
typedef_struct A_Expr
typedef_struct A_Const
typedef_struct TypeCast
typedef_struct CollateClause
typedef_struct Function::Call
typedef_struct A_Star
typedef_struct A_Indices
typedef_struct A_Indirection
typedef_struct A_ArrayExpr
typedef_struct ResultTarget
typedef_struct SortBy
typedef_enum 
   FRAMEOPTION_END_UNBOUNDED_FOLLOWING = 128
   FRAMEOPTION_END_VALUE = 10240
   FRAMEOPTION_START_VALUE = 5120
   FRAMEOPTION_START_VALUE_FOLLOWING = 4096
   FRAMEOPTION_NONDEFAULT = 1
   FRAMEOPTION_ROWS = 4
   FRAMEOPTION_END_VALUE_FOLLOWING = 8192
   FRAMEOPTION_END_VALUE_PRECEDING = 2048
   FRAMEOPTION_START_CURRENT_ROW = 256
   FRAMEOPTION_BETWEEN = 8
   FRAMEOPTION_END_CURRENT_ROW = 512
   FRAMEOPTION_END_UNBOUNDED_PRECEDING = 32
   FRAMEOPTION_DEFAULTS = 530
   FRAMEOPTION_START_UNBOUNDED_PRECEDING = 16
   FRAMEOPTION_RANGE = 2
   FRAMEOPTION_START_VALUE_PRECEDING = 1024
   FRAMEOPTION_START_UNBOUNDED_FOLLOWING = 64
typedef_struct Range::Subselect
typedef_struct Range::Function
typedef_struct Column::Definition
typedef_struct TableLikeClause
typedef_enum TableLikeOption
   CREATE_TABLE_LIKE_ALL = 2147483647
   CREATE_TABLE_LIKE_COMMENTS = 16
   CREATE_TABLE_LIKE_DEFAULTS = 1
   CREATE_TABLE_LIKE_CONSTRAINTS = 2
   CREATE_TABLE_LIKE_STORAGE = 8
   CREATE_TABLE_LIKE_INDEXES = 4
typedef_struct IndexElem
typedef_enum DefElemAction
   DEFELEM_UNSPEC = UNSPEC
   DEFELEM_SET = SET
   DEFELEM_ADD = ADD
   DEFELEM_DROP = DROP
typedef_struct DefElem
typedef_struct LockingClause
typedef_struct XmlSerialize
typedef_struct WithClause
typedef_struct CommonTableExpr
typedef_struct InsertStmt
typedef_struct DeleteStmt
typedef_struct UpdateStmt
typedef_enum SetOperation
   SETOP_NONE = NONE
   SETOP_UNION = UNION
   SETOP_INTERSECT = INTERSECT
   SETOP_EXCEPT = EXCEPT
typedef_struct SelectStmt
typedef_struct SelectStmt
typedef_struct SetOperationStmt
typedef_enum ObjectType
   OBJECT_AGGREGATE = AGGREGATE
   OBJECT_ATTRIBUTE = ATTRIBUTE
   OBJECT_CAST = CAST
   OBJECT_COLUMN = COLUMN
   OBJECT_CONSTRAINT = CONSTRAINT
   OBJECT_COLLATION = COLLATION
   OBJECT_CONVERSION = CONVERSION
   OBJECT_DATABASE = DATABASE
   OBJECT_DOMAIN = DOMAIN
   OBJECT_EXTENSION = EXTENSION
   OBJECT_FDW = FDW
   OBJECT_FOREIGN_SERVER = FOREIGN_SERVER
   OBJECT_FOREIGN_TABLE = FOREIGN_TABLE
   OBJECT_FUNCTION = FUNCTION
   OBJECT_INDEX = INDEX
   OBJECT_LANGUAGE = LANGUAGE
   OBJECT_LARGEOBJECT = LARGEOBJECT
   OBJECT_OPCLASS = OPCLASS
   OBJECT_OPERATOR = OPERATOR
   OBJECT_OPFAMILY = OPFAMILY
   OBJECT_ROLE = ROLE
   OBJECT_RULE = RULE
   OBJECT_SCHEMA = SCHEMA
   OBJECT_SEQUENCE = SEQUENCE
   OBJECT_TABLE = TABLE
   OBJECT_TABLESPACE = TABLESPACE
   OBJECT_TRIGGER = TRIGGER
   OBJECT_TSCONFIGURATION = TSCONFIGURATION
   OBJECT_TSDICTIONARY = TSDICTIONARY
   OBJECT_TSPARSER = TSPARSER
   OBJECT_TSTEMPLATE = TSTEMPLATE
   OBJECT_TYPE = TYPE
   OBJECT_VIEW = VIEW
typedef_struct CreateSchemaStmt
typedef_enum DropBehavior
   DROP_RESTRICT = RESTRICT
   DROP_CASCADE = CASCADE
typedef_struct AlterTableStmt
typedef_enum AlterTableType
   AT_AddColumn = AddColumn
   AT_AddColumnRecurse = AddColumnRecurse
   AT_AddColumnToView = AddColumnToView
   AT_ColumnDefault = ColumnDefault
   AT_DropNotNull = DropNotNull
   AT_SetNotNull = SetNotNull
   AT_SetStatistics = SetStatistics
   AT_SetOptions = SetOptions
   AT_ResetOptions = ResetOptions
   AT_SetStorage = SetStorage
   AT_DropColumn = DropColumn
   AT_DropColumnRecurse = DropColumnRecurse
   AT_AddIndex = AddIndex
   AT_ReAddIndex = ReAddIndex
   AT_AddConstraint = AddConstraint
   AT_AddConstraintRecurse = AddConstraintRecurse
   AT_ValidateConstraint = ValidateConstraint
   AT_ValidateConstraintRecurse = ValidateConstraintRecurse
   AT_ProcessedConstraint = ProcessedConstraint
   AT_AddIndexConstraint = AddIndexConstraint
   AT_DropConstraint = DropConstraint
   AT_DropConstraintRecurse = DropConstraintRecurse
   AT_AlterColumnType = AlterColumnType
   AT_AlterColumnGenericOptions = AlterColumnGenericOptions
   AT_ChangeOwner = ChangeOwner
   AT_ClusterOn = ClusterOn
   AT_DropCluster = DropCluster
   AT_AddOids = AddOids
   AT_AddOidsRecurse = AddOidsRecurse
   AT_DropOids = DropOids
   AT_SetTableSpace = SetTableSpace
   AT_SetRelOptions = SetRelOptions
   AT_ResetRelOptions = ResetRelOptions
   AT_ReplaceRelOptions = ReplaceRelOptions
   AT_EnableTrig = EnableTrig
   AT_EnableAlwaysTrig = EnableAlwaysTrig
   AT_EnableReplicaTrig = EnableReplicaTrig
   AT_DisableTrig = DisableTrig
   AT_EnableTrigAll = EnableTrigAll
   AT_DisableTrigAll = DisableTrigAll
   AT_EnableTrigUser = EnableTrigUser
   AT_DisableTrigUser = DisableTrigUser
   AT_EnableRule = EnableRule
   AT_EnableAlwaysRule = EnableAlwaysRule
   AT_EnableReplicaRule = EnableReplicaRule
   AT_DisableRule = DisableRule
   AT_AddInherit = AddInherit
   AT_DropInherit = DropInherit
   AT_AddOf = AddOf
   AT_DropOf = DropOf
   AT_GenericOptions = GenericOptions
typedef_struct AlterTable::Command
typedef_struct AlterDomainStmt
typedef_enum GrantTargetType
   ACL_TARGET_OBJECT = OBJECT
   ACL_TARGET_ALL_IN_SCHEMA = ALL_IN_SCHEMA
   ACL_TARGET_DEFAULTS = DEFAULTS
typedef_enum GrantObjectType
   ACL_OBJECT_COLUMN = COLUMN
   ACL_OBJECT_RELATION = RELATION
   ACL_OBJECT_SEQUENCE = SEQUENCE
   ACL_OBJECT_DATABASE = DATABASE
   ACL_OBJECT_DOMAIN = DOMAIN
   ACL_OBJECT_FDW = FDW
   ACL_OBJECT_FOREIGN_SERVER = FOREIGN_SERVER
   ACL_OBJECT_FUNCTION = FUNCTION
   ACL_OBJECT_LANGUAGE = LANGUAGE
   ACL_OBJECT_LARGEOBJECT = LARGEOBJECT
   ACL_OBJECT_NAMESPACE = NAMESPACE
   ACL_OBJECT_TABLESPACE = TABLESPACE
   ACL_OBJECT_TYPE = TYPE
typedef_struct GrantStmt
typedef_struct PrivGrantee
typedef_struct Function
typedef_struct AccessPriv
typedef_struct GrantRoleStmt
typedef_struct AlterDefaultPrivileges
typedef_struct CopyStmt
typedef_enum VariableSetKind
   VAR_SET_VALUE = SET_VALUE
   VAR_SET_DEFAULT = SET_DEFAULT
   VAR_SET_CURRENT = SET_CURRENT
   VAR_SET_MULTI = SET_MULTI
   VAR_RESET = RESET
   VAR_RESET_ALL = RESET_ALL
typedef_struct VariableSetStmt
typedef_struct VariableShowStmt
typedef_struct CreateStmt
typedef_enum ConstrType
   CONSTR_NULL = NULL
   CONSTR_NOTNULL = NOTNULL
   CONSTR_DEFAULT = DEFAULT
   CONSTR_CHECK = CHECK
   CONSTR_PRIMARY = PRIMARY
   CONSTR_UNIQUE = UNIQUE
   CONSTR_EXCLUSION = EXCLUSION
   CONSTR_FOREIGN = FOREIGN
   CONSTR_ATTR_DEFERRABLE = ATTR_DEFERRABLE
   CONSTR_ATTR_NOT_DEFERRABLE = ATTR_NOT_DEFERRABLE
   CONSTR_ATTR_DEFERRED = ATTR_DEFERRED
   CONSTR_ATTR_IMMEDIATE = ATTR_IMMEDIATE
typedef_enum 
   FKCONSTR_MATCH_PARTIAL = p
   FKCONSTR_ACTION_CASCADE = c
   FKCONSTR_ACTION_SETNULL = n
   FKCONSTR_ACTION_NOACTION = a
   FKCONSTR_ACTION_RESTRICT = r
   FKCONSTR_MATCH_SIMPLE = s
   FKCONSTR_MATCH_FULL = f
   FKCONSTR_ACTION_SETDEFAULT = d
typedef_struct Constraint
typedef_struct CreateTableSpaceStmt
typedef_struct DropTableSpaceStmt
typedef_struct AlterTableSpaceOptions
typedef_struct CreateExtensionStmt
typedef_struct AlterExtensionStmt
typedef_struct AlterExtensionContents
typedef_struct CreateFdwStmt
typedef_struct AlterFdwStmt
typedef_struct CreateForeignServerStmt
typedef_struct AlterForeignServerStmt
typedef_struct CreateForeignTableStmt
typedef_struct CreateUserMappingStmt
typedef_struct AlterUserMappingStmt
typedef_struct DropUserMappingStmt
typedef_enum 
   TRIGGER_TYPE_BEFORE = 2
   TRIGGER_TYPE_INSERT = 4
   TRIGGER_TYPE_AFTER = 0
   TRIGGER_TYPE_LEVEL_MASK = 1
   TRIGGER_TYPE_TIMING_MASK = 66
   TRIGGER_TYPE_UPDATE = 16
   TRIGGER_TYPE_DELETE = 8
   TRIGGER_TYPE_ROW = 1
   TRIGGER_TYPE_STATEMENT = 0
   TRIGGER_TYPE_INSTEAD = 64
   TRIGGER_TYPE_EVENT_MASK = 60
   TRIGGER_TYPE_TRUNCATE = 32
typedef_struct CreateTrigStmt
typedef_struct CreatePLangStmt
typedef_enum RoleStmtType
   ROLESTMT_ROLE = ROLE
   ROLESTMT_USER = USER
   ROLESTMT_GROUP = GROUP
typedef_struct CreateRoleStmt
typedef_struct AlterRoleStmt
typedef_struct AlterRoleSetStmt
typedef_struct DropRoleStmt
typedef_struct CreateSeqStmt
typedef_struct AlterSeqStmt
typedef_struct DefineStmt
typedef_struct CreateDomainStmt
typedef_struct CreateOpClassStmt
typedef_enum 
   OPCLASS_ITEM_OPERATOR = OPERATOR
   OPCLASS_ITEM_STORAGETYPE = STORAGETYPE
   OPCLASS_ITEM_FUNCTION = FUNCTION
typedef_struct CreateOpClass::Item
typedef_struct CreateOpFamilyStmt
typedef_struct AlterOpFamilyStmt
typedef_struct DropStmt
typedef_struct TruncateStmt
typedef_struct CommentStmt
typedef_struct SecLabelStmt
typedef_enum 
   CURSOR_OPT_FAST_PLAN = 32
   CURSOR_OPT_BINARY = 1
   CURSOR_OPT_CUSTOM_PLAN = 128
   CURSOR_OPT_INSENSITIVE = 8
   CURSOR_OPT_GENERIC_PLAN = 64
   CURSOR_OPT_NO_SCROLL = 4
   CURSOR_OPT_SCROLL = 2
   CURSOR_OPT_HOLD = 16
typedef_struct DeclareCursorStmt
typedef_struct ClosePortalStmt
typedef_enum FetchDirection
   FETCH_FORWARD = FORWARD
   FETCH_BACKWARD = BACKWARD
   FETCH_ABSOLUTE = ABSOLUTE
   FETCH_RELATIVE = RELATIVE
   FETCH_ALL = ALL
typedef_struct FetchStmt
typedef_struct IndexStmt
typedef_struct CreateFunctionStmt
typedef_enum FunctionParameterMode
   FUNC_PARAM_IN = IN
   FUNC_PARAM_OUT = OUT
   FUNC_PARAM_INOUT = INOUT
   FUNC_PARAM_VARIADIC = VARIADIC
   FUNC_PARAM_TABLE = TABLE
typedef_struct Function::Parameter
typedef_struct AlterFunction
typedef_struct DoStmt
typedef_struct InlineCodeBlock
typedef_struct RenameStmt
typedef_struct AlterObjectSchemaStmt
typedef_struct AlterOwnerStmt
typedef_struct RuleStmt
typedef_struct NotifyStmt
typedef_struct ListenStmt
typedef_struct UnlistenStmt
typedef_enum TransactionStmtKind
   TRANS_STMT_BEGIN = BEGIN
   TRANS_STMT_START = START
   TRANS_STMT_COMMIT = COMMIT
   TRANS_STMT_ROLLBACK = ROLLBACK
   TRANS_STMT_SAVEPOINT = SAVEPOINT
   TRANS_STMT_RELEASE = RELEASE
   TRANS_STMT_ROLLBACK_TO = ROLLBACK_TO
   TRANS_STMT_PREPARE = PREPARE
   TRANS_STMT_COMMIT_PREPARED = COMMIT_PREPARED
   TRANS_STMT_ROLLBACK_PREPARED = ROLLBACK_PREPARED
typedef_struct TransactionStmt
typedef_struct CompositeTypeStmt
typedef_struct CreateEnumStmt
typedef_struct CreateRangeStmt
typedef_struct AlterEnumStmt
typedef_struct ViewStmt
typedef_struct LoadStmt
typedef_struct CreatedbStmt
typedef_struct AlterDatabaseStmt
typedef_struct AlterDatabaseSet
typedef_struct DropdbStmt
typedef_struct ClusterStmt
typedef_enum VacuumOption
   VACOPT_ANALYZE = 2
   VACOPT_VERBOSE = 4
   VACOPT_VACUUM = 1
   VACOPT_FREEZE = 8
   VACOPT_FULL = 16
   VACOPT_NOWAIT = 32
typedef_struct VacuumStmt
typedef_struct ExplainStmt
typedef_struct CreateTableAsStmt
typedef_struct CheckPointStmt
typedef_enum DiscardMode
   DISCARD_ALL = ALL
   DISCARD_PLANS = PLANS
   DISCARD_TEMP = TEMP
typedef_struct DiscardStmt
typedef_struct LockStmt
typedef_struct ConstraintsSetStmt
typedef_struct ReindexStmt
typedef_struct CreateConversionStmt
typedef_struct CreateCastStmt
typedef_struct PrepareStmt
typedef_struct ExecuteStmt
typedef_struct DeallocateStmt
typedef_struct DropOwnedStmt
typedef_struct ReassignOwnedStmt
typedef_struct AlterTSDictionaryStmt
typedef_struct AlterTSConfigurationStmt
---STARTSTATE: INITIAL @ 0 ('set enable_seqscan=off;')
---GOTMATCH: identifier
---ENDTOKEN: SET, set
---STARTSTATE: INITIAL @ 3 (' enable_seqscan=off;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, enable_seqscan
---STARTSTATE: INITIAL @ 18 ('=off;')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 19 ('off;')
---GOTMATCH: identifier
---ENDTOKEN: OFF, off
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "var_value",
      right_side => ["stmtmulti"],
      rule_name => "var_value_188",
      token => undef,
      token_val => undef,
      val => "off",
    },
    type => "String",
    val => "off",
  },
}
---STARTSTATE: INITIAL @ 22 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  VariableSetStmt => {
    args => [
              bless({
                location => {
                  char_pos => undef,
                  left_side => "var_value",
                  right_side => ["stmtmulti"],
                  rule_name => "var_value_188",
                  token => undef,
                  token_val => undef,
                  val => "off",
                },
                type => "String",
                val => "off",
              }, "SQL::Translator::Statement::A_Const"),
            ],
    kind => "SET_VALUE",
    name => "enable_seqscan",
  },
}
---STARTSTATE: INITIAL @ 23 ('
-- ensure consistent test output regardless of th')
---GOTMATCH: identifier
---ENDTOKEN: SET, SET
---STARTSTATE: INITIAL @ 99 (' bytea_output TO escape;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, bytea_output
---STARTSTATE: INITIAL @ 112 (' TO escape;')
---GOTMATCH: identifier
---ENDTOKEN: TO, TO
---STARTSTATE: INITIAL @ 115 (' escape;')
---GOTMATCH: identifier
---ENDTOKEN: ESCAPE, escape
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "var_value",
      right_side => ["stmtmulti"],
      rule_name => "var_value_188",
      token => undef,
      token_val => undef,
      val => "escape",
    },
    type => "String",
    val => "escape",
  },
}
---STARTSTATE: INITIAL @ 122 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  VariableSetStmt => {
    args => [
              bless({
                location => {
                  char_pos => undef,
                  left_side => "var_value",
                  right_side => ["stmtmulti"],
                  rule_name => "var_value_188",
                  token => undef,
                  token_val => undef,
                  val => "escape",
                },
                type => "String",
                val => "escape",
              }, "SQL::Translator::Statement::A_Const"),
            ],
    kind => "SET_VALUE",
    name => "bytea_output",
  },
}
---STARTSTATE: INITIAL @ 123 ('

CREATE TABLE test_timetz (
	i timetz
);
CREATE T')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 131 (' TABLE test_timetz (')
---GOTMATCH: identifier
---ENDTOKEN: TABLE, TABLE
---STARTSTATE: INITIAL @ 137 (' test_timetz (')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_timetz
---STARTSTATE: INITIAL @ 149 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "(",
      token_val => "(",
      val => "test_timetz",
    },
    relname => "test_timetz",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 151 ('
	i timetz
);
CREATE TABLE test_char (
	i "char"
)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, i
---STARTSTATE: INITIAL @ 154 (' timetz')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, timetz
---STARTSTATE: INITIAL @ 161 ('
);
CREATE TABLE test_char (
	i "char"
);

INSERT ')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["timetz"], typemod => -1 } }
{
  ColumnDefinition => {
    collOid      => 0,
    colname      => "i",
    inhcount     => 0,
    is_from_type => 0,
    is_local     => 1,
    is_not_null  => 0,
    storage      => 0,
    typeName     => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => ")",
                                       token_val => ")",
                                       val => "timetz",
                                     },
                      names       => ["timetz"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 163 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateStmt => {
    if_not_exists => 0,
    oncommit      => "NOOP",
    relation      => bless({
                       inhOpt => "DEFAULT",
                       location => {
                         char_pos => undef,
                         left_side => "qualified_name",
                         right_side => ["stmtmulti"],
                         rule_name => "qualified_name_1777",
                         token => "(",
                         token_val => "(",
                         val => "test_timetz",
                       },
                       relname => "test_timetz",
                       relpersistence => "\"p\"",
                     }, "SQL::Translator::Statement::RangeVar"),
    tableElts     => [
                       bless({
                         collOid      => 0,
                         colname      => "i",
                         constraints  => [],
                         inhcount     => 0,
                         is_from_type => 0,
                         is_local     => 1,
                         is_not_null  => 0,
                         storage      => 0,
                         typeName     => bless({
                                           arrayBounds => undef,
                                           location    => {
                                                            char_pos => undef,
                                                            left_side => "GenericType",
                                                            right_side => ["stmtmulti"],
                                                            rule_name => "GenericType_1429",
                                                            token => ")",
                                                            token_val => ")",
                                                            val => "timetz",
                                                          },
                                           names       => ["timetz"],
                                           typemod     => -1,
                                           typmods     => undef,
                                         }, "SQL::Translator::Statement::TypeName"),
                       }, "SQL::Translator::Statement::Column::Definition"),
                     ],
  },
}
---STARTSTATE: INITIAL @ 164 ('
CREATE TABLE test_char (
	i "char"
);

INSERT INT')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 171 (' TABLE test_char (')
---GOTMATCH: identifier
---ENDTOKEN: TABLE, TABLE
---STARTSTATE: INITIAL @ 177 (' test_char (')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_char
---STARTSTATE: INITIAL @ 187 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "(",
      token_val => "(",
      val => "test_char",
    },
    relname => "test_char",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 189 ('
	i "char"
);

INSERT INTO test_timetz VALUES
	( '')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, i
---STARTSTATE: INITIAL @ 192 (' "char"')
---GOTMATCH: xdstart
---STARTSTATE: xd @ 194 ('char"')
---ENDTOKEN: IDENT, char
---STARTSTATE: INITIAL @ 199 ('
);

INSERT INTO test_timetz VALUES
	( '03:55:08 G')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["char"], typemod => -1 } }
{
  ColumnDefinition => {
    collOid      => 0,
    colname      => "i",
    inhcount     => 0,
    is_from_type => 0,
    is_local     => 1,
    is_not_null  => 0,
    storage      => 0,
    typeName     => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => ")",
                                       token_val => ")",
                                       val => "char",
                                     },
                      names       => ["char"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 201 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateStmt => {
    if_not_exists => 0,
    oncommit      => "NOOP",
    relation      => bless({
                       inhOpt => "DEFAULT",
                       location => {
                         char_pos => undef,
                         left_side => "qualified_name",
                         right_side => ["stmtmulti"],
                         rule_name => "qualified_name_1777",
                         token => "(",
                         token_val => "(",
                         val => "test_char",
                       },
                       relname => "test_char",
                       relpersistence => "\"p\"",
                     }, "SQL::Translator::Statement::RangeVar"),
    tableElts     => [
                       bless({
                         collOid      => 0,
                         colname      => "i",
                         constraints  => [],
                         inhcount     => 0,
                         is_from_type => 0,
                         is_local     => 1,
                         is_not_null  => 0,
                         storage      => 0,
                         typeName     => bless({
                                           arrayBounds => undef,
                                           location    => {
                                                            char_pos => undef,
                                                            left_side => "GenericType",
                                                            right_side => ["stmtmulti"],
                                                            rule_name => "GenericType_1429",
                                                            token => ")",
                                                            token_val => ")",
                                                            val => "char",
                                                          },
                                           names       => ["char"],
                                           typemod     => -1,
                                           typmods     => undef,
                                         }, "SQL::Translator::Statement::TypeName"),
                       }, "SQL::Translator::Statement::Column::Definition"),
                     ],
  },
}
---STARTSTATE: INITIAL @ 202 ('

INSERT INTO test_timetz VALUES
	( '03:55:08 GMT+')
---GOTMATCH: identifier
---ENDTOKEN: INSERT, INSERT
---STARTSTATE: INITIAL @ 210 (' INTO test_timetz VALUES')
---GOTMATCH: identifier
---ENDTOKEN: INTO, INTO
---STARTSTATE: INITIAL @ 215 (' test_timetz VALUES')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_timetz
---STARTSTATE: INITIAL @ 227 (' VALUES')
---GOTMATCH: identifier
---ENDTOKEN: VALUES, VALUES
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "VALUES",
      token_val => "VALUES",
      val => "test_timetz",
    },
    relname => "test_timetz",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 234 ('
	( '03:55:08 GMT+2' ),
	( '04:55:08 GMT+2' ),
	( ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 237 (' '03:55:08 GMT+2' ),')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 239 ('03:55:08 GMT+2' ),')
---ENDTOKEN: SCONST, 03:55:08 GMT+2
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "03:55:08 GMT+2",
    },
    type => "String",
    val => "03:55:08 GMT+2",
  },
}
---STARTSTATE: INITIAL @ 254 (' ),')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  SelectStmt => {
    valuesLists => [
      bless({
        location => {
          char_pos => undef,
          left_side => "AexprConst",
          right_side => ["stmtmulti"],
          rule_name => "AexprConst_1791",
          token => undef,
          token_val => undef,
          val => "03:55:08 GMT+2",
        },
        type => "String",
        val => "03:55:08 GMT+2",
      }, "SQL::Translator::Statement::A_Const"),
    ],
  },
}
---STARTSTATE: INITIAL @ 256 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 257 ('
	( '04:55:08 GMT+2' ),
	( '05:55:08 GMT+2' ),
	( ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 260 (' '04:55:08 GMT+2' ),')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 262 ('04:55:08 GMT+2' ),')
---ENDTOKEN: SCONST, 04:55:08 GMT+2
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "04:55:08 GMT+2",
    },
    type => "String",
    val => "04:55:08 GMT+2",
  },
}
---STARTSTATE: INITIAL @ 277 (' ),')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 279 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 280 ('
	( '05:55:08 GMT+2' ),
	( '08:55:08 GMT+2' ),
	( ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 283 (' '05:55:08 GMT+2' ),')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 285 ('05:55:08 GMT+2' ),')
---ENDTOKEN: SCONST, 05:55:08 GMT+2
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "05:55:08 GMT+2",
    },
    type => "String",
    val => "05:55:08 GMT+2",
  },
}
---STARTSTATE: INITIAL @ 300 (' ),')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 302 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 303 ('
	( '08:55:08 GMT+2' ),
	( '09:55:08 GMT+2' ),
	( ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 306 (' '08:55:08 GMT+2' ),')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 308 ('08:55:08 GMT+2' ),')
---ENDTOKEN: SCONST, 08:55:08 GMT+2
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "08:55:08 GMT+2",
    },
    type => "String",
    val => "08:55:08 GMT+2",
  },
}
---STARTSTATE: INITIAL @ 323 (' ),')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 325 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 326 ('
	( '09:55:08 GMT+2' ),
	( '10:55:08 GMT+2' )
;

C')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 329 (' '09:55:08 GMT+2' ),')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 331 ('09:55:08 GMT+2' ),')
---ENDTOKEN: SCONST, 09:55:08 GMT+2
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "09:55:08 GMT+2",
    },
    type => "String",
    val => "09:55:08 GMT+2",
  },
}
---STARTSTATE: INITIAL @ 346 (' ),')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 348 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 349 ('
	( '10:55:08 GMT+2' )
;

CREATE INDEX idx_timetz ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 352 (' '10:55:08 GMT+2' )')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 354 ('10:55:08 GMT+2' )')
---ENDTOKEN: SCONST, 10:55:08 GMT+2
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "10:55:08 GMT+2",
    },
    type => "String",
    val => "10:55:08 GMT+2",
  },
}
---STARTSTATE: INITIAL @ 369 (' )')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 371 ('
;

CREATE INDEX idx_timetz ON test_timetz USING g')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  InsertStmt => {
    selectStmt => bless({
      valuesLists => [
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "03:55:08 GMT+2",
          },
          type => "String",
          val => "03:55:08 GMT+2",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "04:55:08 GMT+2",
          },
          type => "String",
          val => "04:55:08 GMT+2",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "05:55:08 GMT+2",
          },
          type => "String",
          val => "05:55:08 GMT+2",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "08:55:08 GMT+2",
          },
          type => "String",
          val => "08:55:08 GMT+2",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "09:55:08 GMT+2",
          },
          type => "String",
          val => "09:55:08 GMT+2",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "10:55:08 GMT+2",
          },
          type => "String",
          val => "10:55:08 GMT+2",
        }, "SQL::Translator::Statement::A_Const"),
      ],
    }, "SQL::Translator::Statement::Select"),
  },
}
---STARTSTATE: INITIAL @ 373 ('

CREATE INDEX idx_timetz ON test_timetz USING gin')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 381 (' INDEX idx_timetz ON test_timetz USING gin (i);')
---GOTMATCH: identifier
---ENDTOKEN: INDEX, INDEX
---STARTSTATE: INITIAL @ 387 (' idx_timetz ON test_timetz USING gin (i);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, idx_timetz
---STARTSTATE: INITIAL @ 398 (' ON test_timetz USING gin (i);')
---GOTMATCH: identifier
---ENDTOKEN: ON, ON
---STARTSTATE: INITIAL @ 401 (' test_timetz USING gin (i);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_timetz
---STARTSTATE: INITIAL @ 413 (' USING gin (i);')
---GOTMATCH: identifier
---ENDTOKEN: USING, USING
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "USING",
      token_val => "USING",
      val => "test_timetz",
    },
    relname => "test_timetz",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 419 (' gin (i);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin
---STARTSTATE: INITIAL @ 423 (' (i);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 425 ('i);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, i
---STARTSTATE: INITIAL @ 426 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  IndexElem => { name => "i", nulls_ordering => "DEFAULT", ordering => "DEFAULT" },
}
---STARTSTATE: INITIAL @ 427 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  IndexStmt => {
    accessMethod => "gin",
    concurrent   => 0,
    idxname      => "idx_timetz",
    indexOid     => 0,
    indexParams  => [
                      bless({ name => "i", nulls_ordering => "DEFAULT", ordering => "DEFAULT" }, "SQL::Translator::Statement::IndexElem"),
                    ],
    relation     => bless({
                      inhOpt => "DEFAULT",
                      location => {
                        char_pos => undef,
                        left_side => "qualified_name",
                        right_side => ["stmtmulti"],
                        rule_name => "qualified_name_1777",
                        token => "USING",
                        token_val => "USING",
                        val => "test_timetz",
                      },
                      relname => "test_timetz",
                      relpersistence => "\"p\"",
                    }, "SQL::Translator::Statement::RangeVar"),
    unique       => 0,
  },
}
---STARTSTATE: INITIAL @ 428 ('

SELECT * FROM test_timetz WHERE i<'08:55:08 GMT+')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 436 (' * FROM test_timetz WHERE i<'08:55:08 GMT+2'::time')
---GOTMATCH: self
---ENDTOKEN: *, *
{
  ColumnReference => {
    fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
    location => {
                  char_pos => undef,
                  left_side => "target_el",
                  right_side => ["stmtmulti"],
                  rule_name => "target_el_1774",
                  token => undef,
                  token_val => undef,
                  val => "*",
                },
  },
}
{
  ResultTarget => {
    location => {
      char_pos => undef,
      left_side => "target_el",
      right_side => ["stmtmulti"],
      rule_name => "target_el_1774",
      token => undef,
      token_val => undef,
      val => "*",
    },
    val => bless({
      fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
      location => {
                    char_pos => undef,
                    left_side => "target_el",
                    right_side => ["stmtmulti"],
                    rule_name => "target_el_1774",
                    token => undef,
                    token_val => undef,
                    val => "*",
                  },
    }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 438 (' FROM test_timetz WHERE i<'08:55:08 GMT+2'::timetz')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
---STARTSTATE: INITIAL @ 443 (' test_timetz WHERE i<'08:55:08 GMT+2'::timetz ORDE')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_timetz
---STARTSTATE: INITIAL @ 455 (' WHERE i<'08:55:08 GMT+2'::timetz ORDER BY i;')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "test_timetz",
    },
    relname => "test_timetz",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 461 (' i<'08:55:08 GMT+2'::timetz ORDER BY i;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, i
---STARTSTATE: INITIAL @ 463 ('<'08:55:08 GMT+2'::timetz ORDER BY i;')
---GOTMATCH: self
---ENDTOKEN: <, <
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "<",
      token_val => "<",
      val => "i",
    },
  },
}
---STARTSTATE: INITIAL @ 464 (''08:55:08 GMT+2'::timetz ORDER BY i;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 465 ('08:55:08 GMT+2'::timetz ORDER BY i;')
---ENDTOKEN: SCONST, 08:55:08 GMT+2
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "08:55:08 GMT+2",
    },
    type => "String",
    val => "08:55:08 GMT+2",
  },
}
---STARTSTATE: INITIAL @ 480 ('::timetz ORDER BY i;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 482 ('timetz ORDER BY i;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, timetz
---STARTSTATE: INITIAL @ 488 (' ORDER BY i;')
---GOTMATCH: identifier
---ENDTOKEN: ORDER, ORDER
{ TypeName => { names => ["timetz"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "08:55:08 GMT+2",
      },
      type => "String",
      val => "08:55:08 GMT+2",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => "ORDER",
      token_val => "ORDER",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => "ORDER",
                       token_val => "ORDER",
                       val => "timetz",
                     },
      names       => ["timetz"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["i"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "<",
                                token_val => "<",
                                val => "i",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1504",
                  token => "ORDER",
                  token_val => "ORDER",
                  val => "<",
                },
    name     => ["<"],
    rexpr    => bless({
                  arg => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "08:55:08 GMT+2",
                    },
                    type => "String",
                    val => "08:55:08 GMT+2",
                  }, "SQL::Translator::Statement::A_Const"),
                  location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1493",
                    token => "ORDER",
                    token_val => "ORDER",
                    val => "::",
                  },
                  typeName => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "ORDER",
                                     token_val => "ORDER",
                                     val => "timetz",
                                   },
                    names       => ["timetz"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
                }, "SQL::Translator::Statement::TypeCast"),
  },
}
{
  SelectStmt => {
    fromClause  => [
                     bless({
                       alias => undef,
                       inhOpt => "DEFAULT",
                       location => {
                         char_pos => undef,
                         left_side => "qualified_name",
                         right_side => ["stmtmulti"],
                         rule_name => "qualified_name_1777",
                         token => "WHERE",
                         token_val => "WHERE",
                         val => "test_timetz",
                       },
                       relname => "test_timetz",
                       relpersistence => "\"p\"",
                     }, "SQL::Translator::Statement::RangeVar"),
                   ],
    targetList  => [
                     bless({
                       location => {
                         char_pos => undef,
                         left_side => "target_el",
                         right_side => ["stmtmulti"],
                         rule_name => "target_el_1774",
                         token => undef,
                         token_val => undef,
                         val => "*",
                       },
                       val => bless({
                         fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
                         location => {
                                       char_pos => undef,
                                       left_side => "target_el",
                                       right_side => ["stmtmulti"],
                                       rule_name => "target_el_1774",
                                       token => undef,
                                       token_val => undef,
                                       val => "*",
                                     },
                       }, "SQL::Translator::Statement::Column::Reference"),
                     }, "SQL::Translator::Statement::ResultTarget"),
                   ],
    whereClause => bless({
                     kind     => "OP",
                     lexpr    => bless({
                                   fields   => ["i"],
                                   location => {
                                                 char_pos => undef,
                                                 left_side => "columnref",
                                                 right_side => ["stmtmulti"],
                                                 rule_name => "columnref_1752",
                                                 token => "<",
                                                 token_val => "<",
                                                 val => "i",
                                               },
                                 }, "SQL::Translator::Statement::Column::Reference"),
                     location => {
                                   char_pos => undef,
                                   left_side => "a_expr",
                                   right_side => ["stmtmulti", ";", "stmt"],
                                   rule_name => "a_expr_1504",
                                   token => "ORDER",
                                   token_val => "ORDER",
                                   val => "<",
                                 },
                     name     => ["<"],
                     rexpr    => bless({
                                   arg => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "08:55:08 GMT+2",
                                     },
                                     type => "String",
                                     val => "08:55:08 GMT+2",
                                   }, "SQL::Translator::Statement::A_Const"),
                                   location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1493",
                                     token => "ORDER",
                                     token_val => "ORDER",
                                     val => "::",
                                   },
                                   typeName => bless({
                                     arrayBounds => undef,
                                     location    => {
                                                      char_pos => undef,
                                                      left_side => "GenericType",
                                                      right_side => ["stmtmulti"],
                                                      rule_name => "GenericType_1429",
                                                      token => "ORDER",
                                                      token_val => "ORDER",
                                                      val => "timetz",
                                                    },
                                     names       => ["timetz"],
                                     typemod     => -1,
                                     typmods     => undef,
                                   }, "SQL::Translator::Statement::TypeName"),
                                 }, "SQL::Translator::Statement::TypeCast"),
                   }, "SQL::Translator::Statement::A_Expr"),
  },
}
---STARTSTATE: INITIAL @ 494 (' BY i;')
---GOTMATCH: identifier
---ENDTOKEN: BY, BY
---STARTSTATE: INITIAL @ 497 (' i;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, i
---STARTSTATE: INITIAL @ 499 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => ";",
      token_val => ";",
      val => "i",
    },
  },
}
{
  SortBy => {
    node => bless({
      fields   => ["i"],
      location => {
                    char_pos => undef,
                    left_side => "columnref",
                    right_side => ["stmtmulti"],
                    rule_name => "columnref_1752",
                    token => ";",
                    token_val => ";",
                    val => "i",
                  },
    }, "SQL::Translator::Statement::Column::Reference"),
    sortby_dir => "DEFAULT",
    sortby_nulls => "DEFAULT",
  },
}
---STARTSTATE: INITIAL @ 500 ('
SELECT * FROM test_char WHERE i<'d'::"char" ORDER')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 507 (' * FROM test_char WHERE i<'d'::"char" ORDER BY i;')
---GOTMATCH: self
---ENDTOKEN: *, *
{
  ColumnReference => {
    fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
    location => {
                  char_pos => undef,
                  left_side => "target_el",
                  right_side => ["stmtmulti"],
                  rule_name => "target_el_1774",
                  token => undef,
                  token_val => undef,
                  val => "*",
                },
  },
}
{
  ResultTarget => {
    location => {
      char_pos => undef,
      left_side => "target_el",
      right_side => ["stmtmulti"],
      rule_name => "target_el_1774",
      token => undef,
      token_val => undef,
      val => "*",
    },
    val => bless({
      fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
      location => {
                    char_pos => undef,
                    left_side => "target_el",
                    right_side => ["stmtmulti"],
                    rule_name => "target_el_1774",
                    token => undef,
                    token_val => undef,
                    val => "*",
                  },
    }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 509 (' FROM test_char WHERE i<'d'::"char" ORDER BY i;')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
---STARTSTATE: INITIAL @ 514 (' test_char WHERE i<'d'::"char" ORDER BY i;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_char
---STARTSTATE: INITIAL @ 524 (' WHERE i<'d'::"char" ORDER BY i;')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "test_char",
    },
    relname => "test_char",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 530 (' i<'d'::"char" ORDER BY i;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, i
---STARTSTATE: INITIAL @ 532 ('<'d'::"char" ORDER BY i;')
---GOTMATCH: self
---ENDTOKEN: <, <
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "<",
      token_val => "<",
      val => "i",
    },
  },
}
---STARTSTATE: INITIAL @ 533 (''d'::"char" ORDER BY i;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 534 ('d'::"char" ORDER BY i;')
---ENDTOKEN: SCONST, d
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "d",
    },
    type => "String",
    val => "d",
  },
}
---STARTSTATE: INITIAL @ 536 ('::"char" ORDER BY i;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 538 ('"char" ORDER BY i;')
---GOTMATCH: xdstart
---STARTSTATE: xd @ 539 ('char" ORDER BY i;')
---ENDTOKEN: IDENT, char
---STARTSTATE: INITIAL @ 544 (' ORDER BY i;')
---GOTMATCH: identifier
---ENDTOKEN: ORDER, ORDER
{ TypeName => { names => ["char"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "d",
      },
      type => "String",
      val => "d",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => "ORDER",
      token_val => "ORDER",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => "ORDER",
                       token_val => "ORDER",
                       val => "char",
                     },
      names       => ["char"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["i"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "<",
                                token_val => "<",
                                val => "i",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1504",
                  token => "ORDER",
                  token_val => "ORDER",
                  val => "<",
                },
    name     => ["<"],
    rexpr    => bless({
                  arg => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "d",
                    },
                    type => "String",
                    val => "d",
                  }, "SQL::Translator::Statement::A_Const"),
                  location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1493",
                    token => "ORDER",
                    token_val => "ORDER",
                    val => "::",
                  },
                  typeName => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "ORDER",
                                     token_val => "ORDER",
                                     val => "char",
                                   },
                    names       => ["char"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
                }, "SQL::Translator::Statement::TypeCast"),
  },
}
{
  SelectStmt => {
    fromClause  => [
                     bless({
                       alias => undef,
                       inhOpt => "DEFAULT",
                       location => {
                         char_pos => undef,
                         left_side => "qualified_name",
                         right_side => ["stmtmulti"],
                         rule_name => "qualified_name_1777",
                         token => "WHERE",
                         token_val => "WHERE",
                         val => "test_char",
                       },
                       relname => "test_char",
                       relpersistence => "\"p\"",
                     }, "SQL::Translator::Statement::RangeVar"),
                   ],
    targetList  => [
                     bless({
                       location => {
                         char_pos => undef,
                         left_side => "target_el",
                         right_side => ["stmtmulti"],
                         rule_name => "target_el_1774",
                         token => undef,
                         token_val => undef,
                         val => "*",
                       },
                       val => bless({
                         fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
                         location => {
                                       char_pos => undef,
                                       left_side => "target_el",
                                       right_side => ["stmtmulti"],
                                       rule_name => "target_el_1774",
                                       token => undef,
                                       token_val => undef,
                                       val => "*",
                                     },
                       }, "SQL::Translator::Statement::Column::Reference"),
                     }, "SQL::Translator::Statement::ResultTarget"),
                   ],
    whereClause => bless({
                     kind     => "OP",
                     lexpr    => bless({
                                   fields   => ["i"],
                                   location => {
                                                 char_pos => undef,
                                                 left_side => "columnref",
                                                 right_side => ["stmtmulti"],
                                                 rule_name => "columnref_1752",
                                                 token => "<",
                                                 token_val => "<",
                                                 val => "i",
                                               },
                                 }, "SQL::Translator::Statement::Column::Reference"),
                     location => {
                                   char_pos => undef,
                                   left_side => "a_expr",
                                   right_side => ["stmtmulti", ";", "stmt"],
                                   rule_name => "a_expr_1504",
                                   token => "ORDER",
                                   token_val => "ORDER",
                                   val => "<",
                                 },
                     name     => ["<"],
                     rexpr    => bless({
                                   arg => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "d",
                                     },
                                     type => "String",
                                     val => "d",
                                   }, "SQL::Translator::Statement::A_Const"),
                                   location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1493",
                                     token => "ORDER",
                                     token_val => "ORDER",
                                     val => "::",
                                   },
                                   typeName => bless({
                                     arrayBounds => undef,
                                     location    => {
                                                      char_pos => undef,
                                                      left_side => "GenericType",
                                                      right_side => ["stmtmulti"],
                                                      rule_name => "GenericType_1429",
                                                      token => "ORDER",
                                                      token_val => "ORDER",
                                                      val => "char",
                                                    },
                                     names       => ["char"],
                                     typemod     => -1,
                                     typmods     => undef,
                                   }, "SQL::Translator::Statement::TypeName"),
                                 }, "SQL::Translator::Statement::TypeCast"),
                   }, "SQL::Translator::Statement::A_Expr"),
  },
}
---STARTSTATE: INITIAL @ 550 (' BY i;')
---GOTMATCH: identifier
---ENDTOKEN: BY, BY
---STARTSTATE: INITIAL @ 553 (' i;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, i
---STARTSTATE: INITIAL @ 555 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => ";",
      token_val => ";",
      val => "i",
    },
  },
}
{
  SortBy => {
    node => bless({
      fields   => ["i"],
      location => {
                    char_pos => undef,
                    left_side => "columnref",
                    right_side => ["stmtmulti"],
                    rule_name => "columnref_1752",
                    token => ";",
                    token_val => ";",
                    val => "i",
                  },
    }, "SQL::Translator::Statement::Column::Reference"),
    sortby_dir => "DEFAULT",
    sortby_nulls => "DEFAULT",
  },
}
---STARTSTATE: INITIAL @ 556 ('

CREATE EXTENSION btree_gin;

CREATE FUNCTION pg_')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 564 (' EXTENSION btree_gin;')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 574 (' btree_gin;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 584 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateExtensionStmt => { extname => "btree_gin", if_not_exists => 0 },
}
---STARTSTATE: INITIAL @ 585 ('

CREATE FUNCTION pg_catalog.pg_file_rename(text, ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 593 (' FUNCTION pg_catalog.pg_file_rename(text, text, te')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 602 (' pg_catalog.pg_file_rename(text, text, text)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 613 ('.pg_file_rename(text, text, text)')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 614 ('pg_file_rename(text, text, text)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_file_rename
---STARTSTATE: INITIAL @ 628 ('(text, text, text)')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 629 ('text, text, text)')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 633 (', text, text)')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["text"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 634 (' text, text)')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 639 (', text)')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["text"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 640 (' text)')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 645 (')')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["text"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 646 ('
RETURNS bool
AS 'MODULE_PATHNAME', 'pg_file_renam')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 654 (' bool')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, bool
---STARTSTATE: INITIAL @ 659 ('
AS 'MODULE_PATHNAME', 'pg_file_rename'
LANGUAGE C')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["bool"], typemod => -1 } }
---STARTSTATE: INITIAL @ 662 (' 'MODULE_PATHNAME', 'pg_file_rename'')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 664 ('MODULE_PATHNAME', 'pg_file_rename'')
---ENDTOKEN: SCONST, MODULE_PATHNAME
---STARTSTATE: INITIAL @ 680 (', 'pg_file_rename'')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 681 (' 'pg_file_rename'')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 683 ('pg_file_rename'')
---ENDTOKEN: SCONST, pg_file_rename
{
  DefElem => {
    arg => ["MODULE_PATHNAME", "pg_file_rename"],
    defaction => "UNSPEC",
    defname => "as",
  },
}
---STARTSTATE: INITIAL @ 698 ('
LANGUAGE C VOLATILE;

CREATE FUNCTION pg_catalog.')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
---STARTSTATE: INITIAL @ 707 (' C VOLATILE;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, c
{
  DefElem => { arg => "c", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 709 (' VOLATILE;')
---GOTMATCH: identifier
---ENDTOKEN: VOLATILE, VOLATILE
{
  DefElem => { arg => "volatile", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 718 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["pg_file_rename", "pg_catalog"],
    options    => [
                    bless({
                      arg => ["MODULE_PATHNAME", "pg_file_rename"],
                      defaction => "UNSPEC",
                      defname => "as",
                    }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "c", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "volatile", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "text",
                                       },
                        names       => ["text"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "text",
                                       },
                        names       => ["text"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "text",
                                       },
                        names       => ["text"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "bool",
                                   },
                    names       => ["bool"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 719 ('

CREATE FUNCTION pg_catalog.pg_file_rename(text, ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 727 (' FUNCTION pg_catalog.pg_file_rename(text, text)')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 736 (' pg_catalog.pg_file_rename(text, text)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 747 ('.pg_file_rename(text, text)')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 748 ('pg_file_rename(text, text)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_file_rename
---STARTSTATE: INITIAL @ 762 ('(text, text)')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 763 ('text, text)')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 767 (', text)')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["text"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 768 (' text)')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 773 (')')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["text"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 774 ('
RETURNS bool
AS 'SELECT pg_catalog.pg_file_rename')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 782 (' bool')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, bool
---STARTSTATE: INITIAL @ 787 ('
AS 'SELECT pg_catalog.pg_file_rename($1, $2, NULL')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["bool"], typemod => -1 } }
---STARTSTATE: INITIAL @ 790 (' 'SELECT pg_catalog.pg_file_rename($1, $2, NULL::p')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 792 ('SELECT pg_catalog.pg_file_rename($1, $2, NULL::pg_')
---ENDTOKEN: SCONST, SELECT pg_catalog.pg_file_rename($1, $2, NULL::pg_catalog.text);
---STARTSTATE: INITIAL @ 857 ('
LANGUAGE SQL VOLATILE STRICT;

CREATE FUNCTION pg')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => {
    arg => [
      "SELECT pg_catalog.pg_file_rename(\$1, \$2, NULL::pg_catalog.text);",
    ],
    defaction => "UNSPEC",
    defname => "as",
  },
}
---STARTSTATE: INITIAL @ 866 (' SQL VOLATILE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, sql
{
  DefElem => { arg => "sql", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 870 (' VOLATILE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: VOLATILE, VOLATILE
{
  DefElem => { arg => "volatile", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 879 (' STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 886 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["pg_file_rename", "pg_catalog"],
    options    => [
                    bless({
                      arg => [
                        "SELECT pg_catalog.pg_file_rename(\$1, \$2, NULL::pg_catalog.text);",
                      ],
                      defaction => "UNSPEC",
                      defname => "as",
                    }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "volatile", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "text",
                                       },
                        names       => ["text"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "text",
                                       },
                        names       => ["text"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "bool",
                                   },
                    names       => ["bool"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 887 ('

CREATE FUNCTION pg_catalog.pg_logfile_rotate()
R')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 895 (' FUNCTION pg_catalog.pg_logfile_rotate()')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 904 (' pg_catalog.pg_logfile_rotate()')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 915 ('.pg_logfile_rotate()')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 916 ('pg_logfile_rotate()')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_logfile_rotate
---STARTSTATE: INITIAL @ 933 ('()')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 934 (')')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 935 ('
RETURNS int4
AS 'pg_rotate_logfile'
LANGUAGE INTE')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 943 (' int4')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int4
---STARTSTATE: INITIAL @ 948 ('
AS 'pg_rotate_logfile'
LANGUAGE INTERNAL VOLATILE')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["int4"], typemod => -1 } }
---STARTSTATE: INITIAL @ 951 (' 'pg_rotate_logfile'')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 953 ('pg_rotate_logfile'')
---ENDTOKEN: SCONST, pg_rotate_logfile
---STARTSTATE: INITIAL @ 971 ('
LANGUAGE INTERNAL VOLATILE STRICT;

CREATE FUNCTI')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => { arg => ["pg_rotate_logfile"], defaction => "UNSPEC", defname => "as" },
}
---STARTSTATE: INITIAL @ 980 (' INTERNAL VOLATILE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
{
  DefElem => { arg => "internal", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 989 (' VOLATILE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: VOLATILE, VOLATILE
{
  DefElem => { arg => "volatile", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 998 (' STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 1005 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["pg_logfile_rotate", "pg_catalog"],
    options    => [
                    bless({ arg => ["pg_rotate_logfile"], defaction => "UNSPEC", defname => "as" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "internal", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "volatile", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "int4",
                                   },
                    names       => ["int4"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 1006 ('

CREATE FUNCTION gin_extract_query_int2(int2, int')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 1014 (' FUNCTION gin_extract_query_int2(int2, internal, i')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 1023 (' gin_extract_query_int2(int2, internal, int2, inte')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_query_int2
---STARTSTATE: INITIAL @ 1046 ('(int2, internal, int2, internal, internal)')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 1047 ('int2, internal, int2, internal, internal)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1051 (', internal, int2, internal, internal)')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1052 (' internal, int2, internal, internal)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1061 (', int2, internal, internal)')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1062 (' int2, internal, internal)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1067 (', internal, internal)')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1068 (' internal, internal)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1077 (', internal)')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1078 (' internal)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1087 (')')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1088 ('
RETURNS internal
AS 'MODULE_PATHNAME'
LANGUAGE C ')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 1096 (' internal')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1105 ('
AS 'MODULE_PATHNAME'
LANGUAGE C STRICT IMMUTABLE;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["internal"], typemod => -1 } }
---STARTSTATE: INITIAL @ 1108 (' 'MODULE_PATHNAME'')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 1110 ('MODULE_PATHNAME'')
---ENDTOKEN: SCONST, MODULE_PATHNAME
---STARTSTATE: INITIAL @ 1126 ('
LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR CLA')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => { arg => ["MODULE_PATHNAME"], defaction => "UNSPEC", defname => "as" },
}
---STARTSTATE: INITIAL @ 1135 (' C STRICT IMMUTABLE;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, c
{
  DefElem => { arg => "c", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 1137 (' STRICT IMMUTABLE;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 1144 (' IMMUTABLE;')
---GOTMATCH: identifier
---ENDTOKEN: IMMUTABLE, IMMUTABLE
{
  DefElem => { arg => "immutable", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 1154 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["gin_extract_query_int2"],
    options    => [
                    bless({ arg => ["MODULE_PATHNAME"], defaction => "UNSPEC", defname => "as" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "c", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "int2",
                                       },
                        names       => ["int2"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "internal",
                                       },
                        names       => ["internal"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "int2",
                                       },
                        names       => ["int2"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "internal",
                                       },
                        names       => ["internal"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "internal",
                                       },
                        names       => ["internal"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "internal",
                                   },
                    names       => ["internal"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 1155 ('

CREATE OPERATOR CLASS int2_ops
DEFAULT FOR TYPE ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 1163 (' OPERATOR CLASS int2_ops')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 1172 (' CLASS int2_ops')
---GOTMATCH: identifier
---ENDTOKEN: CLASS, CLASS
---STARTSTATE: INITIAL @ 1178 (' int2_ops')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2_ops
---STARTSTATE: INITIAL @ 1187 ('
DEFAULT FOR TYPE int2 USING gin
AS
    OPERATOR  ')
---GOTMATCH: identifier
---ENDTOKEN: DEFAULT, DEFAULT
---STARTSTATE: INITIAL @ 1195 (' FOR TYPE int2 USING gin')
---GOTMATCH: identifier
---ENDTOKEN: FOR, FOR
---STARTSTATE: INITIAL @ 1199 (' TYPE int2 USING gin')
---GOTMATCH: identifier
---ENDTOKEN: TYPE, TYPE
---STARTSTATE: INITIAL @ 1204 (' int2 USING gin')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1209 (' USING gin')
---GOTMATCH: identifier
---ENDTOKEN: USING, USING
{ TypeName => { names => ["int2"], typemod => -1 } }
---STARTSTATE: INITIAL @ 1215 (' gin')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin
---STARTSTATE: INITIAL @ 1219 ('
AS
    OPERATOR        1       <,
    OPERATOR   ')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 1222 ('
    OPERATOR        1       <,
    OPERATOR      ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 1235 ('        1       <,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 1
---STARTSTATE: INITIAL @ 1244 ('       <,')
---GOTMATCH: self
---ENDTOKEN: <, <
---STARTSTATE: INITIAL @ 1252 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["<"], number => 1 },
}
---STARTSTATE: INITIAL @ 1253 ('
    OPERATOR        2       <=,
    OPERATOR     ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 1266 ('        2       <=,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 2
---STARTSTATE: INITIAL @ 1275 ('       <=,')
---GOTMATCH: operator
---ENDTOKEN: Op, <=
---STARTSTATE: INITIAL @ 1284 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["<="], number => 2 },
}
---STARTSTATE: INITIAL @ 1285 ('
    OPERATOR        3       =,
    OPERATOR      ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 1298 ('        3       =,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 3
---STARTSTATE: INITIAL @ 1307 ('       =,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 1315 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["="], number => 3 },
}
---STARTSTATE: INITIAL @ 1316 ('
    OPERATOR        4       >=,
    OPERATOR     ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 1329 ('        4       >=,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 4
---STARTSTATE: INITIAL @ 1338 ('       >=,')
---GOTMATCH: operator
---ENDTOKEN: Op, >=
---STARTSTATE: INITIAL @ 1347 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => [">="], number => 4 },
}
---STARTSTATE: INITIAL @ 1348 ('
    OPERATOR        5       >,
    FUNCTION      ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 1361 ('        5       >,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 5
---STARTSTATE: INITIAL @ 1370 ('       >,')
---GOTMATCH: self
---ENDTOKEN: >, >
---STARTSTATE: INITIAL @ 1378 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => [">"], number => 5 },
}
---STARTSTATE: INITIAL @ 1379 ('
    FUNCTION        1       btint2cmp(int2,int2),')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 1392 ('        1       btint2cmp(int2,int2),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 1
---STARTSTATE: INITIAL @ 1401 ('       btint2cmp(int2,int2),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btint2cmp
---STARTSTATE: INITIAL @ 1417 ('(int2,int2),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 1418 ('int2,int2),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1422 (',int2),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1423 ('int2),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1427 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["btint2cmp"], number => 1 },
}
---STARTSTATE: INITIAL @ 1428 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 1429 ('
    FUNCTION        2       gin_extract_value_int')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 1442 ('        2       gin_extract_value_int2(int2, inter')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 2
---STARTSTATE: INITIAL @ 1451 ('       gin_extract_value_int2(int2, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_int2
---STARTSTATE: INITIAL @ 1480 ('(int2, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 1481 ('int2, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1485 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1486 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1495 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gin_extract_value_int2"], number => 2 },
}
---STARTSTATE: INITIAL @ 1496 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 1497 ('
    FUNCTION        3       gin_extract_query_int')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 1510 ('        3       gin_extract_query_int2(int2, inter')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 3
---STARTSTATE: INITIAL @ 1519 ('       gin_extract_query_int2(int2, internal, int2')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_query_int2
---STARTSTATE: INITIAL @ 1548 ('(int2, internal, int2, internal, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 1549 ('int2, internal, int2, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1553 (', internal, int2, internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1554 (' internal, int2, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1563 (', int2, internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1564 (' int2, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1569 (', internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1570 (' internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1579 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1580 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1589 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gin_extract_query_int2"], number => 3 },
}
---STARTSTATE: INITIAL @ 1590 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 1591 ('
    FUNCTION        4       gin_btree_consistent(')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 1604 ('        4       gin_btree_consistent(internal, int')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 4
---STARTSTATE: INITIAL @ 1613 ('       gin_btree_consistent(internal, int2, anyele')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_btree_consistent
---STARTSTATE: INITIAL @ 1640 ('(internal, int2, anyelement, int4, internal, inter')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 1641 ('internal, int2, anyelement, int4, internal, intern')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1649 (', int2, anyelement, int4, internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1650 (' int2, anyelement, int4, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1655 (', anyelement, int4, internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1656 (' anyelement, int4, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, anyelement
---STARTSTATE: INITIAL @ 1667 (', int4, internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["anyelement"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "anyelement",
                     },
      names       => ["anyelement"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1668 (' int4, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int4
---STARTSTATE: INITIAL @ 1673 (', internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int4"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int4",
                     },
      names       => ["int4"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1674 (' internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1683 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1684 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1693 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gin_btree_consistent"], number => 4 },
}
---STARTSTATE: INITIAL @ 1694 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 1695 ('
    FUNCTION        5       gin_compare_prefix_in')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 1708 ('        5       gin_compare_prefix_int2(int2,int2,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 5
---STARTSTATE: INITIAL @ 1717 ('       gin_compare_prefix_int2(int2,int2,int2, int')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_compare_prefix_int2
---STARTSTATE: INITIAL @ 1747 ('(int2,int2,int2, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 1748 ('int2,int2,int2, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1752 (',int2,int2, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1753 ('int2,int2, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1757 (',int2, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1758 ('int2, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1762 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1763 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1772 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => {
    itemtype => "FUNCTION",
    name => ["gin_compare_prefix_int2"],
    number => 5,
  },
}
---STARTSTATE: INITIAL @ 1773 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 1774 ('
STORAGE         int2;

ALTER EXTENSION btree_gin ')
---GOTMATCH: identifier
---ENDTOKEN: STORAGE, STORAGE
---STARTSTATE: INITIAL @ 1782 ('         int2;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 1795 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  CreateOpClassItem => {
    itemtype   => "STORAGETYPE",
    storedtype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ";",
                                     token_val => ";",
                                     val => "int2",
                                   },
                    names       => ["int2"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
{
  CreateOpClassStmt => {
    amname      => "gin",
    datatype    => bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => "USING",
                                      token_val => "USING",
                                      val => "int2",
                                    },
                     names       => ["int2"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
    isDefault   => 1,
    items       => [
                     bless({ itemtype => "OPERATOR", name => ["<"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => ["<="], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => ["="], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => [">="], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => [">"], number => 5 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["btint2cmp"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gin_extract_value_int2"], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gin_extract_query_int2"], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gin_btree_consistent"], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({
                       itemtype => "FUNCTION",
                       name => ["gin_compare_prefix_int2"],
                       number => 5,
                     }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({
                       itemtype   => "STORAGETYPE",
                       storedtype => bless({
                                       arrayBounds => undef,
                                       location    => {
                                                        char_pos => undef,
                                                        left_side => "GenericType",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "GenericType_1429",
                                                        token => ";",
                                                        token_val => ";",
                                                        val => "int2",
                                                      },
                                       names       => ["int2"],
                                       typemod     => -1,
                                       typmods     => undef,
                                     }, "SQL::Translator::Statement::TypeName"),
                     }, "SQL::Translator::Statement::CreateOpClass::Item"),
                   ],
    opclassname => ["int2_ops"],
  },
}
---STARTSTATE: INITIAL @ 1796 ('

ALTER EXTENSION btree_gin ADD function gin_btree')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 1803 (' EXTENSION btree_gin ADD function gin_btree_consis')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 1813 (' btree_gin ADD function gin_btree_consistent(inter')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 1823 (' ADD function gin_btree_consistent(internal,smalli')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 1827 (' function gin_btree_consistent(internal,smallint,a')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 1836 (' gin_btree_consistent(internal,smallint,anyelement')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_btree_consistent
---STARTSTATE: INITIAL @ 1857 ('(internal,smallint,anyelement,integer,internal,int')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 1858 ('internal,smallint,anyelement,integer,internal,inte')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1866 (',smallint,anyelement,integer,internal,internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1867 ('smallint,anyelement,integer,internal,internal);')
---GOTMATCH: identifier
---ENDTOKEN: SMALLINT, smallint
{ TypeName => { names => ["pg_catalog", "int2"], typemod => -1 } }
---STARTSTATE: INITIAL @ 1875 (',anyelement,integer,internal,internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1435",
                       token => undef,
                       token_val => undef,
                       val => "smallint",
                     },
      names       => ["pg_catalog", "int2"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1876 ('anyelement,integer,internal,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, anyelement
---STARTSTATE: INITIAL @ 1886 (',integer,internal,internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["anyelement"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "anyelement",
                     },
      names       => ["anyelement"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1887 ('integer,internal,internal);')
---GOTMATCH: identifier
---ENDTOKEN: INTEGER, integer
{ TypeName => { names => ["pg_catalog", "int4"], typemod => -1 } }
---STARTSTATE: INITIAL @ 1894 (',internal,internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1434",
                       token => undef,
                       token_val => undef,
                       val => "integer",
                     },
      names       => ["pg_catalog", "int4"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1895 ('internal,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1903 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1904 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1912 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_btree_consistent"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_btree_consistent"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 1913 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 1914 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 1920 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 1930 (' btree_gin ADD function gin_extract_value_int2(sma')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 1940 (' ADD function gin_extract_value_int2(smallint,inte')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 1944 (' function gin_extract_value_int2(smallint,internal')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 1953 (' gin_extract_value_int2(smallint,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_int2
---STARTSTATE: INITIAL @ 1976 ('(smallint,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 1977 ('smallint,internal);')
---GOTMATCH: identifier
---ENDTOKEN: SMALLINT, smallint
{ TypeName => { names => ["pg_catalog", "int2"], typemod => -1 } }
---STARTSTATE: INITIAL @ 1985 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1435",
                       token => undef,
                       token_val => undef,
                       val => "smallint",
                     },
      names       => ["pg_catalog", "int2"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 1986 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 1994 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_int2"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_int2"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 1995 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 1996 ('
ALTER EXTENSION btree_gin ADD function gin_compar')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2002 (' EXTENSION btree_gin ADD function gin_compare_pref')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2012 (' btree_gin ADD function gin_compare_prefix_int2(sm')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2022 (' ADD function gin_compare_prefix_int2(smallint,sma')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2026 (' function gin_compare_prefix_int2(smallint,smallin')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2035 (' gin_compare_prefix_int2(smallint,smallint,smallin')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_compare_prefix_int2
---STARTSTATE: INITIAL @ 2059 ('(smallint,smallint,smallint,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 2060 ('smallint,smallint,smallint,internal);')
---GOTMATCH: identifier
---ENDTOKEN: SMALLINT, smallint
{ TypeName => { names => ["pg_catalog", "int2"], typemod => -1 } }
---STARTSTATE: INITIAL @ 2068 (',smallint,smallint,internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1435",
                       token => undef,
                       token_val => undef,
                       val => "smallint",
                     },
      names       => ["pg_catalog", "int2"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2069 ('smallint,smallint,internal);')
---GOTMATCH: identifier
---ENDTOKEN: SMALLINT, smallint
{ TypeName => { names => ["pg_catalog", "int2"], typemod => -1 } }
---STARTSTATE: INITIAL @ 2077 (',smallint,internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1435",
                       token => undef,
                       token_val => undef,
                       val => "smallint",
                     },
      names       => ["pg_catalog", "int2"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2078 ('smallint,internal);')
---GOTMATCH: identifier
---ENDTOKEN: SMALLINT, smallint
{ TypeName => { names => ["pg_catalog", "int2"], typemod => -1 } }
---STARTSTATE: INITIAL @ 2086 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1435",
                       token => undef,
                       token_val => undef,
                       val => "smallint",
                     },
      names       => ["pg_catalog", "int2"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2087 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2095 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_compare_prefix_int2"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_compare_prefix_int2"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 2096 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2097 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2103 (' EXTENSION btree_gin ADD function gin_extract_quer')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2113 (' btree_gin ADD function gin_extract_query_int2(sma')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2123 (' ADD function gin_extract_query_int2(smallint,inte')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2127 (' function gin_extract_query_int2(smallint,internal')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2136 (' gin_extract_query_int2(smallint,internal,smallint')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_query_int2
---STARTSTATE: INITIAL @ 2159 ('(smallint,internal,smallint,internal,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 2160 ('smallint,internal,smallint,internal,internal);')
---GOTMATCH: identifier
---ENDTOKEN: SMALLINT, smallint
{ TypeName => { names => ["pg_catalog", "int2"], typemod => -1 } }
---STARTSTATE: INITIAL @ 2168 (',internal,smallint,internal,internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1435",
                       token => undef,
                       token_val => undef,
                       val => "smallint",
                     },
      names       => ["pg_catalog", "int2"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2169 ('internal,smallint,internal,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2177 (',smallint,internal,internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2178 ('smallint,internal,internal);')
---GOTMATCH: identifier
---ENDTOKEN: SMALLINT, smallint
{ TypeName => { names => ["pg_catalog", "int2"], typemod => -1 } }
---STARTSTATE: INITIAL @ 2186 (',internal,internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1435",
                       token => undef,
                       token_val => undef,
                       val => "smallint",
                     },
      names       => ["pg_catalog", "int2"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2187 ('internal,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2195 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2196 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2204 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_query_int2"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_query_int2"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 2205 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2206 ('
ALTER EXTENSION btree_gin ADD operator family int')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2212 (' EXTENSION btree_gin ADD operator family int2_ops ')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2222 (' btree_gin ADD operator family int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2232 (' ADD operator family int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2236 (' operator family int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, operator
---STARTSTATE: INITIAL @ 2245 (' family int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: FAMILY, family
---STARTSTATE: INITIAL @ 2252 (' int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2_ops
---STARTSTATE: INITIAL @ 2261 (' using gin;')
---GOTMATCH: identifier
---ENDTOKEN: USING, using
---STARTSTATE: INITIAL @ 2267 (' gin;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objargs => ["gin"],
    objname => ["int2_ops"],
    objtype => "OPFAMILY",
  },
}
---STARTSTATE: INITIAL @ 2271 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2272 ('
ALTER EXTENSION btree_gin ADD operator class int2')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2278 (' EXTENSION btree_gin ADD operator class int2_ops u')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2288 (' btree_gin ADD operator class int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2298 (' ADD operator class int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2302 (' operator class int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, operator
---STARTSTATE: INITIAL @ 2311 (' class int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: CLASS, class
---STARTSTATE: INITIAL @ 2317 (' int2_ops using gin;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2_ops
---STARTSTATE: INITIAL @ 2326 (' using gin;')
---GOTMATCH: identifier
---ENDTOKEN: USING, using
---STARTSTATE: INITIAL @ 2332 (' gin;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objargs => ["gin"],
    objname => ["int2_ops"],
    objtype => "OPCLASS",
  },
}
---STARTSTATE: INITIAL @ 2336 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2337 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2343 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2353 (' btree_gin ADD function gin_extract_value_int8(big')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2363 (' ADD function gin_extract_value_int8(bigint,intern')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2367 (' function gin_extract_value_int8(bigint,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2376 (' gin_extract_value_int8(bigint,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_int8
---STARTSTATE: INITIAL @ 2399 ('(bigint,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 2400 ('bigint,internal);')
---GOTMATCH: identifier
---ENDTOKEN: BIGINT, bigint
{ TypeName => { names => ["pg_catalog", "int8"], typemod => -1 } }
---STARTSTATE: INITIAL @ 2406 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1436",
                       token => undef,
                       token_val => undef,
                       val => "bigint",
                     },
      names       => ["pg_catalog", "int8"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2407 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2415 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_int8"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_int8"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 2416 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2417 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2423 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2433 (' btree_gin ADD function gin_extract_value_float4(r')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2443 (' ADD function gin_extract_value_float4(real,intern')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2447 (' function gin_extract_value_float4(real,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2456 (' gin_extract_value_float4(real,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_float4
---STARTSTATE: INITIAL @ 2481 ('(real,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 2482 ('real,internal);')
---GOTMATCH: identifier
---ENDTOKEN: REAL, real
{
  TypeName => { names => ["pg_catalog", "float4"], typemod => -1 },
}
---STARTSTATE: INITIAL @ 2486 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1437",
                       token => undef,
                       token_val => undef,
                       val => "real",
                     },
      names       => ["pg_catalog", "float4"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2487 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2495 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_float4"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_float4"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 2496 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2497 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2503 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2513 (' btree_gin ADD function gin_extract_value_float8(d')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2523 (' ADD function gin_extract_value_float8(double prec')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2527 (' function gin_extract_value_float8(double precisio')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2536 (' gin_extract_value_float8(double precision,interna')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_float8
---STARTSTATE: INITIAL @ 2561 ('(double precision,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 2562 ('double precision,internal);')
---GOTMATCH: identifier
---ENDTOKEN: DOUBLE, double
---STARTSTATE: INITIAL @ 2568 (' precision,internal);')
---GOTMATCH: identifier
---ENDTOKEN: PRECISION, precision
{
  TypeName => { names => ["pg_catalog", "float8"], typemod => -1 },
}
---STARTSTATE: INITIAL @ 2578 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1439",
                       token => undef,
                       token_val => undef,
                       val => "double",
                     },
      names       => ["pg_catalog", "float8"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2579 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2587 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_float8"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_float8"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 2588 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2589 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2595 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2605 (' btree_gin ADD function gin_extract_value_money(mo')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2615 (' ADD function gin_extract_value_money(money,intern')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2619 (' function gin_extract_value_money(money,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2628 (' gin_extract_value_money(money,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_money
---STARTSTATE: INITIAL @ 2652 ('(money,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 2653 ('money,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 2658 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["money"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "money",
                     },
      names       => ["money"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2659 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2667 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_money"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_money"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 2668 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2669 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2675 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2685 (' btree_gin ADD function gin_extract_value_oid(oid,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2695 (' ADD function gin_extract_value_oid(oid,internal);')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2699 (' function gin_extract_value_oid(oid,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2708 (' gin_extract_value_oid(oid,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_oid
---STARTSTATE: INITIAL @ 2730 ('(oid,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 2731 ('oid,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 2734 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["oid"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "oid",
                     },
      names       => ["oid"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2735 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2743 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_oid"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_oid"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 2744 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2745 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2751 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2761 (' btree_gin ADD function gin_extract_value_timestam')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2771 (' ADD function gin_extract_value_timestamp(timestam')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2775 (' function gin_extract_value_timestamp(timestamp wi')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2784 (' gin_extract_value_timestamp(timestamp without tim')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_timestamp
---STARTSTATE: INITIAL @ 2812 ('(timestamp without time zone,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 2813 ('timestamp without time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: TIMESTAMP, timestamp
---STARTSTATE: INITIAL @ 2822 (' without time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: WITHOUT, without
---STARTSTATE: INITIAL @ 2830 (' time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: TIME, time
---STARTSTATE: INITIAL @ 2835 (' zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: ZONE, zone
{
  TypeName => { names => ["pg_catalog", "timestamp"], typemod => -1 },
}
---STARTSTATE: INITIAL @ 2840 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "ConstDatetime",
                       right_side => ["stmtmulti"],
                       rule_name => "ConstDatetime_1469",
                       token => undef,
                       token_val => undef,
                       val => "timestamp",
                     },
      names       => ["pg_catalog", "timestamp"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2841 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2849 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_timestamp"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_timestamp"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 2850 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2851 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2857 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2867 (' btree_gin ADD function gin_extract_value_timestam')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2877 (' ADD function gin_extract_value_timestamptz(timest')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2881 (' function gin_extract_value_timestamptz(timestamp ')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2890 (' gin_extract_value_timestamptz(timestamp with time')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_timestamptz
---STARTSTATE: INITIAL @ 2920 ('(timestamp with time zone,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 2921 ('timestamp with time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: TIMESTAMP, timestamp
---STARTSTATE: INITIAL @ 2930 (' with time zone,internal);')
---GOTMATCH: identifier
---STARTSTATE: INITIAL @ 2935 (' time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: WITH_TIME, WITH_TIME
---STARTSTATE: INITIAL @ 2940 (' zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: ZONE, zone
{
  TypeName => { names => ["pg_catalog", "timestamptz"], typemod => -1 },
}
---STARTSTATE: INITIAL @ 2945 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "ConstDatetime",
                       right_side => ["stmtmulti"],
                       rule_name => "ConstDatetime_1469",
                       token => undef,
                       token_val => undef,
                       val => "timestamp",
                     },
      names       => ["pg_catalog", "timestamptz"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 2946 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 2954 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_timestamptz"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_timestamptz"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 2955 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 2956 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 2962 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 2972 (' btree_gin ADD function gin_extract_value_time(tim')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 2982 (' ADD function gin_extract_value_time(time without ')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 2986 (' function gin_extract_value_time(time without time')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 2995 (' gin_extract_value_time(time without time zone,int')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_time
---STARTSTATE: INITIAL @ 3018 ('(time without time zone,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3019 ('time without time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: TIME, time
---STARTSTATE: INITIAL @ 3023 (' without time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: WITHOUT, without
---STARTSTATE: INITIAL @ 3031 (' time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: TIME, time
---STARTSTATE: INITIAL @ 3036 (' zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: ZONE, zone
{ TypeName => { names => ["pg_catalog", "time"], typemod => -1 } }
---STARTSTATE: INITIAL @ 3041 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "ConstDatetime",
                       right_side => ["stmtmulti"],
                       rule_name => "ConstDatetime_1471",
                       token => undef,
                       token_val => undef,
                       val => "time",
                     },
      names       => ["pg_catalog", "time"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3042 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3050 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_time"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_time"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3051 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3052 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3058 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3068 (' btree_gin ADD function gin_extract_value_timetz(t')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3078 (' ADD function gin_extract_value_timetz(time with t')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3082 (' function gin_extract_value_timetz(time with time ')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3091 (' gin_extract_value_timetz(time with time zone,inte')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_timetz
---STARTSTATE: INITIAL @ 3116 ('(time with time zone,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3117 ('time with time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: TIME, time
---STARTSTATE: INITIAL @ 3121 (' with time zone,internal);')
---GOTMATCH: identifier
---STARTSTATE: INITIAL @ 3126 (' time zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: WITH_TIME, WITH_TIME
---STARTSTATE: INITIAL @ 3131 (' zone,internal);')
---GOTMATCH: identifier
---ENDTOKEN: ZONE, zone
{
  TypeName => { names => ["pg_catalog", "timetz"], typemod => -1 },
}
---STARTSTATE: INITIAL @ 3136 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "ConstDatetime",
                       right_side => ["stmtmulti"],
                       rule_name => "ConstDatetime_1471",
                       token => undef,
                       token_val => undef,
                       val => "time",
                     },
      names       => ["pg_catalog", "timetz"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3137 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3145 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_timetz"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_timetz"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3146 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3147 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3153 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3163 (' btree_gin ADD function gin_extract_value_date(dat')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3173 (' ADD function gin_extract_value_date(date,internal')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3177 (' function gin_extract_value_date(date,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3186 (' gin_extract_value_date(date,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_date
---STARTSTATE: INITIAL @ 3209 ('(date,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3210 ('date,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, date
---STARTSTATE: INITIAL @ 3214 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["date"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "date",
                     },
      names       => ["date"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3215 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3223 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_date"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_date"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3224 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3225 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3231 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3241 (' btree_gin ADD function gin_extract_value_interval')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3251 (' ADD function gin_extract_value_interval(interval,')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3255 (' function gin_extract_value_interval(interval,inte')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3264 (' gin_extract_value_interval(interval,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_interval
---STARTSTATE: INITIAL @ 3291 ('(interval,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3292 ('interval,internal);')
---GOTMATCH: identifier
---ENDTOKEN: INTERVAL, interval
{
  TypeName => { names => ["pg_catalog", "interval"], typemod => -1 },
}
---STARTSTATE: INITIAL @ 3300 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "ConstInterval",
                       right_side => ["stmtmulti"],
                       rule_name => "ConstInterval_1472",
                       token => undef,
                       token_val => undef,
                       val => "interval",
                     },
      names       => ["pg_catalog", "interval"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3301 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3309 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_interval"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_interval"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3310 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3311 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3317 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3327 (' btree_gin ADD function gin_extract_value_macaddr(')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3337 (' ADD function gin_extract_value_macaddr(macaddr,in')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3341 (' function gin_extract_value_macaddr(macaddr,intern')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3350 (' gin_extract_value_macaddr(macaddr,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_macaddr
---STARTSTATE: INITIAL @ 3376 ('(macaddr,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3377 ('macaddr,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, macaddr
---STARTSTATE: INITIAL @ 3384 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["macaddr"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "macaddr",
                     },
      names       => ["macaddr"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3385 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3393 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_macaddr"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_macaddr"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3394 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3395 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3401 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3411 (' btree_gin ADD function gin_extract_value_inet(ine')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3421 (' ADD function gin_extract_value_inet(inet,internal')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3425 (' function gin_extract_value_inet(inet,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3434 (' gin_extract_value_inet(inet,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_inet
---STARTSTATE: INITIAL @ 3457 ('(inet,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3458 ('inet,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, inet
---STARTSTATE: INITIAL @ 3462 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["inet"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "inet",
                     },
      names       => ["inet"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3463 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3471 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_inet"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_inet"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3472 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3473 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3479 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3489 (' btree_gin ADD function gin_extract_value_cidr(cid')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3499 (' ADD function gin_extract_value_cidr(cidr,internal')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3503 (' function gin_extract_value_cidr(cidr,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3512 (' gin_extract_value_cidr(cidr,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_cidr
---STARTSTATE: INITIAL @ 3535 ('(cidr,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3536 ('cidr,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cidr
---STARTSTATE: INITIAL @ 3540 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cidr"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "cidr",
                     },
      names       => ["cidr"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3541 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3549 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_cidr"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_cidr"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3550 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3551 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3557 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3567 (' btree_gin ADD function gin_extract_value_text(tex')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3577 (' ADD function gin_extract_value_text(text,internal')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3581 (' function gin_extract_value_text(text,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3590 (' gin_extract_value_text(text,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_text
---STARTSTATE: INITIAL @ 3613 ('(text,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3614 ('text,internal);')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 3618 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["text"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3619 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3627 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_text"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_text"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3628 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3629 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3635 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3645 (' btree_gin ADD function gin_extract_value_char("ch')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3655 (' ADD function gin_extract_value_char("char",intern')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3659 (' function gin_extract_value_char("char",internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3668 (' gin_extract_value_char("char",internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_char
---STARTSTATE: INITIAL @ 3691 ('("char",internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3692 ('"char",internal);')
---GOTMATCH: xdstart
---STARTSTATE: xd @ 3693 ('char",internal);')
---ENDTOKEN: IDENT, char
---STARTSTATE: INITIAL @ 3698 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["char"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "char",
                     },
      names       => ["char"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3699 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3707 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_char"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_char"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3708 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3709 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3715 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3725 (' btree_gin ADD function gin_extract_value_bytea(by')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3735 (' ADD function gin_extract_value_bytea(bytea,intern')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3739 (' function gin_extract_value_bytea(bytea,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3748 (' gin_extract_value_bytea(bytea,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_bytea
---STARTSTATE: INITIAL @ 3772 ('(bytea,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3773 ('bytea,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, bytea
---STARTSTATE: INITIAL @ 3778 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["bytea"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "bytea",
                     },
      names       => ["bytea"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3779 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3787 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_bytea"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_bytea"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3788 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3789 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3795 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3805 (' btree_gin ADD function gin_extract_value_bit(bit,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3815 (' ADD function gin_extract_value_bit(bit,internal);')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3819 (' function gin_extract_value_bit(bit,internal);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3828 (' gin_extract_value_bit(bit,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_bit
---STARTSTATE: INITIAL @ 3850 ('(bit,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3851 ('bit,internal);')
---GOTMATCH: identifier
---ENDTOKEN: BIT, bit
---STARTSTATE: INITIAL @ 3854 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["pg_catalog", "bit"], typemod => -1 } }
{ A_Const => { type => "Integer", val => 1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "BitWithoutLength",
                       right_side => ["stmtmulti"],
                       rule_name => "BitWithoutLength_1451",
                       token => ",",
                       token_val => ",",
                       val => "bit",
                     },
      names       => ["pg_catalog", "bit"],
      typemod     => -1,
      typmods     => [
                       bless({ type => "Integer", val => 1 }, "SQL::Translator::Statement::A_Const"),
                     ],
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3855 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3863 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_bit"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_bit"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3864 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3865 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3871 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3881 (' btree_gin ADD function gin_extract_value_varbit(b')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3891 (' ADD function gin_extract_value_varbit(bit varying')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3895 (' function gin_extract_value_varbit(bit varying,int')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3904 (' gin_extract_value_varbit(bit varying,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_varbit
---STARTSTATE: INITIAL @ 3929 ('(bit varying,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 3930 ('bit varying,internal);')
---GOTMATCH: identifier
---ENDTOKEN: BIT, bit
---STARTSTATE: INITIAL @ 3933 (' varying,internal);')
---GOTMATCH: identifier
---ENDTOKEN: VARYING, varying
---STARTSTATE: INITIAL @ 3941 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  TypeName => { names => ["pg_catalog", "varbit"], typemod => -1 },
}
{
  FunctionParameter => {
    argType => bless({ arrayBounds => undef, names => ["pg_catalog", "varbit"], typemod => -1 }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 3942 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 3950 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_varbit"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_varbit"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 3951 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 3952 ('
ALTER EXTENSION btree_gin ADD function gin_extrac')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 3958 (' EXTENSION btree_gin ADD function gin_extract_valu')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 3968 (' btree_gin ADD function gin_extract_value_numeric(')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, btree_gin
---STARTSTATE: INITIAL @ 3978 (' ADD function gin_extract_value_numeric(numeric,in')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 3982 (' function gin_extract_value_numeric(numeric,intern')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, function
---STARTSTATE: INITIAL @ 3991 (' gin_extract_value_numeric(numeric,internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gin_extract_value_numeric
---STARTSTATE: INITIAL @ 4017 ('(numeric,internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4018 ('numeric,internal);')
---GOTMATCH: identifier
---ENDTOKEN: NUMERIC, numeric
---STARTSTATE: INITIAL @ 4025 (',internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  TypeName => { names => ["pg_catalog", "numeric"], typemod => -1 },
}
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1442",
                       token => ",",
                       token_val => ",",
                       val => "numeric",
                     },
      names       => ["pg_catalog", "numeric"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4026 ('internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4034 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["gin_extract_value_numeric"] } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "btree_gin",
    objname => ["gin_extract_value_numeric"],
    objtype => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 4035 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 4036 ('

CREATE TYPE gbtreekey4 (
	INTERNALLENGTH = 4,
	I')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 4044 (' TYPE gbtreekey4 (')
---GOTMATCH: identifier
---ENDTOKEN: TYPE, TYPE
---STARTSTATE: INITIAL @ 4049 (' gbtreekey4 (')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbtreekey4
---STARTSTATE: INITIAL @ 4060 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4062 ('
	INTERNALLENGTH = 4,
	INPUT  = gbtreekey4_in,
	OU')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internallength
---STARTSTATE: INITIAL @ 4078 (' = 4,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 4080 (' 4,')
---GOTMATCH: integer
---ENDTOKEN: ICONST, 4
{
  DefElem => { arg => 4, defaction => "UNSPEC", defname => "internallength" },
}
---STARTSTATE: INITIAL @ 4082 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 4083 ('
	INPUT  = gbtreekey4_in,
	OUTPUT = gbtreekey4_out')
---GOTMATCH: identifier
---ENDTOKEN: INPUT, INPUT
---STARTSTATE: INITIAL @ 4090 ('  = gbtreekey4_in,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 4093 (' gbtreekey4_in,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbtreekey4_in
---STARTSTATE: INITIAL @ 4107 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["gbtreekey4_in"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "gbtreekey4_in",
                     },
      names       => ["gbtreekey4_in"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "INPUT",
  },
}
---STARTSTATE: INITIAL @ 4108 ('
	OUTPUT = gbtreekey4_out
);

CREATE OPERATOR <-> ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, output
---STARTSTATE: INITIAL @ 4116 (' = gbtreekey4_out')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 4118 (' gbtreekey4_out')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbtreekey4_out
---STARTSTATE: INITIAL @ 4133 ('
);

CREATE OPERATOR <-> (
	LEFTARG = money,
	RIGH')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["gbtreekey4_out"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "gbtreekey4_out",
                     },
      names       => ["gbtreekey4_out"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "output",
  },
}
{
  DefineStmt => {
    definition => [
      bless({ arg => 4, defaction => "UNSPEC", defname => "internallength" }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "gbtreekey4_in",
                         },
          names       => ["gbtreekey4_in"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "INPUT",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ")",
                           token_val => ")",
                           val => "gbtreekey4_out",
                         },
          names       => ["gbtreekey4_out"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "output",
      }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["gbtreekey4"],
    kind => "TYPE",
    oldstyle => 0,
  },
}
---STARTSTATE: INITIAL @ 4135 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 4136 ('

CREATE OPERATOR <-> (
	LEFTARG = money,
	RIGHTAR')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 4144 (' OPERATOR <-> (')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4153 (' <-> (')
---GOTMATCH: operator
---ENDTOKEN: Op, <->
---STARTSTATE: INITIAL @ 4157 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4159 ('
	LEFTARG = money,
	RIGHTARG = money,
	PROCEDURE =')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, leftarg
---STARTSTATE: INITIAL @ 4168 (' = money,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 4170 (' money,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 4176 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["money"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "money",
                     },
      names       => ["money"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "leftarg",
  },
}
---STARTSTATE: INITIAL @ 4177 ('
	RIGHTARG = money,
	PROCEDURE = cash_dist,
	COMMU')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, rightarg
---STARTSTATE: INITIAL @ 4187 (' = money,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 4189 (' money,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 4195 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["money"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "money",
                     },
      names       => ["money"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "rightarg",
  },
}
---STARTSTATE: INITIAL @ 4196 ('
	PROCEDURE = cash_dist,
	COMMUTATOR = '<->'
);

A')
---GOTMATCH: identifier
---ENDTOKEN: PROCEDURE, PROCEDURE
---STARTSTATE: INITIAL @ 4207 (' = cash_dist,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 4209 (' cash_dist,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cash_dist
---STARTSTATE: INITIAL @ 4219 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cash_dist"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "cash_dist",
                     },
      names       => ["cash_dist"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "PROCEDURE",
  },
}
---STARTSTATE: INITIAL @ 4220 ('
	COMMUTATOR = '<->'
);

ALTER OPERATOR FAMILY gis')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, commutator
---STARTSTATE: INITIAL @ 4232 (' = '<->'')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 4234 (' '<->'')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 4236 ('<->'')
---ENDTOKEN: SCONST, <->
{
  DefElem => { arg => "<->", defaction => "UNSPEC", defname => "commutator" },
}
---STARTSTATE: INITIAL @ 4240 ('
);

ALTER OPERATOR FAMILY gist_cash_ops USING gis')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  DefineStmt => {
    definition => [
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "money",
                         },
          names       => ["money"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "leftarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "money",
                         },
          names       => ["money"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "rightarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "cash_dist",
                         },
          names       => ["cash_dist"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "PROCEDURE",
      }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => "<->", defaction => "UNSPEC", defname => "commutator" }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["<->"],
    kind => "OPERATOR",
    oldstyle => 0,
  },
}
---STARTSTATE: INITIAL @ 4242 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 4243 ('

ALTER OPERATOR FAMILY gist_cash_ops USING gist A')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 4250 (' OPERATOR FAMILY gist_cash_ops USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4259 (' FAMILY gist_cash_ops USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: FAMILY, FAMILY
---STARTSTATE: INITIAL @ 4266 (' gist_cash_ops USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist_cash_ops
---STARTSTATE: INITIAL @ 4280 (' USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: USING, USING
---STARTSTATE: INITIAL @ 4286 (' gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist
---STARTSTATE: INITIAL @ 4291 (' ADD')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 4295 ('
	OPERATOR	6	<> (money, money) ,
	OPERATOR	15	<-> ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4305 ('	6	<> (money, money) ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 6
---STARTSTATE: INITIAL @ 4307 ('	<> (money, money) ,')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
---STARTSTATE: INITIAL @ 4310 (' (money, money) ,')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4312 ('money, money) ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 4317 (', money) ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["money"], typemod => -1 } }
---STARTSTATE: INITIAL @ 4318 (' money) ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 4324 (') ,')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["money"], typemod => -1 } }
---STARTSTATE: INITIAL @ 4325 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => {
    args     => [
                  bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ",",
                                     token_val => ",",
                                     val => "money",
                                   },
                    names       => ["money"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
                  bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ")",
                                     token_val => ")",
                                     val => "money",
                                   },
                    names       => ["money"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
                ],
    itemtype => "OPERATOR",
    name     => ["<>"],
    number   => 6,
  },
}
---STARTSTATE: INITIAL @ 4327 ('
	OPERATOR	15	<-> (money, money) FOR ORDER BY pg_c')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4337 ('	15	<-> (money, money) FOR ORDER BY pg_catalog.mon')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 15
---STARTSTATE: INITIAL @ 4340 ('	<-> (money, money) FOR ORDER BY pg_catalog.money_')
---GOTMATCH: operator
---ENDTOKEN: Op, <->
---STARTSTATE: INITIAL @ 4344 (' (money, money) FOR ORDER BY pg_catalog.money_ops ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4346 ('money, money) FOR ORDER BY pg_catalog.money_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 4351 (', money) FOR ORDER BY pg_catalog.money_ops ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["money"], typemod => -1 } }
---STARTSTATE: INITIAL @ 4352 (' money) FOR ORDER BY pg_catalog.money_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 4358 (') FOR ORDER BY pg_catalog.money_ops ,')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["money"], typemod => -1 } }
---STARTSTATE: INITIAL @ 4359 (' FOR ORDER BY pg_catalog.money_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: FOR, FOR
---STARTSTATE: INITIAL @ 4363 (' ORDER BY pg_catalog.money_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: ORDER, ORDER
---STARTSTATE: INITIAL @ 4369 (' BY pg_catalog.money_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: BY, BY
---STARTSTATE: INITIAL @ 4372 (' pg_catalog.money_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 4383 ('.money_ops ,')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 4384 ('money_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money_ops
---STARTSTATE: INITIAL @ 4393 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => {
    args => [
      bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ",",
                         token_val => ",",
                         val => "money",
                       },
        names       => ["money"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
      bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ")",
                         token_val => ")",
                         val => "money",
                       },
        names       => ["money"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
    ],
    itemtype => "OPERATOR",
    name => ["<->"],
    number => 15,
    order_family => ["money_ops", "pg_catalog"],
  },
}
---STARTSTATE: INITIAL @ 4395 ('
	FUNCTION	8 (money, money) gbt_cash_distance (int')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 4405 ('	8 (money, money) gbt_cash_distance (internal, mon')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 8
---STARTSTATE: INITIAL @ 4407 (' (money, money) gbt_cash_distance (internal, money')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4409 ('money, money) gbt_cash_distance (internal, money, ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 4414 (', money) gbt_cash_distance (internal, money, int2,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["money"], typemod => -1 } }
---STARTSTATE: INITIAL @ 4415 (' money) gbt_cash_distance (internal, money, int2, ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 4421 (') gbt_cash_distance (internal, money, int2, oid) ;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["money"], typemod => -1 } }
---STARTSTATE: INITIAL @ 4422 (' gbt_cash_distance (internal, money, int2, oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbt_cash_distance
---STARTSTATE: INITIAL @ 4440 (' (internal, money, int2, oid) ;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4442 ('internal, money, int2, oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4450 (', money, int2, oid) ;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4451 (' money, int2, oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, money
---STARTSTATE: INITIAL @ 4457 (', int2, oid) ;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["money"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "money",
                     },
      names       => ["money"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4458 (' int2, oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 4463 (', oid) ;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4464 (' oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 4468 (') ;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["oid"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "oid",
                     },
      names       => ["oid"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => {
    class_args => [
      bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ",",
                         token_val => ",",
                         val => "money",
                       },
        names       => ["money"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
      bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ")",
                         token_val => ")",
                         val => "money",
                       },
        names       => ["money"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
    ],
    itemtype => "FUNCTION",
    name => ["gbt_cash_distance"],
    number => 8,
  },
}
---STARTSTATE: INITIAL @ 4469 (' ;')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  AlterOpFamilyStmt => {
    amname => "gist",
    isDrop => 0,
    items => [
      bless({
        args     => [
                      bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "money",
                                       },
                        names       => ["money"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "money",
                                       },
                        names       => ["money"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                    ],
        itemtype => "OPERATOR",
        name     => ["<>"],
        number   => 6,
      }, "SQL::Translator::Statement::CreateOpClass::Item"),
      bless({
        args => [
          bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "money",
                           },
            names       => ["money"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "money",
                           },
            names       => ["money"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        ],
        itemtype => "OPERATOR",
        name => ["<->"],
        number => 15,
        order_family => ["money_ops", "pg_catalog"],
      }, "SQL::Translator::Statement::CreateOpClass::Item"),
      bless({
        class_args => [
          bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "money",
                           },
            names       => ["money"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "money",
                           },
            names       => ["money"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        ],
        itemtype => "FUNCTION",
        name => ["gbt_cash_distance"],
        number => 8,
      }, "SQL::Translator::Statement::CreateOpClass::Item"),
    ],
    opfamilyname => ["gist_cash_ops"],
  },
}
---STARTSTATE: INITIAL @ 4471 ('

ALTER OPERATOR FAMILY gist_macaddr_ops USING gis')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 4478 (' OPERATOR FAMILY gist_macaddr_ops USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4487 (' FAMILY gist_macaddr_ops USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: FAMILY, FAMILY
---STARTSTATE: INITIAL @ 4494 (' gist_macaddr_ops USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist_macaddr_ops
---STARTSTATE: INITIAL @ 4511 (' USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: USING, USING
---STARTSTATE: INITIAL @ 4517 (' gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist
---STARTSTATE: INITIAL @ 4522 (' ADD')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 4526 ('
	OPERATOR	6	<> (macaddr, macaddr) ;

CREATE OPERA')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4536 ('	6	<> (macaddr, macaddr) ;')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 6
---STARTSTATE: INITIAL @ 4538 ('	<> (macaddr, macaddr) ;')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
---STARTSTATE: INITIAL @ 4541 (' (macaddr, macaddr) ;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4543 ('macaddr, macaddr) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, macaddr
---STARTSTATE: INITIAL @ 4550 (', macaddr) ;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["macaddr"], typemod => -1 } }
---STARTSTATE: INITIAL @ 4551 (' macaddr) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, macaddr
---STARTSTATE: INITIAL @ 4559 (') ;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["macaddr"], typemod => -1 } }
---STARTSTATE: INITIAL @ 4560 (' ;')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateOpClassItem => {
    args     => [
                  bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ",",
                                     token_val => ",",
                                     val => "macaddr",
                                   },
                    names       => ["macaddr"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
                  bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ")",
                                     token_val => ")",
                                     val => "macaddr",
                                   },
                    names       => ["macaddr"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
                ],
    itemtype => "OPERATOR",
    name     => ["<>"],
    number   => 6,
  },
}
{
  AlterOpFamilyStmt => {
    amname => "gist",
    isDrop => 0,
    items => [
      bless({
        args     => [
                      bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "macaddr",
                                       },
                        names       => ["macaddr"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "macaddr",
                                       },
                        names       => ["macaddr"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                    ],
        itemtype => "OPERATOR",
        name     => ["<>"],
        number   => 6,
      }, "SQL::Translator::Statement::CreateOpClass::Item"),
    ],
    opfamilyname => ["gist_macaddr_ops"],
  },
}
---STARTSTATE: INITIAL @ 4562 ('

CREATE OPERATOR CLASS gist_oid_ops
DEFAULT FOR T')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 4570 (' OPERATOR CLASS gist_oid_ops')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4579 (' CLASS gist_oid_ops')
---GOTMATCH: identifier
---ENDTOKEN: CLASS, CLASS
---STARTSTATE: INITIAL @ 4585 (' gist_oid_ops')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist_oid_ops
---STARTSTATE: INITIAL @ 4598 ('
DEFAULT FOR TYPE oid USING gist
AS
	OPERATOR	1	< ')
---GOTMATCH: identifier
---ENDTOKEN: DEFAULT, DEFAULT
---STARTSTATE: INITIAL @ 4606 (' FOR TYPE oid USING gist')
---GOTMATCH: identifier
---ENDTOKEN: FOR, FOR
---STARTSTATE: INITIAL @ 4610 (' TYPE oid USING gist')
---GOTMATCH: identifier
---ENDTOKEN: TYPE, TYPE
---STARTSTATE: INITIAL @ 4615 (' oid USING gist')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 4619 (' USING gist')
---GOTMATCH: identifier
---ENDTOKEN: USING, USING
{ TypeName => { names => ["oid"], typemod => -1 } }
---STARTSTATE: INITIAL @ 4625 (' gist')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist
---STARTSTATE: INITIAL @ 4630 ('
AS
	OPERATOR	1	<  ,
	OPERATOR	2	<= ,
	OPERATOR	3	')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 4633 ('
	OPERATOR	1	<  ,
	OPERATOR	2	<= ,
	OPERATOR	3	=  ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4643 ('	1	<  ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 1
---STARTSTATE: INITIAL @ 4645 ('	<  ,')
---GOTMATCH: self
---ENDTOKEN: <, <
---STARTSTATE: INITIAL @ 4647 ('  ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["<"], number => 1 },
}
---STARTSTATE: INITIAL @ 4650 ('
	OPERATOR	2	<= ,
	OPERATOR	3	=  ,
	OPERATOR	4	>= ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4660 ('	2	<= ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 2
---STARTSTATE: INITIAL @ 4662 ('	<= ,')
---GOTMATCH: operator
---ENDTOKEN: Op, <=
---STARTSTATE: INITIAL @ 4665 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["<="], number => 2 },
}
---STARTSTATE: INITIAL @ 4667 ('
	OPERATOR	3	=  ,
	OPERATOR	4	>= ,
	OPERATOR	5	>  ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4677 ('	3	=  ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 3
---STARTSTATE: INITIAL @ 4679 ('	=  ,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 4681 ('  ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["="], number => 3 },
}
---STARTSTATE: INITIAL @ 4684 ('
	OPERATOR	4	>= ,
	OPERATOR	5	>  ,
	FUNCTION	1	gbt')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4694 ('	4	>= ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 4
---STARTSTATE: INITIAL @ 4696 ('	>= ,')
---GOTMATCH: operator
---ENDTOKEN: Op, >=
---STARTSTATE: INITIAL @ 4699 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => [">="], number => 4 },
}
---STARTSTATE: INITIAL @ 4701 ('
	OPERATOR	5	>  ,
	FUNCTION	1	gbt_oid_consistent (')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 4711 ('	5	>  ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 5
---STARTSTATE: INITIAL @ 4713 ('	>  ,')
---GOTMATCH: self
---ENDTOKEN: >, >
---STARTSTATE: INITIAL @ 4715 ('  ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => [">"], number => 5 },
}
---STARTSTATE: INITIAL @ 4718 ('
	FUNCTION	1	gbt_oid_consistent (internal, oid, in')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 4728 ('	1	gbt_oid_consistent (internal, oid, int2, oid, i')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 1
---STARTSTATE: INITIAL @ 4730 ('	gbt_oid_consistent (internal, oid, int2, oid, int')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbt_oid_consistent
---STARTSTATE: INITIAL @ 4749 (' (internal, oid, int2, oid, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4751 ('internal, oid, int2, oid, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4759 (', oid, int2, oid, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4760 (' oid, int2, oid, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 4764 (', int2, oid, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["oid"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "oid",
                     },
      names       => ["oid"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4765 (' int2, oid, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 4770 (', oid, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4771 (' oid, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 4775 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["oid"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "oid",
                     },
      names       => ["oid"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4776 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4785 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gbt_oid_consistent"], number => 1 },
}
---STARTSTATE: INITIAL @ 4786 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 4787 ('
	FUNCTION	2	gbt_oid_union (bytea, internal),
	FUN')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 4797 ('	2	gbt_oid_union (bytea, internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 2
---STARTSTATE: INITIAL @ 4799 ('	gbt_oid_union (bytea, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbt_oid_union
---STARTSTATE: INITIAL @ 4813 (' (bytea, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4815 ('bytea, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, bytea
---STARTSTATE: INITIAL @ 4820 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["bytea"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "bytea",
                     },
      names       => ["bytea"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4821 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4830 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gbt_oid_union"], number => 2 },
}
---STARTSTATE: INITIAL @ 4831 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 4832 ('
	FUNCTION	3	gbt_oid_compress (internal),
	FUNCTIO')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 4842 ('	3	gbt_oid_compress (internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 3
---STARTSTATE: INITIAL @ 4844 ('	gbt_oid_compress (internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbt_oid_compress
---STARTSTATE: INITIAL @ 4861 (' (internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4863 ('internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4871 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gbt_oid_compress"], number => 3 },
}
---STARTSTATE: INITIAL @ 4872 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 4873 ('
	FUNCTION	4	gbt_decompress (internal),
	FUNCTION	')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 4883 ('	4	gbt_decompress (internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 4
---STARTSTATE: INITIAL @ 4885 ('	gbt_decompress (internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbt_decompress
---STARTSTATE: INITIAL @ 4900 (' (internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4902 ('internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4910 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gbt_decompress"], number => 4 },
}
---STARTSTATE: INITIAL @ 4911 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 4912 ('
	FUNCTION	5	gbt_oid_penalty (internal, internal, ')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 4922 ('	5	gbt_oid_penalty (internal, internal, internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 5
---STARTSTATE: INITIAL @ 4924 ('	gbt_oid_penalty (internal, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbt_oid_penalty
---STARTSTATE: INITIAL @ 4940 (' (internal, internal, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 4942 ('internal, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4950 (', internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4951 (' internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4960 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 4961 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 4970 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gbt_oid_penalty"], number => 5 },
}
---STARTSTATE: INITIAL @ 4971 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 4972 ('
	FUNCTION	6	gbt_oid_picksplit (internal, internal')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 4982 ('	6	gbt_oid_picksplit (internal, internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 6
---STARTSTATE: INITIAL @ 4984 ('	gbt_oid_picksplit (internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbt_oid_picksplit
---STARTSTATE: INITIAL @ 5002 (' (internal, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5004 ('internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 5012 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 5013 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 5022 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gbt_oid_picksplit"], number => 6 },
}
---STARTSTATE: INITIAL @ 5023 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 5024 ('
	FUNCTION	7	gbt_oid_same (internal, internal, int')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 5034 ('	7	gbt_oid_same (internal, internal, internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 7
---STARTSTATE: INITIAL @ 5036 ('	gbt_oid_same (internal, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbt_oid_same
---STARTSTATE: INITIAL @ 5049 (' (internal, internal, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5051 ('internal, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 5059 (', internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 5060 (' internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 5069 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 5070 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 5079 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["gbt_oid_same"], number => 7 },
}
---STARTSTATE: INITIAL @ 5080 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 5081 ('
	STORAGE		gbtreekey8;

-- Add operators that are ')
---GOTMATCH: identifier
---ENDTOKEN: STORAGE, STORAGE
---STARTSTATE: INITIAL @ 5090 ('		gbtreekey8;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbtreekey8
---STARTSTATE: INITIAL @ 5102 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{ TypeName => { names => ["gbtreekey8"], typemod => -1 } }
{
  CreateOpClassItem => {
    itemtype   => "STORAGETYPE",
    storedtype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ";",
                                     token_val => ";",
                                     val => "gbtreekey8",
                                   },
                    names       => ["gbtreekey8"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
{
  CreateOpClassStmt => {
    amname      => "gist",
    datatype    => bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => "USING",
                                      token_val => "USING",
                                      val => "oid",
                                    },
                     names       => ["oid"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
    isDefault   => 1,
    items       => [
                     bless({ itemtype => "OPERATOR", name => ["<"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => ["<="], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => ["="], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => [">="], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => [">"], number => 5 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gbt_oid_consistent"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gbt_oid_union"], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gbt_oid_compress"], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gbt_decompress"], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gbt_oid_penalty"], number => 5 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gbt_oid_picksplit"], number => 6 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["gbt_oid_same"], number => 7 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({
                       itemtype   => "STORAGETYPE",
                       storedtype => bless({
                                       arrayBounds => undef,
                                       location    => {
                                                        char_pos => undef,
                                                        left_side => "GenericType",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "GenericType_1429",
                                                        token => ";",
                                                        token_val => ";",
                                                        val => "gbtreekey8",
                                                      },
                                       names       => ["gbtreekey8"],
                                       typemod     => -1,
                                       typmods     => undef,
                                     }, "SQL::Translator::Statement::TypeName"),
                     }, "SQL::Translator::Statement::CreateOpClass::Item"),
                   ],
    opclassname => ["gist_oid_ops"],
  },
}
---STARTSTATE: INITIAL @ 5103 ('

-- Add operators that are new in 9.1.  We do it ')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 5337 (' OPERATOR FAMILY gist_oid_ops USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 5346 (' FAMILY gist_oid_ops USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: FAMILY, FAMILY
---STARTSTATE: INITIAL @ 5353 (' gist_oid_ops USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist_oid_ops
---STARTSTATE: INITIAL @ 5366 (' USING gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: USING, USING
---STARTSTATE: INITIAL @ 5372 (' gist ADD')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist
---STARTSTATE: INITIAL @ 5377 (' ADD')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 5381 ('
	OPERATOR	6	<> (oid, oid) ,
	OPERATOR	15	<-> (oid')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 5391 ('	6	<> (oid, oid) ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 6
---STARTSTATE: INITIAL @ 5393 ('	<> (oid, oid) ,')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
---STARTSTATE: INITIAL @ 5396 (' (oid, oid) ,')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5398 ('oid, oid) ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 5401 (', oid) ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["oid"], typemod => -1 } }
---STARTSTATE: INITIAL @ 5402 (' oid) ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 5406 (') ,')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["oid"], typemod => -1 } }
---STARTSTATE: INITIAL @ 5407 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => {
    args     => [
                  bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ",",
                                     token_val => ",",
                                     val => "oid",
                                   },
                    names       => ["oid"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
                  bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ")",
                                     token_val => ")",
                                     val => "oid",
                                   },
                    names       => ["oid"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
                ],
    itemtype => "OPERATOR",
    name     => ["<>"],
    number   => 6,
  },
}
---STARTSTATE: INITIAL @ 5409 ('
	OPERATOR	15	<-> (oid, oid) FOR ORDER BY pg_catal')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 5419 ('	15	<-> (oid, oid) FOR ORDER BY pg_catalog.oid_ops')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 15
---STARTSTATE: INITIAL @ 5422 ('	<-> (oid, oid) FOR ORDER BY pg_catalog.oid_ops ,')
---GOTMATCH: operator
---ENDTOKEN: Op, <->
---STARTSTATE: INITIAL @ 5426 (' (oid, oid) FOR ORDER BY pg_catalog.oid_ops ,')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5428 ('oid, oid) FOR ORDER BY pg_catalog.oid_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 5431 (', oid) FOR ORDER BY pg_catalog.oid_ops ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["oid"], typemod => -1 } }
---STARTSTATE: INITIAL @ 5432 (' oid) FOR ORDER BY pg_catalog.oid_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 5436 (') FOR ORDER BY pg_catalog.oid_ops ,')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["oid"], typemod => -1 } }
---STARTSTATE: INITIAL @ 5437 (' FOR ORDER BY pg_catalog.oid_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: FOR, FOR
---STARTSTATE: INITIAL @ 5441 (' ORDER BY pg_catalog.oid_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: ORDER, ORDER
---STARTSTATE: INITIAL @ 5447 (' BY pg_catalog.oid_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: BY, BY
---STARTSTATE: INITIAL @ 5450 (' pg_catalog.oid_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 5461 ('.oid_ops ,')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 5462 ('oid_ops ,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid_ops
---STARTSTATE: INITIAL @ 5469 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => {
    args => [
      bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ",",
                         token_val => ",",
                         val => "oid",
                       },
        names       => ["oid"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
      bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ")",
                         token_val => ")",
                         val => "oid",
                       },
        names       => ["oid"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
    ],
    itemtype => "OPERATOR",
    name => ["<->"],
    number => 15,
    order_family => ["oid_ops", "pg_catalog"],
  },
}
---STARTSTATE: INITIAL @ 5471 ('
	FUNCTION	8 (oid, oid) gbt_oid_distance (internal')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 5481 ('	8 (oid, oid) gbt_oid_distance (internal, oid, int')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 8
---STARTSTATE: INITIAL @ 5483 (' (oid, oid) gbt_oid_distance (internal, oid, int2,')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5485 ('oid, oid) gbt_oid_distance (internal, oid, int2, o')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 5488 (', oid) gbt_oid_distance (internal, oid, int2, oid)')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["oid"], typemod => -1 } }
---STARTSTATE: INITIAL @ 5489 (' oid) gbt_oid_distance (internal, oid, int2, oid) ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 5493 (') gbt_oid_distance (internal, oid, int2, oid) ;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["oid"], typemod => -1 } }
---STARTSTATE: INITIAL @ 5494 (' gbt_oid_distance (internal, oid, int2, oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gbt_oid_distance
---STARTSTATE: INITIAL @ 5511 (' (internal, oid, int2, oid) ;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5513 ('internal, oid, int2, oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 5521 (', oid, int2, oid) ;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 5522 (' oid, int2, oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 5526 (', int2, oid) ;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["oid"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "oid",
                     },
      names       => ["oid"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 5527 (' int2, oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int2
---STARTSTATE: INITIAL @ 5532 (', oid) ;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int2"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "int2",
                     },
      names       => ["int2"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 5533 (' oid) ;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 5537 (') ;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["oid"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "oid",
                     },
      names       => ["oid"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => {
    class_args => [
      bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ",",
                         token_val => ",",
                         val => "oid",
                       },
        names       => ["oid"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
      bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ")",
                         token_val => ")",
                         val => "oid",
                       },
        names       => ["oid"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
    ],
    itemtype => "FUNCTION",
    name => ["gbt_oid_distance"],
    number => 8,
  },
}
---STARTSTATE: INITIAL @ 5538 (' ;')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  AlterOpFamilyStmt => {
    amname => "gist",
    isDrop => 0,
    items => [
      bless({
        args     => [
                      bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "oid",
                                       },
                        names       => ["oid"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "oid",
                                       },
                        names       => ["oid"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                    ],
        itemtype => "OPERATOR",
        name     => ["<>"],
        number   => 6,
      }, "SQL::Translator::Statement::CreateOpClass::Item"),
      bless({
        args => [
          bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "oid",
                           },
            names       => ["oid"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "oid",
                           },
            names       => ["oid"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        ],
        itemtype => "OPERATOR",
        name => ["<->"],
        number => 15,
        order_family => ["oid_ops", "pg_catalog"],
      }, "SQL::Translator::Statement::CreateOpClass::Item"),
      bless({
        class_args => [
          bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "oid",
                           },
            names       => ["oid"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "oid",
                           },
            names       => ["oid"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        ],
        itemtype => "FUNCTION",
        name => ["gbt_oid_distance"],
        number => 8,
      }, "SQL::Translator::Statement::CreateOpClass::Item"),
    ],
    opfamilyname => ["gist_oid_ops"],
  },
}
---STARTSTATE: INITIAL @ 5540 ('

CREATE TABLE test_ne (
   a  TIMESTAMP,
   b  NU')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 5548 (' TABLE test_ne (')
---GOTMATCH: identifier
---ENDTOKEN: TABLE, TABLE
---STARTSTATE: INITIAL @ 5554 (' test_ne (')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_ne
---STARTSTATE: INITIAL @ 5562 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "(",
      token_val => "(",
      val => "test_ne",
    },
    relname => "test_ne",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 5564 ('
   a  TIMESTAMP,
   b  NUMERIC
);
CREATE INDEX te')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, a
---STARTSTATE: INITIAL @ 5569 ('  TIMESTAMP,')
---GOTMATCH: identifier
---ENDTOKEN: TIMESTAMP, TIMESTAMP
---STARTSTATE: INITIAL @ 5580 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  TypeName => { names => ["pg_catalog", "timestamp"], typemod => -1 },
}
{
  ColumnDefinition => {
    collOid      => 0,
    colname      => "a",
    inhcount     => 0,
    is_from_type => 0,
    is_local     => 1,
    is_not_null  => 0,
    storage      => 0,
    typeName     => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "ConstDatetime",
                                       right_side => ["stmtmulti"],
                                       rule_name => "ConstDatetime_1469",
                                       token => ",",
                                       token_val => ",",
                                       val => "TIMESTAMP",
                                     },
                      names       => ["pg_catalog", "timestamp"],
                      typemod     => -1,
                    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 5581 ('
   b  NUMERIC
);
CREATE INDEX test_ne_idx ON test')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, b
---STARTSTATE: INITIAL @ 5586 ('  NUMERIC')
---GOTMATCH: identifier
---ENDTOKEN: NUMERIC, NUMERIC
---STARTSTATE: INITIAL @ 5595 ('
);
CREATE INDEX test_ne_idx ON test_ne USING gist')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  TypeName => { names => ["pg_catalog", "numeric"], typemod => -1 },
}
{
  ColumnDefinition => {
    collOid      => 0,
    colname      => "b",
    inhcount     => 0,
    is_from_type => 0,
    is_local     => 1,
    is_not_null  => 0,
    storage      => 0,
    typeName     => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "Numeric",
                                       right_side => ["stmtmulti"],
                                       rule_name => "Numeric_1442",
                                       token => ")",
                                       token_val => ")",
                                       val => "NUMERIC",
                                     },
                      names       => ["pg_catalog", "numeric"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 5597 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateStmt => {
    if_not_exists => 0,
    oncommit      => "NOOP",
    relation      => bless({
                       inhOpt => "DEFAULT",
                       location => {
                         char_pos => undef,
                         left_side => "qualified_name",
                         right_side => ["stmtmulti"],
                         rule_name => "qualified_name_1777",
                         token => "(",
                         token_val => "(",
                         val => "test_ne",
                       },
                       relname => "test_ne",
                       relpersistence => "\"p\"",
                     }, "SQL::Translator::Statement::RangeVar"),
    tableElts     => [
                       bless({
                         collOid      => 0,
                         colname      => "a",
                         constraints  => [],
                         inhcount     => 0,
                         is_from_type => 0,
                         is_local     => 1,
                         is_not_null  => 0,
                         storage      => 0,
                         typeName     => bless({
                                           arrayBounds => undef,
                                           location    => {
                                                            char_pos => undef,
                                                            left_side => "ConstDatetime",
                                                            right_side => ["stmtmulti"],
                                                            rule_name => "ConstDatetime_1469",
                                                            token => ",",
                                                            token_val => ",",
                                                            val => "TIMESTAMP",
                                                          },
                                           names       => ["pg_catalog", "timestamp"],
                                           typemod     => -1,
                                         }, "SQL::Translator::Statement::TypeName"),
                       }, "SQL::Translator::Statement::Column::Definition"),
                       bless({
                         collOid      => 0,
                         colname      => "b",
                         constraints  => [],
                         inhcount     => 0,
                         is_from_type => 0,
                         is_local     => 1,
                         is_not_null  => 0,
                         storage      => 0,
                         typeName     => bless({
                                           arrayBounds => undef,
                                           location    => {
                                                            char_pos => undef,
                                                            left_side => "Numeric",
                                                            right_side => ["stmtmulti"],
                                                            rule_name => "Numeric_1442",
                                                            token => ")",
                                                            token_val => ")",
                                                            val => "NUMERIC",
                                                          },
                                           names       => ["pg_catalog", "numeric"],
                                           typemod     => -1,
                                           typmods     => undef,
                                         }, "SQL::Translator::Statement::TypeName"),
                       }, "SQL::Translator::Statement::Column::Definition"),
                     ],
  },
}
---STARTSTATE: INITIAL @ 5598 ('
CREATE INDEX test_ne_idx ON test_ne USING gist (a')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 5605 (' INDEX test_ne_idx ON test_ne USING gist (a, b);')
---GOTMATCH: identifier
---ENDTOKEN: INDEX, INDEX
---STARTSTATE: INITIAL @ 5611 (' test_ne_idx ON test_ne USING gist (a, b);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_ne_idx
---STARTSTATE: INITIAL @ 5623 (' ON test_ne USING gist (a, b);')
---GOTMATCH: identifier
---ENDTOKEN: ON, ON
---STARTSTATE: INITIAL @ 5626 (' test_ne USING gist (a, b);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_ne
---STARTSTATE: INITIAL @ 5634 (' USING gist (a, b);')
---GOTMATCH: identifier
---ENDTOKEN: USING, USING
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "USING",
      token_val => "USING",
      val => "test_ne",
    },
    relname => "test_ne",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 5640 (' gist (a, b);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist
---STARTSTATE: INITIAL @ 5645 (' (a, b);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5647 ('a, b);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, a
---STARTSTATE: INITIAL @ 5648 (', b);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  IndexElem => { name => "a", nulls_ordering => "DEFAULT", ordering => "DEFAULT" },
}
---STARTSTATE: INITIAL @ 5649 (' b);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, b
---STARTSTATE: INITIAL @ 5651 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  IndexElem => { name => "b", nulls_ordering => "DEFAULT", ordering => "DEFAULT" },
}
---STARTSTATE: INITIAL @ 5652 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  IndexStmt => {
    accessMethod => "gist",
    concurrent   => 0,
    idxname      => "test_ne_idx",
    indexOid     => 0,
    indexParams  => [
                      bless({ name => "a", nulls_ordering => "DEFAULT", ordering => "DEFAULT" }, "SQL::Translator::Statement::IndexElem"),
                      bless({ name => "b", nulls_ordering => "DEFAULT", ordering => "DEFAULT" }, "SQL::Translator::Statement::IndexElem"),
                    ],
    relation     => bless({
                      inhOpt => "DEFAULT",
                      location => {
                        char_pos => undef,
                        left_side => "qualified_name",
                        right_side => ["stmtmulti"],
                        rule_name => "qualified_name_1777",
                        token => "USING",
                        token_val => "USING",
                        val => "test_ne",
                      },
                      relname => "test_ne",
                      relpersistence => "\"p\"",
                    }, "SQL::Translator::Statement::RangeVar"),
    unique       => 0,
  },
}
---STARTSTATE: INITIAL @ 5653 ('

INSERT INTO test_ne SELECT '2009-01-01', 10.7 FR')
---GOTMATCH: identifier
---ENDTOKEN: INSERT, INSERT
---STARTSTATE: INITIAL @ 5661 (' INTO test_ne SELECT '2009-01-01', 10.7 FROM gener')
---GOTMATCH: identifier
---ENDTOKEN: INTO, INTO
---STARTSTATE: INITIAL @ 5666 (' test_ne SELECT '2009-01-01', 10.7 FROM generate_s')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_ne
---STARTSTATE: INITIAL @ 5674 (' SELECT '2009-01-01', 10.7 FROM generate_series(1,')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "SELECT",
      token_val => "SELECT",
      val => "test_ne",
    },
    relname => "test_ne",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 5681 (' '2009-01-01', 10.7 FROM generate_series(1,1000);')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 5683 ('2009-01-01', 10.7 FROM generate_series(1,1000);')
---ENDTOKEN: SCONST, 2009-01-01
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "2009-01-01",
    },
    type => "String",
    val => "2009-01-01",
  },
}
---STARTSTATE: INITIAL @ 5694 (', 10.7 FROM generate_series(1,1000);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => ",",
        token_val => ",",
        val => bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "2009-01-01",
          },
          type => "String",
          val => "2009-01-01",
        }, "SQL::Translator::Statement::A_Const"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 5695 (' 10.7 FROM generate_series(1,1000);')
---GOTMATCH: decimal
---ENDTOKEN: FCONST, 10.7
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1790",
      token => undef,
      token_val => undef,
      val => 10.7,
    },
    type => "Float",
    val => 10.7,
  },
}
---STARTSTATE: INITIAL @ 5700 (' FROM generate_series(1,1000);')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => "FROM",
        token_val => "FROM",
        val => bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1790",
            token => undef,
            token_val => undef,
            val => 10.7,
          },
          type => "Float",
          val => 10.7,
        }, "SQL::Translator::Statement::A_Const"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 5705 (' generate_series(1,1000);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, generate_series
---STARTSTATE: INITIAL @ 5721 ('(1,1000);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5722 ('1,1000);')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 1
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1789",
      token => undef,
      token_val => undef,
      val => 1,
    },
    type => "Integer",
    val => 1,
  },
}
---STARTSTATE: INITIAL @ 5723 (',1000);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 5724 ('1000);')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 1000
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1789",
      token => undef,
      token_val => undef,
      val => 1000,
    },
    type => "Integer",
    val => 1000,
  },
}
---STARTSTATE: INITIAL @ 5728 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 5729 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    FunctionCall => {
      agg_distinct => 0,
      agg_star => 0,
      args => [
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1789",
            token => undef,
            token_val => undef,
            val => 1,
          },
          type => "Integer",
          val => 1,
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1789",
            token => undef,
            token_val => undef,
            val => 1000,
          },
          type => "Integer",
          val => 1000,
        }, "SQL::Translator::Statement::A_Const"),
      ],
      func_variadic => 0,
      funcname => ["generate_series"],
      location => {
        char_pos => undef,
        left_side => "func_expr",
        right_side => ["stmtmulti"],
        rule_name => "func_expr_1585",
        token => ";",
        token_val => ";",
        val => 'fix',
      },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
do {
  my $a = {
    RangeFunction => {
      funccallnode => bless({
        agg_distinct => 0,
        agg_star => 0,
        args => [
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1789",
              token => undef,
              token_val => undef,
              val => 1,
            },
            type => "Integer",
            val => 1,
          }, "SQL::Translator::Statement::A_Const"),
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1789",
              token => undef,
              token_val => undef,
              val => 1000,
            },
            type => "Integer",
            val => 1000,
          }, "SQL::Translator::Statement::A_Const"),
        ],
        func_variadic => 0,
        funcname => ["generate_series"],
        location => {
          char_pos => undef,
          left_side => "func_expr",
          right_side => ["stmtmulti"],
          rule_name => "func_expr_1585",
          token => ";",
          token_val => ";",
          val => 'fix',
        },
      }, "SQL::Translator::Statement::Function::Call"),
    },
  };
  $a->{RangeFunction}{funccallnode}{location}{val} = $a->{RangeFunction}{funccallnode}{funcname};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      fromClause => [
                      bless({
                        funccallnode => bless({
                          agg_distinct => 0,
                          agg_star => 0,
                          args => [
                            bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1789",
                                token => undef,
                                token_val => undef,
                                val => 1,
                              },
                              type => "Integer",
                              val => 1,
                            }, "SQL::Translator::Statement::A_Const"),
                            bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1789",
                                token => undef,
                                token_val => undef,
                                val => 1000,
                              },
                              type => "Integer",
                              val => 1000,
                            }, "SQL::Translator::Statement::A_Const"),
                          ],
                          func_variadic => 0,
                          funcname => ["generate_series"],
                          location => {
                            char_pos => undef,
                            left_side => "func_expr",
                            right_side => ["stmtmulti"],
                            rule_name => "func_expr_1585",
                            token => ";",
                            token_val => ";",
                            val => 'fix',
                          },
                        }, "SQL::Translator::Statement::Function::Call"),
                      }, "SQL::Translator::Statement::Range::Function"),
                    ],
      targetList => [
                      bless({
                        location => {
                          char_pos => undef,
                          left_side => "target_el",
                          right_side => ["stmtmulti"],
                          rule_name => "target_el_1773",
                          token => ",",
                          token_val => ",",
                          val => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "2009-01-01",
                            },
                            type => "String",
                            val => "2009-01-01",
                          }, "SQL::Translator::Statement::A_Const"),
                        },
                        val => 'fix',
                      }, "SQL::Translator::Statement::ResultTarget"),
                      bless({
                        location => {
                          char_pos => undef,
                          left_side => "target_el",
                          right_side => ["stmtmulti"],
                          rule_name => "target_el_1773",
                          token => "FROM",
                          token_val => "FROM",
                          val => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1790",
                              token => undef,
                              token_val => undef,
                              val => 10.7,
                            },
                            type => "Float",
                            val => 10.7,
                          }, "SQL::Translator::Statement::A_Const"),
                        },
                        val => 'fix',
                      }, "SQL::Translator::Statement::ResultTarget"),
                    ],
    },
  };
  $a->{SelectStmt}{fromClause}[0]{funccallnode}{location}{val} = $a->{SelectStmt}{fromClause}[0]{funccallnode}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a->{SelectStmt}{targetList}[1]{val} = $a->{SelectStmt}{targetList}[1]{location}{val};
  $a;
}
do {
  my $a = {
    InsertStmt => {
      selectStmt => bless({
        fromClause => [
                        bless({
                          funccallnode => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                location => {
                                  char_pos => undef,
                                  left_side => "AexprConst",
                                  right_side => ["stmtmulti"],
                                  rule_name => "AexprConst_1789",
                                  token => undef,
                                  token_val => undef,
                                  val => 1,
                                },
                                type => "Integer",
                                val => 1,
                              }, "SQL::Translator::Statement::A_Const"),
                              bless({
                                location => {
                                  char_pos => undef,
                                  left_side => "AexprConst",
                                  right_side => ["stmtmulti"],
                                  rule_name => "AexprConst_1789",
                                  token => undef,
                                  token_val => undef,
                                  val => 1000,
                                },
                                type => "Integer",
                                val => 1000,
                              }, "SQL::Translator::Statement::A_Const"),
                            ],
                            func_variadic => 0,
                            funcname => ["generate_series"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => ";",
                              token_val => ";",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
                        }, "SQL::Translator::Statement::Range::Function"),
                      ],
        targetList => [
                        bless({
                          location => {
                            char_pos => undef,
                            left_side => "target_el",
                            right_side => ["stmtmulti"],
                            rule_name => "target_el_1773",
                            token => ",",
                            token_val => ",",
                            val => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "2009-01-01",
                              },
                              type => "String",
                              val => "2009-01-01",
                            }, "SQL::Translator::Statement::A_Const"),
                          },
                          val => 'fix',
                        }, "SQL::Translator::Statement::ResultTarget"),
                        bless({
                          location => {
                            char_pos => undef,
                            left_side => "target_el",
                            right_side => ["stmtmulti"],
                            rule_name => "target_el_1773",
                            token => "FROM",
                            token_val => "FROM",
                            val => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1790",
                                token => undef,
                                token_val => undef,
                                val => 10.7,
                              },
                              type => "Float",
                              val => 10.7,
                            }, "SQL::Translator::Statement::A_Const"),
                          },
                          val => 'fix',
                        }, "SQL::Translator::Statement::ResultTarget"),
                      ],
      }, "SQL::Translator::Statement::Select"),
    },
  };
  $a->{InsertStmt}{selectStmt}{fromClause}[0]{funccallnode}{location}{val} = $a->{InsertStmt}{selectStmt}{fromClause}[0]{funccallnode}{funcname};
  $a->{InsertStmt}{selectStmt}{targetList}[0]{val} = $a->{InsertStmt}{selectStmt}{targetList}[0]{location}{val};
  $a->{InsertStmt}{selectStmt}{targetList}[1]{val} = $a->{InsertStmt}{selectStmt}{targetList}[1]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 5730 ('
INSERT INTO test_ne VALUES('2007-02-03', -91.3);
')
---GOTMATCH: identifier
---ENDTOKEN: INSERT, INSERT
---STARTSTATE: INITIAL @ 5737 (' INTO test_ne VALUES('2007-02-03', -91.3);')
---GOTMATCH: identifier
---ENDTOKEN: INTO, INTO
---STARTSTATE: INITIAL @ 5742 (' test_ne VALUES('2007-02-03', -91.3);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_ne
---STARTSTATE: INITIAL @ 5750 (' VALUES('2007-02-03', -91.3);')
---GOTMATCH: identifier
---ENDTOKEN: VALUES, VALUES
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "VALUES",
      token_val => "VALUES",
      val => "test_ne",
    },
    relname => "test_ne",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 5757 ('('2007-02-03', -91.3);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5758 (''2007-02-03', -91.3);')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 5759 ('2007-02-03', -91.3);')
---ENDTOKEN: SCONST, 2007-02-03
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "2007-02-03",
    },
    type => "String",
    val => "2007-02-03",
  },
}
---STARTSTATE: INITIAL @ 5770 (', -91.3);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 5771 (' -91.3);')
---GOTMATCH: self
---ENDTOKEN: -, -
---STARTSTATE: INITIAL @ 5773 ('91.3);')
---GOTMATCH: decimal
---ENDTOKEN: FCONST, 91.3
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1790",
      token => undef,
      token_val => undef,
      val => 91.3,
    },
    type => "Float",
    val => 91.3,
  },
}
---STARTSTATE: INITIAL @ 5777 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  SelectStmt => {
    valuesLists => [
      bless({
        location => {
          char_pos => undef,
          left_side => "AexprConst",
          right_side => ["stmtmulti"],
          rule_name => "AexprConst_1791",
          token => undef,
          token_val => undef,
          val => "2007-02-03",
        },
        type => "String",
        val => "2007-02-03",
      }, "SQL::Translator::Statement::A_Const"),
      bless({
        location => {
          char_pos => undef,
          left_side => "a_expr",
          right_side => ["stmtmulti"],
          rule_name => "a_expr_1497",
          token => ")",
          token_val => ")",
          val => "-",
        },
        type => "Float",
        val => -91.3,
      }, "SQL::Translator::Statement::A_Const"),
    ],
  },
}
---STARTSTATE: INITIAL @ 5778 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  InsertStmt => {
    selectStmt => bless({
      valuesLists => [
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "2007-02-03",
          },
          type => "String",
          val => "2007-02-03",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti"],
            rule_name => "a_expr_1497",
            token => ")",
            token_val => ")",
            val => "-",
          },
          type => "Float",
          val => -91.3,
        }, "SQL::Translator::Statement::A_Const"),
      ],
    }, "SQL::Translator::Statement::Select"),
  },
}
---STARTSTATE: INITIAL @ 5779 ('
INSERT INTO test_ne VALUES('2011-09-01', 43.7);
I')
---GOTMATCH: identifier
---ENDTOKEN: INSERT, INSERT
---STARTSTATE: INITIAL @ 5786 (' INTO test_ne VALUES('2011-09-01', 43.7);')
---GOTMATCH: identifier
---ENDTOKEN: INTO, INTO
---STARTSTATE: INITIAL @ 5791 (' test_ne VALUES('2011-09-01', 43.7);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_ne
---STARTSTATE: INITIAL @ 5799 (' VALUES('2011-09-01', 43.7);')
---GOTMATCH: identifier
---ENDTOKEN: VALUES, VALUES
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "VALUES",
      token_val => "VALUES",
      val => "test_ne",
    },
    relname => "test_ne",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 5806 ('('2011-09-01', 43.7);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5807 (''2011-09-01', 43.7);')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 5808 ('2011-09-01', 43.7);')
---ENDTOKEN: SCONST, 2011-09-01
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "2011-09-01",
    },
    type => "String",
    val => "2011-09-01",
  },
}
---STARTSTATE: INITIAL @ 5819 (', 43.7);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 5820 (' 43.7);')
---GOTMATCH: decimal
---ENDTOKEN: FCONST, 43.7
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1790",
      token => undef,
      token_val => undef,
      val => 43.7,
    },
    type => "Float",
    val => 43.7,
  },
}
---STARTSTATE: INITIAL @ 5825 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  SelectStmt => {
    valuesLists => [
      bless({
        location => {
          char_pos => undef,
          left_side => "AexprConst",
          right_side => ["stmtmulti"],
          rule_name => "AexprConst_1791",
          token => undef,
          token_val => undef,
          val => "2011-09-01",
        },
        type => "String",
        val => "2011-09-01",
      }, "SQL::Translator::Statement::A_Const"),
      bless({
        location => {
          char_pos => undef,
          left_side => "AexprConst",
          right_side => ["stmtmulti"],
          rule_name => "AexprConst_1790",
          token => undef,
          token_val => undef,
          val => 43.7,
        },
        type => "Float",
        val => 43.7,
      }, "SQL::Translator::Statement::A_Const"),
    ],
  },
}
---STARTSTATE: INITIAL @ 5826 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  InsertStmt => {
    selectStmt => bless({
      valuesLists => [
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "2011-09-01",
          },
          type => "String",
          val => "2011-09-01",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1790",
            token => undef,
            token_val => undef,
            val => 43.7,
          },
          type => "Float",
          val => 43.7,
        }, "SQL::Translator::Statement::A_Const"),
      ],
    }, "SQL::Translator::Statement::Select"),
  },
}
---STARTSTATE: INITIAL @ 5827 ('
INSERT INTO test_ne SELECT '2009-01-01', 10.7 FRO')
---GOTMATCH: identifier
---ENDTOKEN: INSERT, INSERT
---STARTSTATE: INITIAL @ 5834 (' INTO test_ne SELECT '2009-01-01', 10.7 FROM gener')
---GOTMATCH: identifier
---ENDTOKEN: INTO, INTO
---STARTSTATE: INITIAL @ 5839 (' test_ne SELECT '2009-01-01', 10.7 FROM generate_s')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_ne
---STARTSTATE: INITIAL @ 5847 (' SELECT '2009-01-01', 10.7 FROM generate_series(1,')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "SELECT",
      token_val => "SELECT",
      val => "test_ne",
    },
    relname => "test_ne",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 5854 (' '2009-01-01', 10.7 FROM generate_series(1,1000);')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 5856 ('2009-01-01', 10.7 FROM generate_series(1,1000);')
---ENDTOKEN: SCONST, 2009-01-01
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "2009-01-01",
    },
    type => "String",
    val => "2009-01-01",
  },
}
---STARTSTATE: INITIAL @ 5867 (', 10.7 FROM generate_series(1,1000);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => ",",
        token_val => ",",
        val => bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "2009-01-01",
          },
          type => "String",
          val => "2009-01-01",
        }, "SQL::Translator::Statement::A_Const"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 5868 (' 10.7 FROM generate_series(1,1000);')
---GOTMATCH: decimal
---ENDTOKEN: FCONST, 10.7
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1790",
      token => undef,
      token_val => undef,
      val => 10.7,
    },
    type => "Float",
    val => 10.7,
  },
}
---STARTSTATE: INITIAL @ 5873 (' FROM generate_series(1,1000);')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => "FROM",
        token_val => "FROM",
        val => bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1790",
            token => undef,
            token_val => undef,
            val => 10.7,
          },
          type => "Float",
          val => 10.7,
        }, "SQL::Translator::Statement::A_Const"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 5878 (' generate_series(1,1000);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, generate_series
---STARTSTATE: INITIAL @ 5894 ('(1,1000);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5895 ('1,1000);')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 1
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1789",
      token => undef,
      token_val => undef,
      val => 1,
    },
    type => "Integer",
    val => 1,
  },
}
---STARTSTATE: INITIAL @ 5896 (',1000);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 5897 ('1000);')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 1000
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1789",
      token => undef,
      token_val => undef,
      val => 1000,
    },
    type => "Integer",
    val => 1000,
  },
}
---STARTSTATE: INITIAL @ 5901 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 5902 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    FunctionCall => {
      agg_distinct => 0,
      agg_star => 0,
      args => [
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1789",
            token => undef,
            token_val => undef,
            val => 1,
          },
          type => "Integer",
          val => 1,
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1789",
            token => undef,
            token_val => undef,
            val => 1000,
          },
          type => "Integer",
          val => 1000,
        }, "SQL::Translator::Statement::A_Const"),
      ],
      func_variadic => 0,
      funcname => ["generate_series"],
      location => {
        char_pos => undef,
        left_side => "func_expr",
        right_side => ["stmtmulti"],
        rule_name => "func_expr_1585",
        token => ";",
        token_val => ";",
        val => 'fix',
      },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
do {
  my $a = {
    RangeFunction => {
      funccallnode => bless({
        agg_distinct => 0,
        agg_star => 0,
        args => [
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1789",
              token => undef,
              token_val => undef,
              val => 1,
            },
            type => "Integer",
            val => 1,
          }, "SQL::Translator::Statement::A_Const"),
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1789",
              token => undef,
              token_val => undef,
              val => 1000,
            },
            type => "Integer",
            val => 1000,
          }, "SQL::Translator::Statement::A_Const"),
        ],
        func_variadic => 0,
        funcname => ["generate_series"],
        location => {
          char_pos => undef,
          left_side => "func_expr",
          right_side => ["stmtmulti"],
          rule_name => "func_expr_1585",
          token => ";",
          token_val => ";",
          val => 'fix',
        },
      }, "SQL::Translator::Statement::Function::Call"),
    },
  };
  $a->{RangeFunction}{funccallnode}{location}{val} = $a->{RangeFunction}{funccallnode}{funcname};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      fromClause => [
                      bless({
                        funccallnode => bless({
                          agg_distinct => 0,
                          agg_star => 0,
                          args => [
                            bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1789",
                                token => undef,
                                token_val => undef,
                                val => 1,
                              },
                              type => "Integer",
                              val => 1,
                            }, "SQL::Translator::Statement::A_Const"),
                            bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1789",
                                token => undef,
                                token_val => undef,
                                val => 1000,
                              },
                              type => "Integer",
                              val => 1000,
                            }, "SQL::Translator::Statement::A_Const"),
                          ],
                          func_variadic => 0,
                          funcname => ["generate_series"],
                          location => {
                            char_pos => undef,
                            left_side => "func_expr",
                            right_side => ["stmtmulti"],
                            rule_name => "func_expr_1585",
                            token => ";",
                            token_val => ";",
                            val => 'fix',
                          },
                        }, "SQL::Translator::Statement::Function::Call"),
                      }, "SQL::Translator::Statement::Range::Function"),
                    ],
      targetList => [
                      bless({
                        location => {
                          char_pos => undef,
                          left_side => "target_el",
                          right_side => ["stmtmulti"],
                          rule_name => "target_el_1773",
                          token => ",",
                          token_val => ",",
                          val => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "2009-01-01",
                            },
                            type => "String",
                            val => "2009-01-01",
                          }, "SQL::Translator::Statement::A_Const"),
                        },
                        val => 'fix',
                      }, "SQL::Translator::Statement::ResultTarget"),
                      bless({
                        location => {
                          char_pos => undef,
                          left_side => "target_el",
                          right_side => ["stmtmulti"],
                          rule_name => "target_el_1773",
                          token => "FROM",
                          token_val => "FROM",
                          val => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1790",
                              token => undef,
                              token_val => undef,
                              val => 10.7,
                            },
                            type => "Float",
                            val => 10.7,
                          }, "SQL::Translator::Statement::A_Const"),
                        },
                        val => 'fix',
                      }, "SQL::Translator::Statement::ResultTarget"),
                    ],
    },
  };
  $a->{SelectStmt}{fromClause}[0]{funccallnode}{location}{val} = $a->{SelectStmt}{fromClause}[0]{funccallnode}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a->{SelectStmt}{targetList}[1]{val} = $a->{SelectStmt}{targetList}[1]{location}{val};
  $a;
}
do {
  my $a = {
    InsertStmt => {
      selectStmt => bless({
        fromClause => [
                        bless({
                          funccallnode => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                location => {
                                  char_pos => undef,
                                  left_side => "AexprConst",
                                  right_side => ["stmtmulti"],
                                  rule_name => "AexprConst_1789",
                                  token => undef,
                                  token_val => undef,
                                  val => 1,
                                },
                                type => "Integer",
                                val => 1,
                              }, "SQL::Translator::Statement::A_Const"),
                              bless({
                                location => {
                                  char_pos => undef,
                                  left_side => "AexprConst",
                                  right_side => ["stmtmulti"],
                                  rule_name => "AexprConst_1789",
                                  token => undef,
                                  token_val => undef,
                                  val => 1000,
                                },
                                type => "Integer",
                                val => 1000,
                              }, "SQL::Translator::Statement::A_Const"),
                            ],
                            func_variadic => 0,
                            funcname => ["generate_series"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => ";",
                              token_val => ";",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
                        }, "SQL::Translator::Statement::Range::Function"),
                      ],
        targetList => [
                        bless({
                          location => {
                            char_pos => undef,
                            left_side => "target_el",
                            right_side => ["stmtmulti"],
                            rule_name => "target_el_1773",
                            token => ",",
                            token_val => ",",
                            val => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "2009-01-01",
                              },
                              type => "String",
                              val => "2009-01-01",
                            }, "SQL::Translator::Statement::A_Const"),
                          },
                          val => 'fix',
                        }, "SQL::Translator::Statement::ResultTarget"),
                        bless({
                          location => {
                            char_pos => undef,
                            left_side => "target_el",
                            right_side => ["stmtmulti"],
                            rule_name => "target_el_1773",
                            token => "FROM",
                            token_val => "FROM",
                            val => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1790",
                                token => undef,
                                token_val => undef,
                                val => 10.7,
                              },
                              type => "Float",
                              val => 10.7,
                            }, "SQL::Translator::Statement::A_Const"),
                          },
                          val => 'fix',
                        }, "SQL::Translator::Statement::ResultTarget"),
                      ],
      }, "SQL::Translator::Statement::Select"),
    },
  };
  $a->{InsertStmt}{selectStmt}{fromClause}[0]{funccallnode}{location}{val} = $a->{InsertStmt}{selectStmt}{fromClause}[0]{funccallnode}{funcname};
  $a->{InsertStmt}{selectStmt}{targetList}[0]{val} = $a->{InsertStmt}{selectStmt}{targetList}[0]{location}{val};
  $a->{InsertStmt}{selectStmt}{targetList}[1]{val} = $a->{InsertStmt}{selectStmt}{targetList}[1]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 5903 ('

EXPLAIN (COSTS OFF) SELECT * FROM test_ne WHERE ')
---GOTMATCH: identifier
---ENDTOKEN: EXPLAIN, EXPLAIN
---STARTSTATE: INITIAL @ 5912 (' (COSTS OFF) SELECT * FROM test_ne WHERE a <> '200')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 5914 ('COSTS OFF) SELECT * FROM test_ne WHERE a <> '2009-')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, costs
---STARTSTATE: INITIAL @ 5919 (' OFF) SELECT * FROM test_ne WHERE a <> '2009-01-01')
---GOTMATCH: identifier
---ENDTOKEN: OFF, OFF
{
  DefElem => { arg => "OFF", defaction => "UNSPEC", defname => "costs" },
}
---STARTSTATE: INITIAL @ 5923 (') SELECT * FROM test_ne WHERE a <> '2009-01-01' AN')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 5924 (' SELECT * FROM test_ne WHERE a <> '2009-01-01' AND')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 5931 (' * FROM test_ne WHERE a <> '2009-01-01' AND b <> 1')
---GOTMATCH: self
---ENDTOKEN: *, *
{
  ColumnReference => {
    fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
    location => {
                  char_pos => undef,
                  left_side => "target_el",
                  right_side => ["stmtmulti"],
                  rule_name => "target_el_1774",
                  token => undef,
                  token_val => undef,
                  val => "*",
                },
  },
}
{
  ResultTarget => {
    location => {
      char_pos => undef,
      left_side => "target_el",
      right_side => ["stmtmulti"],
      rule_name => "target_el_1774",
      token => undef,
      token_val => undef,
      val => "*",
    },
    val => bless({
      fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
      location => {
                    char_pos => undef,
                    left_side => "target_el",
                    right_side => ["stmtmulti"],
                    rule_name => "target_el_1774",
                    token => undef,
                    token_val => undef,
                    val => "*",
                  },
    }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 5933 (' FROM test_ne WHERE a <> '2009-01-01' AND b <> 10.')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
---STARTSTATE: INITIAL @ 5938 (' test_ne WHERE a <> '2009-01-01' AND b <> 10.7;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, test_ne
---STARTSTATE: INITIAL @ 5946 (' WHERE a <> '2009-01-01' AND b <> 10.7;')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "test_ne",
    },
    relname => "test_ne",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 5952 (' a <> '2009-01-01' AND b <> 10.7;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, a
---STARTSTATE: INITIAL @ 5954 (' <> '2009-01-01' AND b <> 10.7;')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "Op",
      token_val => "<>",
      val => "a",
    },
  },
}
---STARTSTATE: INITIAL @ 5957 (' '2009-01-01' AND b <> 10.7;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 5959 ('2009-01-01' AND b <> 10.7;')
---ENDTOKEN: SCONST, 2009-01-01
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "2009-01-01",
    },
    type => "String",
    val => "2009-01-01",
  },
}
---STARTSTATE: INITIAL @ 5970 (' AND b <> 10.7;')
---GOTMATCH: identifier
---ENDTOKEN: AND, AND
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    fields   => ["a"],
                    location => {
                                  char_pos => undef,
                                  left_side => "columnref",
                                  right_side => ["stmtmulti"],
                                  rule_name => "columnref_1752",
                                  token => "Op",
                                  token_val => "<>",
                                  val => "a",
                                },
                  }, "SQL::Translator::Statement::Column::Reference"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1507",
                    token => "AND",
                    token_val => "AND",
                    val => ["<>"],
                  },
      name     => 'fix',
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "2009-01-01",
                    },
                    type => "String",
                    val => "2009-01-01",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{name} = $a->{A_Expr}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 5974 (' b <> 10.7;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, b
---STARTSTATE: INITIAL @ 5976 (' <> 10.7;')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "Op",
      token_val => "<>",
      val => "b",
    },
  },
}
---STARTSTATE: INITIAL @ 5979 (' 10.7;')
---GOTMATCH: decimal
---ENDTOKEN: FCONST, 10.7
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1790",
      token => undef,
      token_val => undef,
      val => 10.7,
    },
    type => "Float",
    val => 10.7,
  },
}
---STARTSTATE: INITIAL @ 5984 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    fields   => ["b"],
                    location => {
                                  char_pos => undef,
                                  left_side => "columnref",
                                  right_side => ["stmtmulti"],
                                  rule_name => "columnref_1752",
                                  token => "Op",
                                  token_val => "<>",
                                  val => "b",
                                },
                  }, "SQL::Translator::Statement::Column::Reference"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1507",
                    token => ";",
                    token_val => ";",
                    val => ["<>"],
                  },
      name     => 'fix',
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1790",
                      token => undef,
                      token_val => undef,
                      val => 10.7,
                    },
                    type => "Float",
                    val => 10.7,
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{name} = $a->{A_Expr}{location}{val};
  $a;
}
do {
  my $a = {
    A_Expr => {
      kind     => "AND",
      lexpr    => bless({
                    kind     => "OP",
                    lexpr    => bless({
                                  fields   => ["a"],
                                  location => {
                                                char_pos => undef,
                                                left_side => "columnref",
                                                right_side => ["stmtmulti"],
                                                rule_name => "columnref_1752",
                                                token => "Op",
                                                token_val => "<>",
                                                val => "a",
                                              },
                                }, "SQL::Translator::Statement::Column::Reference"),
                    location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1507",
                                  token => "AND",
                                  token_val => "AND",
                                  val => ["<>"],
                                },
                    name     => 'fix',
                    rexpr    => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "2009-01-01",
                                  },
                                  type => "String",
                                  val => "2009-01-01",
                                }, "SQL::Translator::Statement::A_Const"),
                  }, "SQL::Translator::Statement::A_Expr"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1510",
                    token => ";",
                    token_val => ";",
                    val => "AND",
                  },
      rexpr    => bless({
                    kind     => "OP",
                    lexpr    => bless({
                                  fields   => ["b"],
                                  location => {
                                                char_pos => undef,
                                                left_side => "columnref",
                                                right_side => ["stmtmulti"],
                                                rule_name => "columnref_1752",
                                                token => "Op",
                                                token_val => "<>",
                                                val => "b",
                                              },
                                }, "SQL::Translator::Statement::Column::Reference"),
                    location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1507",
                                  token => ";",
                                  token_val => ";",
                                  val => ["<>"],
                                },
                    name     => 'fix',
                    rexpr    => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1790",
                                    token => undef,
                                    token_val => undef,
                                    val => 10.7,
                                  },
                                  type => "Float",
                                  val => 10.7,
                                }, "SQL::Translator::Statement::A_Const"),
                  }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{A_Expr}{lexpr}{name} = $a->{A_Expr}{lexpr}{location}{val};
  $a->{A_Expr}{rexpr}{name} = $a->{A_Expr}{rexpr}{location}{val};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "test_ne",
                         },
                         relname => "test_ne",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1774",
                           token => undef,
                           token_val => undef,
                           val => "*",
                         },
                         val => bless({
                           fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
                           location => {
                                         char_pos => undef,
                                         left_side => "target_el",
                                         right_side => ["stmtmulti"],
                                         rule_name => "target_el_1774",
                                         token => undef,
                                         token_val => undef,
                                         val => "*",
                                       },
                         }, "SQL::Translator::Statement::Column::Reference"),
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "AND",
                       lexpr    => bless({
                                     kind     => "OP",
                                     lexpr    => bless({
                                                   fields   => ["a"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => "Op",
                                                                 token_val => "<>",
                                                                 val => "a",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "a_expr",
                                                   right_side => ["stmtmulti", ";", "stmt"],
                                                   rule_name => "a_expr_1507",
                                                   token => "AND",
                                                   token_val => "AND",
                                                   val => ["<>"],
                                                 },
                                     name     => 'fix',
                                     rexpr    => bless({
                                                   location => {
                                                     char_pos => undef,
                                                     left_side => "AexprConst",
                                                     right_side => ["stmtmulti"],
                                                     rule_name => "AexprConst_1791",
                                                     token => undef,
                                                     token_val => undef,
                                                     val => "2009-01-01",
                                                   },
                                                   type => "String",
                                                   val => "2009-01-01",
                                                 }, "SQL::Translator::Statement::A_Const"),
                                   }, "SQL::Translator::Statement::A_Expr"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1510",
                                     token => ";",
                                     token_val => ";",
                                     val => "AND",
                                   },
                       rexpr    => bless({
                                     kind     => "OP",
                                     lexpr    => bless({
                                                   fields   => ["b"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => "Op",
                                                                 token_val => "<>",
                                                                 val => "b",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "a_expr",
                                                   right_side => ["stmtmulti", ";", "stmt"],
                                                   rule_name => "a_expr_1507",
                                                   token => ";",
                                                   token_val => ";",
                                                   val => ["<>"],
                                                 },
                                     name     => 'fix',
                                     rexpr    => bless({
                                                   location => {
                                                     char_pos => undef,
                                                     left_side => "AexprConst",
                                                     right_side => ["stmtmulti"],
                                                     rule_name => "AexprConst_1790",
                                                     token => undef,
                                                     token_val => undef,
                                                     val => 10.7,
                                                   },
                                                   type => "Float",
                                                   val => 10.7,
                                                 }, "SQL::Translator::Statement::A_Const"),
                                   }, "SQL::Translator::Statement::A_Expr"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{whereClause}{lexpr}{name} = $a->{SelectStmt}{whereClause}{lexpr}{location}{val};
  $a->{SelectStmt}{whereClause}{rexpr}{name} = $a->{SelectStmt}{whereClause}{rexpr}{location}{val};
  $a;
}
do {
  my $a = {
    ExplainStmt => {
      options => [
                   bless({ arg => "OFF", defaction => "UNSPEC", defname => "costs" }, "SQL::Translator::Statement::DefElem"),
                 ],
      query   => bless({
                   fromClause  => [
                                    bless({
                                      alias => undef,
                                      inhOpt => "DEFAULT",
                                      location => {
                                        char_pos => undef,
                                        left_side => "qualified_name",
                                        right_side => ["stmtmulti"],
                                        rule_name => "qualified_name_1777",
                                        token => "WHERE",
                                        token_val => "WHERE",
                                        val => "test_ne",
                                      },
                                      relname => "test_ne",
                                      relpersistence => "\"p\"",
                                    }, "SQL::Translator::Statement::RangeVar"),
                                  ],
                   targetList  => [
                                    bless({
                                      location => {
                                        char_pos => undef,
                                        left_side => "target_el",
                                        right_side => ["stmtmulti"],
                                        rule_name => "target_el_1774",
                                        token => undef,
                                        token_val => undef,
                                        val => "*",
                                      },
                                      val => bless({
                                        fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
                                        location => {
                                                      char_pos => undef,
                                                      left_side => "target_el",
                                                      right_side => ["stmtmulti"],
                                                      rule_name => "target_el_1774",
                                                      token => undef,
                                                      token_val => undef,
                                                      val => "*",
                                                    },
                                      }, "SQL::Translator::Statement::Column::Reference"),
                                    }, "SQL::Translator::Statement::ResultTarget"),
                                  ],
                   whereClause => bless({
                                    kind     => "AND",
                                    lexpr    => bless({
                                                  kind     => "OP",
                                                  lexpr    => bless({
                                                                fields   => ["a"],
                                                                location => {
                                                                              char_pos => undef,
                                                                              left_side => "columnref",
                                                                              right_side => ["stmtmulti"],
                                                                              rule_name => "columnref_1752",
                                                                              token => "Op",
                                                                              token_val => "<>",
                                                                              val => "a",
                                                                            },
                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                  location => {
                                                                char_pos => undef,
                                                                left_side => "a_expr",
                                                                right_side => ["stmtmulti", ";", "stmt"],
                                                                rule_name => "a_expr_1507",
                                                                token => "AND",
                                                                token_val => "AND",
                                                                val => ["<>"],
                                                              },
                                                  name     => 'fix',
                                                  rexpr    => bless({
                                                                location => {
                                                                  char_pos => undef,
                                                                  left_side => "AexprConst",
                                                                  right_side => ["stmtmulti"],
                                                                  rule_name => "AexprConst_1791",
                                                                  token => undef,
                                                                  token_val => undef,
                                                                  val => "2009-01-01",
                                                                },
                                                                type => "String",
                                                                val => "2009-01-01",
                                                              }, "SQL::Translator::Statement::A_Const"),
                                                }, "SQL::Translator::Statement::A_Expr"),
                                    location => {
                                                  char_pos => undef,
                                                  left_side => "a_expr",
                                                  right_side => ["stmtmulti", ";", "stmt"],
                                                  rule_name => "a_expr_1510",
                                                  token => ";",
                                                  token_val => ";",
                                                  val => "AND",
                                                },
                                    rexpr    => bless({
                                                  kind     => "OP",
                                                  lexpr    => bless({
                                                                fields   => ["b"],
                                                                location => {
                                                                              char_pos => undef,
                                                                              left_side => "columnref",
                                                                              right_side => ["stmtmulti"],
                                                                              rule_name => "columnref_1752",
                                                                              token => "Op",
                                                                              token_val => "<>",
                                                                              val => "b",
                                                                            },
                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                  location => {
                                                                char_pos => undef,
                                                                left_side => "a_expr",
                                                                right_side => ["stmtmulti", ";", "stmt"],
                                                                rule_name => "a_expr_1507",
                                                                token => ";",
                                                                token_val => ";",
                                                                val => ["<>"],
                                                              },
                                                  name     => 'fix',
                                                  rexpr    => bless({
                                                                location => {
                                                                  char_pos => undef,
                                                                  left_side => "AexprConst",
                                                                  right_side => ["stmtmulti"],
                                                                  rule_name => "AexprConst_1790",
                                                                  token => undef,
                                                                  token_val => undef,
                                                                  val => 10.7,
                                                                },
                                                                type => "Float",
                                                                val => 10.7,
                                                              }, "SQL::Translator::Statement::A_Const"),
                                                }, "SQL::Translator::Statement::A_Expr"),
                                  }, "SQL::Translator::Statement::A_Expr"),
                 }, "SQL::Translator::Statement::Select"),
    },
  };
  $a->{ExplainStmt}{query}{whereClause}{lexpr}{name} = $a->{ExplainStmt}{query}{whereClause}{lexpr}{location}{val};
  $a->{ExplainStmt}{query}{whereClause}{rexpr}{name} = $a->{ExplainStmt}{query}{whereClause}{rexpr}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 5985 ('

SELECT count(*) FROM macaddrtmp WHERE a <= '22:0')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 5993 (' count(*) FROM macaddrtmp WHERE a <= '22:00:5c:e5:')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, count
---STARTSTATE: INITIAL @ 5999 ('(*) FROM macaddrtmp WHERE a <= '22:00:5c:e5:9b:0d'')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 6000 ('*) FROM macaddrtmp WHERE a <= '22:00:5c:e5:9b:0d':')
---GOTMATCH: self
---ENDTOKEN: *, *
---STARTSTATE: INITIAL @ 6001 (') FROM macaddrtmp WHERE a <= '22:00:5c:e5:9b:0d'::')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 6002 (' FROM macaddrtmp WHERE a <= '22:00:5c:e5:9b:0d'::m')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
do {
  my $a = {
    FunctionCall => {
      agg_distinct  => 0,
      agg_star      => 1,
      func_variadic => 0,
      funcname      => ["count"],
      location      => {
                         char_pos => undef,
                         left_side => "func_expr",
                         right_side => ["stmtmulti"],
                         rule_name => "func_expr_1591",
                         token => "FROM",
                         token_val => "FROM",
                         val => 'fix',
                       },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => "FROM",
        token_val => "FROM",
        val => bless({
          agg_distinct  => 0,
          agg_star      => 1,
          func_variadic => 0,
          funcname      => ["count"],
          location      => {
                             char_pos => undef,
                             left_side => "func_expr",
                             right_side => ["stmtmulti"],
                             rule_name => "func_expr_1591",
                             token => "FROM",
                             token_val => "FROM",
                             val => 'fix',
                           },
        }, "SQL::Translator::Statement::Function::Call"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{location}{val}{location}{val} = $a->{ResultTarget}{location}{val}{funcname};
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6007 (' macaddrtmp WHERE a <= '22:00:5c:e5:9b:0d'::macadd')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, macaddrtmp
---STARTSTATE: INITIAL @ 6018 (' WHERE a <= '22:00:5c:e5:9b:0d'::macaddr;')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "macaddrtmp",
    },
    relname => "macaddrtmp",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6024 (' a <= '22:00:5c:e5:9b:0d'::macaddr;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, a
---STARTSTATE: INITIAL @ 6026 (' <= '22:00:5c:e5:9b:0d'::macaddr;')
---GOTMATCH: operator
---ENDTOKEN: Op, <=
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "Op",
      token_val => "<=",
      val => "a",
    },
  },
}
---STARTSTATE: INITIAL @ 6029 (' '22:00:5c:e5:9b:0d'::macaddr;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 6031 ('22:00:5c:e5:9b:0d'::macaddr;')
---ENDTOKEN: SCONST, 22:00:5c:e5:9b:0d
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "22:00:5c:e5:9b:0d",
    },
    type => "String",
    val => "22:00:5c:e5:9b:0d",
  },
}
---STARTSTATE: INITIAL @ 6049 ('::macaddr;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 6051 ('macaddr;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, macaddr
---STARTSTATE: INITIAL @ 6058 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{ TypeName => { names => ["macaddr"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "22:00:5c:e5:9b:0d",
      },
      type => "String",
      val => "22:00:5c:e5:9b:0d",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ";",
      token_val => ";",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ";",
                       token_val => ";",
                       val => "macaddr",
                     },
      names       => ["macaddr"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    fields   => ["a"],
                    location => {
                                  char_pos => undef,
                                  left_side => "columnref",
                                  right_side => ["stmtmulti"],
                                  rule_name => "columnref_1752",
                                  token => "Op",
                                  token_val => "<=",
                                  val => "a",
                                },
                  }, "SQL::Translator::Statement::Column::Reference"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1507",
                    token => ";",
                    token_val => ";",
                    val => ["<="],
                  },
      name     => 'fix',
      rexpr    => bless({
                    arg => bless({
                      location => {
                        char_pos => undef,
                        left_side => "AexprConst",
                        right_side => ["stmtmulti"],
                        rule_name => "AexprConst_1791",
                        token => undef,
                        token_val => undef,
                        val => "22:00:5c:e5:9b:0d",
                      },
                      type => "String",
                      val => "22:00:5c:e5:9b:0d",
                    }, "SQL::Translator::Statement::A_Const"),
                    location => {
                      char_pos => undef,
                      left_side => "a_expr",
                      right_side => ["stmtmulti", ";", "stmt"],
                      rule_name => "a_expr_1493",
                      token => ";",
                      token_val => ";",
                      val => "::",
                    },
                    typeName => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => ";",
                                       token_val => ";",
                                       val => "macaddr",
                                     },
                      names       => ["macaddr"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
                  }, "SQL::Translator::Statement::TypeCast"),
    },
  };
  $a->{A_Expr}{name} = $a->{A_Expr}{location}{val};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "macaddrtmp",
                         },
                         relname => "macaddrtmp",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => "FROM",
                           token_val => "FROM",
                           val => bless({
                             agg_distinct  => 0,
                             agg_star      => 1,
                             func_variadic => 0,
                             funcname      => ["count"],
                             location      => {
                                                char_pos => undef,
                                                left_side => "func_expr",
                                                right_side => ["stmtmulti"],
                                                rule_name => "func_expr_1591",
                                                token => "FROM",
                                                token_val => "FROM",
                                                val => 'fix',
                                              },
                           }, "SQL::Translator::Statement::Function::Call"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["a"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "Op",
                                                   token_val => "<=",
                                                   val => "a",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1507",
                                     token => ";",
                                     token_val => ";",
                                     val => ["<="],
                                   },
                       name     => 'fix',
                       rexpr    => bless({
                                     arg => bless({
                                       location => {
                                         char_pos => undef,
                                         left_side => "AexprConst",
                                         right_side => ["stmtmulti"],
                                         rule_name => "AexprConst_1791",
                                         token => undef,
                                         token_val => undef,
                                         val => "22:00:5c:e5:9b:0d",
                                       },
                                       type => "String",
                                       val => "22:00:5c:e5:9b:0d",
                                     }, "SQL::Translator::Statement::A_Const"),
                                     location => {
                                       char_pos => undef,
                                       left_side => "a_expr",
                                       right_side => ["stmtmulti", ";", "stmt"],
                                       rule_name => "a_expr_1493",
                                       token => ";",
                                       token_val => ";",
                                       val => "::",
                                     },
                                     typeName => bless({
                                       arrayBounds => undef,
                                       location    => {
                                                        char_pos => undef,
                                                        left_side => "GenericType",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "GenericType_1429",
                                                        token => ";",
                                                        token_val => ";",
                                                        val => "macaddr",
                                                      },
                                       names       => ["macaddr"],
                                       typemod     => -1,
                                       typmods     => undef,
                                     }, "SQL::Translator::Statement::TypeName"),
                                   }, "SQL::Translator::Statement::TypeCast"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{targetList}[0]{location}{val}{location}{val} = $a->{SelectStmt}{targetList}[0]{location}{val}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a->{SelectStmt}{whereClause}{name} = $a->{SelectStmt}{whereClause}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6059 ('

CREATE OPERATOR = (
	leftarg = chkpass,
	rightar')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 6067 (' OPERATOR = (')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 6076 (' = (')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6078 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 6080 ('
	leftarg = chkpass,
	rightarg = text,
	negator = ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, leftarg
---STARTSTATE: INITIAL @ 6089 (' = chkpass,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6091 (' chkpass,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, chkpass
---STARTSTATE: INITIAL @ 6099 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["chkpass"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "chkpass",
                     },
      names       => ["chkpass"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "leftarg",
  },
}
---STARTSTATE: INITIAL @ 6100 ('
	rightarg = text,
	negator = <>,
	procedure = eq
')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, rightarg
---STARTSTATE: INITIAL @ 6110 (' = text,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6112 (' text,')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 6117 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["text"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "rightarg",
  },
}
---STARTSTATE: INITIAL @ 6118 ('
	negator = <>,
	procedure = eq
);

CREATE OPERATO')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, negator
---STARTSTATE: INITIAL @ 6127 (' = <>,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6129 (' <>,')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
{
  DefElem => { arg => ["<>"], defaction => "UNSPEC", defname => "negator" },
}
---STARTSTATE: INITIAL @ 6132 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 6133 ('
	procedure = eq
);

CREATE OPERATOR <> (
	leftarg')
---GOTMATCH: identifier
---ENDTOKEN: PROCEDURE, procedure
---STARTSTATE: INITIAL @ 6144 (' = eq')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6146 (' eq')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, eq
---STARTSTATE: INITIAL @ 6149 ('
);

CREATE OPERATOR <> (
	leftarg = chkpass,
	rig')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["eq"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "eq",
                     },
      names       => ["eq"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "procedure",
  },
}
{
  DefineStmt => {
    definition => [
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "chkpass",
                         },
          names       => ["chkpass"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "leftarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "text",
                         },
          names       => ["text"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "rightarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => ["<>"], defaction => "UNSPEC", defname => "negator" }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ")",
                           token_val => ")",
                           val => "eq",
                         },
          names       => ["eq"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "procedure",
      }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["="],
    kind => "OPERATOR",
    oldstyle => 0,
  },
}
---STARTSTATE: INITIAL @ 6151 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 6152 ('

CREATE OPERATOR <> (
	leftarg = chkpass,
	righta')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 6160 (' OPERATOR <> (')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 6169 (' <> (')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
---STARTSTATE: INITIAL @ 6172 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 6174 ('
	leftarg = chkpass,
	rightarg = text,
	negator = ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, leftarg
---STARTSTATE: INITIAL @ 6183 (' = chkpass,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6185 (' chkpass,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, chkpass
---STARTSTATE: INITIAL @ 6193 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["chkpass"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "chkpass",
                     },
      names       => ["chkpass"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "leftarg",
  },
}
---STARTSTATE: INITIAL @ 6194 ('
	rightarg = text,
	negator = =,
	procedure = ne
)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, rightarg
---STARTSTATE: INITIAL @ 6204 (' = text,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6206 (' text,')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 6211 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["text"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "rightarg",
  },
}
---STARTSTATE: INITIAL @ 6212 ('
	negator = =,
	procedure = ne
);

COMMENT ON TYPE')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, negator
---STARTSTATE: INITIAL @ 6221 (' = =,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6223 (' =,')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  DefElem => { arg => ["="], defaction => "UNSPEC", defname => "negator" },
}
---STARTSTATE: INITIAL @ 6225 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 6226 ('
	procedure = ne
);

COMMENT ON TYPE chkpass IS 'p')
---GOTMATCH: identifier
---ENDTOKEN: PROCEDURE, procedure
---STARTSTATE: INITIAL @ 6237 (' = ne')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6239 (' ne')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, ne
---STARTSTATE: INITIAL @ 6242 ('
);

COMMENT ON TYPE chkpass IS 'password type wit')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["ne"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "ne",
                     },
      names       => ["ne"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "procedure",
  },
}
{
  DefineStmt => {
    definition => [
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "chkpass",
                         },
          names       => ["chkpass"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "leftarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "text",
                         },
          names       => ["text"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "rightarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => ["="], defaction => "UNSPEC", defname => "negator" }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ")",
                           token_val => ")",
                           val => "ne",
                         },
          names       => ["ne"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "procedure",
      }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["<>"],
    kind => "OPERATOR",
    oldstyle => 0,
  },
}
---STARTSTATE: INITIAL @ 6244 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 6245 ('

COMMENT ON TYPE chkpass IS 'password type with c')
---GOTMATCH: identifier
---ENDTOKEN: COMMENT, COMMENT
---STARTSTATE: INITIAL @ 6254 (' ON TYPE chkpass IS 'password type with checks';')
---GOTMATCH: identifier
---ENDTOKEN: ON, ON
---STARTSTATE: INITIAL @ 6257 (' TYPE chkpass IS 'password type with checks';')
---GOTMATCH: identifier
---ENDTOKEN: TYPE, TYPE
---STARTSTATE: INITIAL @ 6262 (' chkpass IS 'password type with checks';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, chkpass
---STARTSTATE: INITIAL @ 6270 (' IS 'password type with checks';')
---GOTMATCH: identifier
---ENDTOKEN: IS, IS
---STARTSTATE: INITIAL @ 6273 (' 'password type with checks';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 6275 ('password type with checks';')
---ENDTOKEN: SCONST, password type with checks
{
  CommentStmt => {
    comment => "password type with checks",
    objname => ["chkpass"],
    objtype => "TYPE",
  },
}
---STARTSTATE: INITIAL @ 6301 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 6302 ('

WITH RECURSIVE typeoids(typoid) AS
  ( SELECT 'c')
---GOTMATCH: identifier
---STARTSTATE: INITIAL @ 6308 (' RECURSIVE typeoids(typoid) AS')
---GOTMATCH: identifier
---ENDTOKEN: WITH, WITH
---ENDTOKEN: RECURSIVE, RECURSIVE
---STARTSTATE: INITIAL @ 6318 (' typeoids(typoid) AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typeoids
---STARTSTATE: INITIAL @ 6327 ('(typoid) AS')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 6328 ('typoid) AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typoid
---STARTSTATE: INITIAL @ 6334 (') AS')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 6335 (' AS')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 6338 ('
  ( SELECT 'citext'::pg_catalog.regtype UNION
   ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 6342 (' SELECT 'citext'::pg_catalog.regtype UNION')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 6349 (' 'citext'::pg_catalog.regtype UNION')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 6351 ('citext'::pg_catalog.regtype UNION')
---ENDTOKEN: SCONST, citext
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "citext",
    },
    type => "String",
    val => "citext",
  },
}
---STARTSTATE: INITIAL @ 6358 ('::pg_catalog.regtype UNION')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 6360 ('pg_catalog.regtype UNION')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 6370 ('.regtype UNION')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 6371 ('regtype UNION')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, regtype
---STARTSTATE: INITIAL @ 6378 (' UNION')
---GOTMATCH: identifier
---ENDTOKEN: UNION, UNION
{
  TypeName => { names => ["regtype", "pg_catalog"], typemod => -1 },
}
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "citext",
      },
      type => "String",
      val => "citext",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => "UNION",
      token_val => "UNION",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1430",
                       token => "UNION",
                       token_val => "UNION",
                       val => "pg_catalog",
                     },
      names       => ["regtype", "pg_catalog"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => "UNION",
        token_val => "UNION",
        val => bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "citext",
            },
            type => "String",
            val => "citext",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => "UNION",
            token_val => "UNION",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1430",
                             token => "UNION",
                             token_val => "UNION",
                             val => "pg_catalog",
                           },
            names       => ["regtype", "pg_catalog"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1773",
            token => "UNION",
            token_val => "UNION",
            val => bless({
              arg => bless({
                location => {
                  char_pos => undef,
                  left_side => "AexprConst",
                  right_side => ["stmtmulti"],
                  rule_name => "AexprConst_1791",
                  token => undef,
                  token_val => undef,
                  val => "citext",
                },
                type => "String",
                val => "citext",
              }, "SQL::Translator::Statement::A_Const"),
              location => {
                char_pos => undef,
                left_side => "a_expr",
                right_side => ["stmtmulti", ";", "stmt"],
                rule_name => "a_expr_1493",
                token => "UNION",
                token_val => "UNION",
                val => "::",
              },
              typeName => bless({
                arrayBounds => undef,
                location    => {
                                 char_pos => undef,
                                 left_side => "GenericType",
                                 right_side => ["stmtmulti"],
                                 rule_name => "GenericType_1430",
                                 token => "UNION",
                                 token_val => "UNION",
                                 val => "pg_catalog",
                               },
                names       => ["regtype", "pg_catalog"],
                typemod     => -1,
                typmods     => undef,
              }, "SQL::Translator::Statement::TypeName"),
            }, "SQL::Translator::Statement::TypeCast"),
          },
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6384 ('
    SELECT oid FROM pg_catalog.pg_type, typeoids
')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 6395 (' oid FROM pg_catalog.pg_type, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 6399 (' FROM pg_catalog.pg_type, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "FROM",
      token_val => "FROM",
      val => "oid",
    },
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => "FROM",
        token_val => "FROM",
        val => bless({
          fields   => ["oid"],
          location => {
                        char_pos => undef,
                        left_side => "columnref",
                        right_side => ["stmtmulti"],
                        rule_name => "columnref_1752",
                        token => "FROM",
                        token_val => "FROM",
                        val => "oid",
                      },
        }, "SQL::Translator::Statement::Column::Reference"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6404 (' pg_catalog.pg_type, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 6415 ('.pg_type, typeoids')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 6416 ('pg_type, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_type
---STARTSTATE: INITIAL @ 6423 (', typeoids')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1778",
      token => ",",
      token_val => ",",
      val => "pg_catalog",
    },
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6424 (' typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typeoids
---STARTSTATE: INITIAL @ 6433 ('
      WHERE typelem = typoid OR typbasetype = typ')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "typeoids",
    },
    relname => "typeoids",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6445 (' typelem = typoid OR typbasetype = typoid )')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typelem
---STARTSTATE: INITIAL @ 6453 (' = typoid OR typbasetype = typoid )')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "=",
      token_val => "=",
      val => "typelem",
    },
  },
}
---STARTSTATE: INITIAL @ 6455 (' typoid OR typbasetype = typoid )')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typoid
---STARTSTATE: INITIAL @ 6462 (' OR typbasetype = typoid )')
---GOTMATCH: identifier
---ENDTOKEN: OR, OR
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "OR",
      token_val => "OR",
      val => "typoid",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["typelem"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "=",
                                token_val => "=",
                                val => "typelem",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => "OR",
                  token_val => "OR",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["typoid"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "OR",
                                token_val => "OR",
                                val => "typoid",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 6465 (' typbasetype = typoid )')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typbasetype
---STARTSTATE: INITIAL @ 6477 (' = typoid )')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "=",
      token_val => "=",
      val => "typbasetype",
    },
  },
}
---STARTSTATE: INITIAL @ 6479 (' typoid )')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typoid
---STARTSTATE: INITIAL @ 6486 (' )')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => ")",
      token_val => ")",
      val => "typoid",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["typbasetype"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "=",
                                token_val => "=",
                                val => "typbasetype",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => ")",
                  token_val => ")",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["typoid"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => ")",
                                token_val => ")",
                                val => "typoid",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
{
  A_Expr => {
    kind     => "OR",
    lexpr    => bless({
                  kind     => "OP",
                  lexpr    => bless({
                                fields   => ["typelem"],
                                location => {
                                              char_pos => undef,
                                              left_side => "columnref",
                                              right_side => ["stmtmulti"],
                                              rule_name => "columnref_1752",
                                              token => "=",
                                              token_val => "=",
                                              val => "typelem",
                                            },
                              }, "SQL::Translator::Statement::Column::Reference"),
                  location => {
                                char_pos => undef,
                                left_side => "a_expr",
                                right_side => ["stmtmulti", ";", "stmt"],
                                rule_name => "a_expr_1506",
                                token => "OR",
                                token_val => "OR",
                                val => "=",
                              },
                  name     => ["="],
                  rexpr    => bless({
                                fields   => ["typoid"],
                                location => {
                                              char_pos => undef,
                                              left_side => "columnref",
                                              right_side => ["stmtmulti"],
                                              rule_name => "columnref_1752",
                                              token => "OR",
                                              token_val => "OR",
                                              val => "typoid",
                                            },
                              }, "SQL::Translator::Statement::Column::Reference"),
                }, "SQL::Translator::Statement::A_Expr"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1511",
                  token => ")",
                  token_val => ")",
                  val => "OR",
                },
    rexpr    => bless({
                  kind     => "OP",
                  lexpr    => bless({
                                fields   => ["typbasetype"],
                                location => {
                                              char_pos => undef,
                                              left_side => "columnref",
                                              right_side => ["stmtmulti"],
                                              rule_name => "columnref_1752",
                                              token => "=",
                                              token_val => "=",
                                              val => "typbasetype",
                                            },
                              }, "SQL::Translator::Statement::Column::Reference"),
                  location => {
                                char_pos => undef,
                                left_side => "a_expr",
                                right_side => ["stmtmulti", ";", "stmt"],
                                rule_name => "a_expr_1506",
                                token => ")",
                                token_val => ")",
                                val => "=",
                              },
                  name     => ["="],
                  rexpr    => bless({
                                fields   => ["typoid"],
                                location => {
                                              char_pos => undef,
                                              left_side => "columnref",
                                              right_side => ["stmtmulti"],
                                              rule_name => "columnref_1752",
                                              token => ")",
                                              token_val => ")",
                                              val => "typoid",
                                            },
                              }, "SQL::Translator::Statement::Column::Reference"),
                }, "SQL::Translator::Statement::A_Expr"),
  },
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias          => undef,
                         catalogname    => undef,
                         inhOpt         => "DEFAULT",
                         location       => {
                                             char_pos => undef,
                                             left_side => "qualified_name",
                                             right_side => ["stmtmulti"],
                                             rule_name => "qualified_name_1778",
                                             token => ",",
                                             token_val => ",",
                                             val => "pg_catalog",
                                           },
                         relname        => "pg_type",
                         relpersistence => "\"p\"",
                         schemaname     => "pg_catalog",
                       }, "SQL::Translator::Statement::RangeVar"),
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "typeoids",
                         },
                         relname => "typeoids",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => "FROM",
                           token_val => "FROM",
                           val => bless({
                             fields   => ["oid"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => "FROM",
                                           token_val => "FROM",
                                           val => "oid",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OR",
                       lexpr    => bless({
                                     kind     => "OP",
                                     lexpr    => bless({
                                                   fields   => ["typelem"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => "=",
                                                                 token_val => "=",
                                                                 val => "typelem",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "a_expr",
                                                   right_side => ["stmtmulti", ";", "stmt"],
                                                   rule_name => "a_expr_1506",
                                                   token => "OR",
                                                   token_val => "OR",
                                                   val => "=",
                                                 },
                                     name     => ["="],
                                     rexpr    => bless({
                                                   fields   => ["typoid"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => "OR",
                                                                 token_val => "OR",
                                                                 val => "typoid",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                   }, "SQL::Translator::Statement::A_Expr"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1511",
                                     token => ")",
                                     token_val => ")",
                                     val => "OR",
                                   },
                       rexpr    => bless({
                                     kind     => "OP",
                                     lexpr    => bless({
                                                   fields   => ["typbasetype"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => "=",
                                                                 token_val => "=",
                                                                 val => "typbasetype",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "a_expr",
                                                   right_side => ["stmtmulti", ";", "stmt"],
                                                   rule_name => "a_expr_1506",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "=",
                                                 },
                                     name     => ["="],
                                     rexpr    => bless({
                                                   fields   => ["typoid"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => ")",
                                                                 token_val => ")",
                                                                 val => "typoid",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                   }, "SQL::Translator::Statement::A_Expr"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      all  => 0,
      larg => bless({
                targetList => [
                  bless({
                    location => {
                      char_pos => undef,
                      left_side => "target_el",
                      right_side => ["stmtmulti"],
                      rule_name => "target_el_1773",
                      token => "UNION",
                      token_val => "UNION",
                      val => bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "citext",
                          },
                          type => "String",
                          val => "citext",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => "UNION",
                          token_val => "UNION",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1430",
                                           token => "UNION",
                                           token_val => "UNION",
                                           val => "pg_catalog",
                                         },
                          names       => ["regtype", "pg_catalog"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                    },
                    val => 'fix',
                  }, "SQL::Translator::Statement::ResultTarget"),
                ],
              }, "SQL::Translator::Statement::Select"),
      op   => "UNION",
      rarg => bless({
                fromClause  => [
                                 bless({
                                   alias          => undef,
                                   catalogname    => undef,
                                   inhOpt         => "DEFAULT",
                                   location       => {
                                                       char_pos => undef,
                                                       left_side => "qualified_name",
                                                       right_side => ["stmtmulti"],
                                                       rule_name => "qualified_name_1778",
                                                       token => ",",
                                                       token_val => ",",
                                                       val => "pg_catalog",
                                                     },
                                   relname        => "pg_type",
                                   relpersistence => "\"p\"",
                                   schemaname     => "pg_catalog",
                                 }, "SQL::Translator::Statement::RangeVar"),
                                 bless({
                                   alias => undef,
                                   inhOpt => "DEFAULT",
                                   location => {
                                     char_pos => undef,
                                     left_side => "qualified_name",
                                     right_side => ["stmtmulti"],
                                     rule_name => "qualified_name_1777",
                                     token => "WHERE",
                                     token_val => "WHERE",
                                     val => "typeoids",
                                   },
                                   relname => "typeoids",
                                   relpersistence => "\"p\"",
                                 }, "SQL::Translator::Statement::RangeVar"),
                               ],
                targetList  => [
                                 bless({
                                   location => {
                                     char_pos => undef,
                                     left_side => "target_el",
                                     right_side => ["stmtmulti"],
                                     rule_name => "target_el_1773",
                                     token => "FROM",
                                     token_val => "FROM",
                                     val => bless({
                                       fields   => ["oid"],
                                       location => {
                                                     char_pos => undef,
                                                     left_side => "columnref",
                                                     right_side => ["stmtmulti"],
                                                     rule_name => "columnref_1752",
                                                     token => "FROM",
                                                     token_val => "FROM",
                                                     val => "oid",
                                                   },
                                     }, "SQL::Translator::Statement::Column::Reference"),
                                   },
                                   val => 'fix',
                                 }, "SQL::Translator::Statement::ResultTarget"),
                               ],
                whereClause => bless({
                                 kind     => "OR",
                                 lexpr    => bless({
                                               kind     => "OP",
                                               lexpr    => bless({
                                                             fields   => ["typelem"],
                                                             location => {
                                                                           char_pos => undef,
                                                                           left_side => "columnref",
                                                                           right_side => ["stmtmulti"],
                                                                           rule_name => "columnref_1752",
                                                                           token => "=",
                                                                           token_val => "=",
                                                                           val => "typelem",
                                                                         },
                                                           }, "SQL::Translator::Statement::Column::Reference"),
                                               location => {
                                                             char_pos => undef,
                                                             left_side => "a_expr",
                                                             right_side => ["stmtmulti", ";", "stmt"],
                                                             rule_name => "a_expr_1506",
                                                             token => "OR",
                                                             token_val => "OR",
                                                             val => "=",
                                                           },
                                               name     => ["="],
                                               rexpr    => bless({
                                                             fields   => ["typoid"],
                                                             location => {
                                                                           char_pos => undef,
                                                                           left_side => "columnref",
                                                                           right_side => ["stmtmulti"],
                                                                           rule_name => "columnref_1752",
                                                                           token => "OR",
                                                                           token_val => "OR",
                                                                           val => "typoid",
                                                                         },
                                                           }, "SQL::Translator::Statement::Column::Reference"),
                                             }, "SQL::Translator::Statement::A_Expr"),
                                 location => {
                                               char_pos => undef,
                                               left_side => "a_expr",
                                               right_side => ["stmtmulti", ";", "stmt"],
                                               rule_name => "a_expr_1511",
                                               token => ")",
                                               token_val => ")",
                                               val => "OR",
                                             },
                                 rexpr    => bless({
                                               kind     => "OP",
                                               lexpr    => bless({
                                                             fields   => ["typbasetype"],
                                                             location => {
                                                                           char_pos => undef,
                                                                           left_side => "columnref",
                                                                           right_side => ["stmtmulti"],
                                                                           rule_name => "columnref_1752",
                                                                           token => "=",
                                                                           token_val => "=",
                                                                           val => "typbasetype",
                                                                         },
                                                           }, "SQL::Translator::Statement::Column::Reference"),
                                               location => {
                                                             char_pos => undef,
                                                             left_side => "a_expr",
                                                             right_side => ["stmtmulti", ";", "stmt"],
                                                             rule_name => "a_expr_1506",
                                                             token => ")",
                                                             token_val => ")",
                                                             val => "=",
                                                           },
                                               name     => ["="],
                                               rexpr    => bless({
                                                             fields   => ["typoid"],
                                                             location => {
                                                                           char_pos => undef,
                                                                           left_side => "columnref",
                                                                           right_side => ["stmtmulti"],
                                                                           rule_name => "columnref_1752",
                                                                           token => ")",
                                                                           token_val => ")",
                                                                           val => "typoid",
                                                                         },
                                                           }, "SQL::Translator::Statement::Column::Reference"),
                                             }, "SQL::Translator::Statement::A_Expr"),
                               }, "SQL::Translator::Statement::A_Expr"),
              }, "SQL::Translator::Statement::Select"),
    },
  };
  $a->{SelectStmt}{larg}{targetList}[0]{val} = $a->{SelectStmt}{larg}{targetList}[0]{location}{val};
  $a->{SelectStmt}{rarg}{targetList}[0]{val} = $a->{SelectStmt}{rarg}{targetList}[0]{location}{val};
  $a;
}
do {
  my $a = {
    CommonTableExpr => {
      aliascolnames => ["typoid"],
      ctename       => "typeoids",
      ctequery      => bless({
                         all  => 0,
                         larg => bless({
                                   targetList => [
                                     bless({
                                       location => {
                                         char_pos => undef,
                                         left_side => "target_el",
                                         right_side => ["stmtmulti"],
                                         rule_name => "target_el_1773",
                                         token => "UNION",
                                         token_val => "UNION",
                                         val => bless({
                                           arg => bless({
                                             location => {
                                               char_pos => undef,
                                               left_side => "AexprConst",
                                               right_side => ["stmtmulti"],
                                               rule_name => "AexprConst_1791",
                                               token => undef,
                                               token_val => undef,
                                               val => "citext",
                                             },
                                             type => "String",
                                             val => "citext",
                                           }, "SQL::Translator::Statement::A_Const"),
                                           location => {
                                             char_pos => undef,
                                             left_side => "a_expr",
                                             right_side => ["stmtmulti", ";", "stmt"],
                                             rule_name => "a_expr_1493",
                                             token => "UNION",
                                             token_val => "UNION",
                                             val => "::",
                                           },
                                           typeName => bless({
                                             arrayBounds => undef,
                                             location    => {
                                                              char_pos => undef,
                                                              left_side => "GenericType",
                                                              right_side => ["stmtmulti"],
                                                              rule_name => "GenericType_1430",
                                                              token => "UNION",
                                                              token_val => "UNION",
                                                              val => "pg_catalog",
                                                            },
                                             names       => ["regtype", "pg_catalog"],
                                             typemod     => -1,
                                             typmods     => undef,
                                           }, "SQL::Translator::Statement::TypeName"),
                                         }, "SQL::Translator::Statement::TypeCast"),
                                       },
                                       val => 'fix',
                                     }, "SQL::Translator::Statement::ResultTarget"),
                                   ],
                                 }, "SQL::Translator::Statement::Select"),
                         op   => "UNION",
                         rarg => bless({
                                   fromClause  => [
                                                    bless({
                                                      alias          => undef,
                                                      catalogname    => undef,
                                                      inhOpt         => "DEFAULT",
                                                      location       => {
                                                                          char_pos => undef,
                                                                          left_side => "qualified_name",
                                                                          right_side => ["stmtmulti"],
                                                                          rule_name => "qualified_name_1778",
                                                                          token => ",",
                                                                          token_val => ",",
                                                                          val => "pg_catalog",
                                                                        },
                                                      relname        => "pg_type",
                                                      relpersistence => "\"p\"",
                                                      schemaname     => "pg_catalog",
                                                    }, "SQL::Translator::Statement::RangeVar"),
                                                    bless({
                                                      alias => undef,
                                                      inhOpt => "DEFAULT",
                                                      location => {
                                                        char_pos => undef,
                                                        left_side => "qualified_name",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "qualified_name_1777",
                                                        token => "WHERE",
                                                        token_val => "WHERE",
                                                        val => "typeoids",
                                                      },
                                                      relname => "typeoids",
                                                      relpersistence => "\"p\"",
                                                    }, "SQL::Translator::Statement::RangeVar"),
                                                  ],
                                   targetList  => [
                                                    bless({
                                                      location => {
                                                        char_pos => undef,
                                                        left_side => "target_el",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "target_el_1773",
                                                        token => "FROM",
                                                        token_val => "FROM",
                                                        val => bless({
                                                          fields   => ["oid"],
                                                          location => {
                                                                        char_pos => undef,
                                                                        left_side => "columnref",
                                                                        right_side => ["stmtmulti"],
                                                                        rule_name => "columnref_1752",
                                                                        token => "FROM",
                                                                        token_val => "FROM",
                                                                        val => "oid",
                                                                      },
                                                        }, "SQL::Translator::Statement::Column::Reference"),
                                                      },
                                                      val => 'fix',
                                                    }, "SQL::Translator::Statement::ResultTarget"),
                                                  ],
                                   whereClause => bless({
                                                    kind     => "OR",
                                                    lexpr    => bless({
                                                                  kind     => "OP",
                                                                  lexpr    => bless({
                                                                                fields   => ["typelem"],
                                                                                location => {
                                                                                              char_pos => undef,
                                                                                              left_side => "columnref",
                                                                                              right_side => ["stmtmulti"],
                                                                                              rule_name => "columnref_1752",
                                                                                              token => "=",
                                                                                              token_val => "=",
                                                                                              val => "typelem",
                                                                                            },
                                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                                  location => {
                                                                                char_pos => undef,
                                                                                left_side => "a_expr",
                                                                                right_side => ["stmtmulti", ";", "stmt"],
                                                                                rule_name => "a_expr_1506",
                                                                                token => "OR",
                                                                                token_val => "OR",
                                                                                val => "=",
                                                                              },
                                                                  name     => ["="],
                                                                  rexpr    => bless({
                                                                                fields   => ["typoid"],
                                                                                location => {
                                                                                              char_pos => undef,
                                                                                              left_side => "columnref",
                                                                                              right_side => ["stmtmulti"],
                                                                                              rule_name => "columnref_1752",
                                                                                              token => "OR",
                                                                                              token_val => "OR",
                                                                                              val => "typoid",
                                                                                            },
                                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                                }, "SQL::Translator::Statement::A_Expr"),
                                                    location => {
                                                                  char_pos => undef,
                                                                  left_side => "a_expr",
                                                                  right_side => ["stmtmulti", ";", "stmt"],
                                                                  rule_name => "a_expr_1511",
                                                                  token => ")",
                                                                  token_val => ")",
                                                                  val => "OR",
                                                                },
                                                    rexpr    => bless({
                                                                  kind     => "OP",
                                                                  lexpr    => bless({
                                                                                fields   => ["typbasetype"],
                                                                                location => {
                                                                                              char_pos => undef,
                                                                                              left_side => "columnref",
                                                                                              right_side => ["stmtmulti"],
                                                                                              rule_name => "columnref_1752",
                                                                                              token => "=",
                                                                                              token_val => "=",
                                                                                              val => "typbasetype",
                                                                                            },
                                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                                  location => {
                                                                                char_pos => undef,
                                                                                left_side => "a_expr",
                                                                                right_side => ["stmtmulti", ";", "stmt"],
                                                                                rule_name => "a_expr_1506",
                                                                                token => ")",
                                                                                token_val => ")",
                                                                                val => "=",
                                                                              },
                                                                  name     => ["="],
                                                                  rexpr    => bless({
                                                                                fields   => ["typoid"],
                                                                                location => {
                                                                                              char_pos => undef,
                                                                                              left_side => "columnref",
                                                                                              right_side => ["stmtmulti"],
                                                                                              rule_name => "columnref_1752",
                                                                                              token => ")",
                                                                                              token_val => ")",
                                                                                              val => "typoid",
                                                                                            },
                                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                                }, "SQL::Translator::Statement::A_Expr"),
                                                  }, "SQL::Translator::Statement::A_Expr"),
                                 }, "SQL::Translator::Statement::Select"),
                       }, "SQL::Translator::Statement::Select"),
      location      => {
                         char_pos => undef,
                         left_side => "common_table_expr",
                         right_side => ["stmtmulti"],
                         rule_name => "common_table_expr_1288",
                         token => undef,
                         token_val => undef,
                         val => "typeoids",
                       },
    },
  };
  $a->{CommonTableExpr}{ctequery}{larg}{targetList}[0]{val} = $a->{CommonTableExpr}{ctequery}{larg}{targetList}[0]{location}{val};
  $a->{CommonTableExpr}{ctequery}{rarg}{targetList}[0]{val} = $a->{CommonTableExpr}{ctequery}{rarg}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6488 ('
UPDATE pg_catalog.pg_type SET typcollation = 100
')
---GOTMATCH: identifier
---ENDTOKEN: UPDATE, UPDATE
do {
  my $a = {
    WithClause => {
      ctes => [
        bless({
          aliascolnames => ["typoid"],
          ctename       => "typeoids",
          ctequery      => bless({
                             all  => 0,
                             larg => bless({
                                       targetList => [
                                         bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "target_el",
                                             right_side => ["stmtmulti"],
                                             rule_name => "target_el_1773",
                                             token => "UNION",
                                             token_val => "UNION",
                                             val => bless({
                                               arg => bless({
                                                 location => {
                                                   char_pos => undef,
                                                   left_side => "AexprConst",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "AexprConst_1791",
                                                   token => undef,
                                                   token_val => undef,
                                                   val => "citext",
                                                 },
                                                 type => "String",
                                                 val => "citext",
                                               }, "SQL::Translator::Statement::A_Const"),
                                               location => {
                                                 char_pos => undef,
                                                 left_side => "a_expr",
                                                 right_side => ["stmtmulti", ";", "stmt"],
                                                 rule_name => "a_expr_1493",
                                                 token => "UNION",
                                                 token_val => "UNION",
                                                 val => "::",
                                               },
                                               typeName => bless({
                                                 arrayBounds => undef,
                                                 location    => {
                                                                  char_pos => undef,
                                                                  left_side => "GenericType",
                                                                  right_side => ["stmtmulti"],
                                                                  rule_name => "GenericType_1430",
                                                                  token => "UNION",
                                                                  token_val => "UNION",
                                                                  val => "pg_catalog",
                                                                },
                                                 names       => ["regtype", "pg_catalog"],
                                                 typemod     => -1,
                                                 typmods     => undef,
                                               }, "SQL::Translator::Statement::TypeName"),
                                             }, "SQL::Translator::Statement::TypeCast"),
                                           },
                                           val => 'fix',
                                         }, "SQL::Translator::Statement::ResultTarget"),
                                       ],
                                     }, "SQL::Translator::Statement::Select"),
                             op   => "UNION",
                             rarg => bless({
                                       fromClause  => [
                                                        bless({
                                                          alias          => undef,
                                                          catalogname    => undef,
                                                          inhOpt         => "DEFAULT",
                                                          location       => {
                                                                              char_pos => undef,
                                                                              left_side => "qualified_name",
                                                                              right_side => ["stmtmulti"],
                                                                              rule_name => "qualified_name_1778",
                                                                              token => ",",
                                                                              token_val => ",",
                                                                              val => "pg_catalog",
                                                                            },
                                                          relname        => "pg_type",
                                                          relpersistence => "\"p\"",
                                                          schemaname     => "pg_catalog",
                                                        }, "SQL::Translator::Statement::RangeVar"),
                                                        bless({
                                                          alias => undef,
                                                          inhOpt => "DEFAULT",
                                                          location => {
                                                            char_pos => undef,
                                                            left_side => "qualified_name",
                                                            right_side => ["stmtmulti"],
                                                            rule_name => "qualified_name_1777",
                                                            token => "WHERE",
                                                            token_val => "WHERE",
                                                            val => "typeoids",
                                                          },
                                                          relname => "typeoids",
                                                          relpersistence => "\"p\"",
                                                        }, "SQL::Translator::Statement::RangeVar"),
                                                      ],
                                       targetList  => [
                                                        bless({
                                                          location => {
                                                            char_pos => undef,
                                                            left_side => "target_el",
                                                            right_side => ["stmtmulti"],
                                                            rule_name => "target_el_1773",
                                                            token => "FROM",
                                                            token_val => "FROM",
                                                            val => bless({
                                                              fields   => ["oid"],
                                                              location => {
                                                                            char_pos => undef,
                                                                            left_side => "columnref",
                                                                            right_side => ["stmtmulti"],
                                                                            rule_name => "columnref_1752",
                                                                            token => "FROM",
                                                                            token_val => "FROM",
                                                                            val => "oid",
                                                                          },
                                                            }, "SQL::Translator::Statement::Column::Reference"),
                                                          },
                                                          val => 'fix',
                                                        }, "SQL::Translator::Statement::ResultTarget"),
                                                      ],
                                       whereClause => bless({
                                                        kind     => "OR",
                                                        lexpr    => bless({
                                                                      kind     => "OP",
                                                                      lexpr    => bless({
                                                                                    fields   => ["typelem"],
                                                                                    location => {
                                                                                                  char_pos => undef,
                                                                                                  left_side => "columnref",
                                                                                                  right_side => ["stmtmulti"],
                                                                                                  rule_name => "columnref_1752",
                                                                                                  token => "=",
                                                                                                  token_val => "=",
                                                                                                  val => "typelem",
                                                                                                },
                                                                                  }, "SQL::Translator::Statement::Column::Reference"),
                                                                      location => {
                                                                                    char_pos => undef,
                                                                                    left_side => "a_expr",
                                                                                    right_side => ["stmtmulti", ";", "stmt"],
                                                                                    rule_name => "a_expr_1506",
                                                                                    token => "OR",
                                                                                    token_val => "OR",
                                                                                    val => "=",
                                                                                  },
                                                                      name     => ["="],
                                                                      rexpr    => bless({
                                                                                    fields   => ["typoid"],
                                                                                    location => {
                                                                                                  char_pos => undef,
                                                                                                  left_side => "columnref",
                                                                                                  right_side => ["stmtmulti"],
                                                                                                  rule_name => "columnref_1752",
                                                                                                  token => "OR",
                                                                                                  token_val => "OR",
                                                                                                  val => "typoid",
                                                                                                },
                                                                                  }, "SQL::Translator::Statement::Column::Reference"),
                                                                    }, "SQL::Translator::Statement::A_Expr"),
                                                        location => {
                                                                      char_pos => undef,
                                                                      left_side => "a_expr",
                                                                      right_side => ["stmtmulti", ";", "stmt"],
                                                                      rule_name => "a_expr_1511",
                                                                      token => ")",
                                                                      token_val => ")",
                                                                      val => "OR",
                                                                    },
                                                        rexpr    => bless({
                                                                      kind     => "OP",
                                                                      lexpr    => bless({
                                                                                    fields   => ["typbasetype"],
                                                                                    location => {
                                                                                                  char_pos => undef,
                                                                                                  left_side => "columnref",
                                                                                                  right_side => ["stmtmulti"],
                                                                                                  rule_name => "columnref_1752",
                                                                                                  token => "=",
                                                                                                  token_val => "=",
                                                                                                  val => "typbasetype",
                                                                                                },
                                                                                  }, "SQL::Translator::Statement::Column::Reference"),
                                                                      location => {
                                                                                    char_pos => undef,
                                                                                    left_side => "a_expr",
                                                                                    right_side => ["stmtmulti", ";", "stmt"],
                                                                                    rule_name => "a_expr_1506",
                                                                                    token => ")",
                                                                                    token_val => ")",
                                                                                    val => "=",
                                                                                  },
                                                                      name     => ["="],
                                                                      rexpr    => bless({
                                                                                    fields   => ["typoid"],
                                                                                    location => {
                                                                                                  char_pos => undef,
                                                                                                  left_side => "columnref",
                                                                                                  right_side => ["stmtmulti"],
                                                                                                  rule_name => "columnref_1752",
                                                                                                  token => ")",
                                                                                                  token_val => ")",
                                                                                                  val => "typoid",
                                                                                                },
                                                                                  }, "SQL::Translator::Statement::Column::Reference"),
                                                                    }, "SQL::Translator::Statement::A_Expr"),
                                                      }, "SQL::Translator::Statement::A_Expr"),
                                     }, "SQL::Translator::Statement::Select"),
                           }, "SQL::Translator::Statement::Select"),
          location      => {
                             char_pos => undef,
                             left_side => "common_table_expr",
                             right_side => ["stmtmulti"],
                             rule_name => "common_table_expr_1288",
                             token => undef,
                             token_val => undef,
                             val => "typeoids",
                           },
        }, "SQL::Translator::Statement::CommonTableExpr"),
      ],
      location => {
        char_pos => undef,
        left_side => "with_clause",
        right_side => ["stmtmulti"],
        rule_name => "with_clause_1285",
        token => "UPDATE",
        token_val => "UPDATE",
        val => "WITH",
      },
      recursive => 1,
    },
  };
  $a->{WithClause}{ctes}[0]{ctequery}{larg}{targetList}[0]{val} = $a->{WithClause}{ctes}[0]{ctequery}{larg}{targetList}[0]{location}{val};
  $a->{WithClause}{ctes}[0]{ctequery}{rarg}{targetList}[0]{val} = $a->{WithClause}{ctes}[0]{ctequery}{rarg}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6495 (' pg_catalog.pg_type SET typcollation = 100')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 6506 ('.pg_type SET typcollation = 100')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 6507 ('pg_type SET typcollation = 100')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_type
---STARTSTATE: INITIAL @ 6514 (' SET typcollation = 100')
---GOTMATCH: identifier
---ENDTOKEN: SET, SET
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1778",
      token => "SET",
      token_val => "SET",
      val => "pg_catalog",
    },
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6518 (' typcollation = 100')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typcollation
---STARTSTATE: INITIAL @ 6531 (' = 100')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ResultTarget => {
    location => {
      char_pos => undef,
      left_side => "set_target",
      right_side => ["stmtmulti"],
      rule_name => "set_target_1251",
      token => "=",
      token_val => "=",
      val => "typcollation",
    },
    name => "typcollation",
  },
}
---STARTSTATE: INITIAL @ 6533 (' 100')
---GOTMATCH: integer
---ENDTOKEN: ICONST, 100
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1789",
      token => undef,
      token_val => undef,
      val => 100,
    },
    type => "Integer",
    val => 100,
  },
}
---STARTSTATE: INITIAL @ 6537 ('
FROM typeoids
WHERE oid = typeoids.typoid;

UPDAT')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
---STARTSTATE: INITIAL @ 6542 (' typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typeoids
---STARTSTATE: INITIAL @ 6551 ('
WHERE oid = typeoids.typoid;

UPDATE pg_catalog.p')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "typeoids",
    },
    relname => "typeoids",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6557 (' oid = typeoids.typoid;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 6561 (' = typeoids.typoid;')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "=",
      token_val => "=",
      val => "oid",
    },
  },
}
---STARTSTATE: INITIAL @ 6563 (' typeoids.typoid;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typeoids
---STARTSTATE: INITIAL @ 6572 ('.typoid;')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 6573 ('typoid;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typoid
---STARTSTATE: INITIAL @ 6579 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1753",
      token => ";",
      token_val => ";",
      val => "typeoids",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["oid"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "=",
                                token_val => "=",
                                val => "oid",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => ";",
                  token_val => ";",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["typeoids", "typoid"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1753",
                                token => ";",
                                token_val => ";",
                                val => "typeoids",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
do {
  my $a = {
    UpdateStmt => {
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "typeoids",
                         },
                         relname => "typeoids",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      relation    => bless({
                       alias          => undef,
                       catalogname    => undef,
                       inhOpt         => "DEFAULT",
                       location       => {
                                           char_pos => undef,
                                           left_side => "qualified_name",
                                           right_side => ["stmtmulti"],
                                           rule_name => "qualified_name_1778",
                                           token => "SET",
                                           token_val => "SET",
                                           val => "pg_catalog",
                                         },
                       relname        => "pg_type",
                       relpersistence => "\"p\"",
                       schemaname     => "pg_catalog",
                     }, "SQL::Translator::Statement::RangeVar"),
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "set_target",
                           right_side => ["stmtmulti"],
                           rule_name => "set_target_1251",
                           token => "=",
                           token_val => "=",
                           val => "typcollation",
                         },
                         name => "typcollation",
                         val => bless({
                           location => {
                             char_pos => undef,
                             left_side => "AexprConst",
                             right_side => ["stmtmulti"],
                             rule_name => "AexprConst_1789",
                             token => undef,
                             token_val => undef,
                             val => 100,
                           },
                           type => "Integer",
                           val => 100,
                         }, "SQL::Translator::Statement::A_Const"),
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["oid"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "=",
                                                   token_val => "=",
                                                   val => "oid",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1506",
                                     token => ";",
                                     token_val => ";",
                                     val => "=",
                                   },
                       name     => ["="],
                       rexpr    => bless({
                                     fields   => ["typeoids", "typoid"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1753",
                                                   token => ";",
                                                   token_val => ";",
                                                   val => "typeoids",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                     }, "SQL::Translator::Statement::A_Expr"),
      withClause  => bless({
                       ctes => [
                         bless({
                           aliascolnames => ["typoid"],
                           ctename       => "typeoids",
                           ctequery      => bless({
                                              all  => 0,
                                              larg => bless({
                                                        targetList => [
                                                          bless({
                                                            location => {
                                                              char_pos => undef,
                                                              left_side => "target_el",
                                                              right_side => ["stmtmulti"],
                                                              rule_name => "target_el_1773",
                                                              token => "UNION",
                                                              token_val => "UNION",
                                                              val => bless({
                                                                arg => bless({
                                                                  location => {
                                                                    char_pos => undef,
                                                                    left_side => "AexprConst",
                                                                    right_side => ["stmtmulti"],
                                                                    rule_name => "AexprConst_1791",
                                                                    token => undef,
                                                                    token_val => undef,
                                                                    val => "citext",
                                                                  },
                                                                  type => "String",
                                                                  val => "citext",
                                                                }, "SQL::Translator::Statement::A_Const"),
                                                                location => {
                                                                  char_pos => undef,
                                                                  left_side => "a_expr",
                                                                  right_side => ["stmtmulti", ";", "stmt"],
                                                                  rule_name => "a_expr_1493",
                                                                  token => "UNION",
                                                                  token_val => "UNION",
                                                                  val => "::",
                                                                },
                                                                typeName => bless({
                                                                  arrayBounds => undef,
                                                                  location    => {
                                                                                   char_pos => undef,
                                                                                   left_side => "GenericType",
                                                                                   right_side => ["stmtmulti"],
                                                                                   rule_name => "GenericType_1430",
                                                                                   token => "UNION",
                                                                                   token_val => "UNION",
                                                                                   val => "pg_catalog",
                                                                                 },
                                                                  names       => ["regtype", "pg_catalog"],
                                                                  typemod     => -1,
                                                                  typmods     => undef,
                                                                }, "SQL::Translator::Statement::TypeName"),
                                                              }, "SQL::Translator::Statement::TypeCast"),
                                                            },
                                                            val => 'fix',
                                                          }, "SQL::Translator::Statement::ResultTarget"),
                                                        ],
                                                      }, "SQL::Translator::Statement::Select"),
                                              op   => "UNION",
                                              rarg => bless({
                                                        fromClause  => [
                                                                         bless({
                                                                           alias          => undef,
                                                                           catalogname    => undef,
                                                                           inhOpt         => "DEFAULT",
                                                                           location       => {
                                                                                               char_pos => undef,
                                                                                               left_side => "qualified_name",
                                                                                               right_side => ["stmtmulti"],
                                                                                               rule_name => "qualified_name_1778",
                                                                                               token => ",",
                                                                                               token_val => ",",
                                                                                               val => "pg_catalog",
                                                                                             },
                                                                           relname        => "pg_type",
                                                                           relpersistence => "\"p\"",
                                                                           schemaname     => "pg_catalog",
                                                                         }, "SQL::Translator::Statement::RangeVar"),
                                                                         bless({
                                                                           alias => undef,
                                                                           inhOpt => "DEFAULT",
                                                                           location => {
                                                                             char_pos => undef,
                                                                             left_side => "qualified_name",
                                                                             right_side => ["stmtmulti"],
                                                                             rule_name => "qualified_name_1777",
                                                                             token => "WHERE",
                                                                             token_val => "WHERE",
                                                                             val => "typeoids",
                                                                           },
                                                                           relname => "typeoids",
                                                                           relpersistence => "\"p\"",
                                                                         }, "SQL::Translator::Statement::RangeVar"),
                                                                       ],
                                                        targetList  => [
                                                                         bless({
                                                                           location => {
                                                                             char_pos => undef,
                                                                             left_side => "target_el",
                                                                             right_side => ["stmtmulti"],
                                                                             rule_name => "target_el_1773",
                                                                             token => "FROM",
                                                                             token_val => "FROM",
                                                                             val => bless({
                                                                               fields   => ["oid"],
                                                                               location => {
                                                                                             char_pos => undef,
                                                                                             left_side => "columnref",
                                                                                             right_side => ["stmtmulti"],
                                                                                             rule_name => "columnref_1752",
                                                                                             token => "FROM",
                                                                                             token_val => "FROM",
                                                                                             val => "oid",
                                                                                           },
                                                                             }, "SQL::Translator::Statement::Column::Reference"),
                                                                           },
                                                                           val => 'fix',
                                                                         }, "SQL::Translator::Statement::ResultTarget"),
                                                                       ],
                                                        whereClause => bless({
                                                                         kind     => "OR",
                                                                         lexpr    => bless({
                                                                                       kind     => "OP",
                                                                                       lexpr    => bless({
                                                                                                     fields   => ["typelem"],
                                                                                                     location => {
                                                                                                                   char_pos => undef,
                                                                                                                   left_side => "columnref",
                                                                                                                   right_side => ["stmtmulti"],
                                                                                                                   rule_name => "columnref_1752",
                                                                                                                   token => "=",
                                                                                                                   token_val => "=",
                                                                                                                   val => "typelem",
                                                                                                                 },
                                                                                                   }, "SQL::Translator::Statement::Column::Reference"),
                                                                                       location => {
                                                                                                     char_pos => undef,
                                                                                                     left_side => "a_expr",
                                                                                                     right_side => ["stmtmulti", ";", "stmt"],
                                                                                                     rule_name => "a_expr_1506",
                                                                                                     token => "OR",
                                                                                                     token_val => "OR",
                                                                                                     val => "=",
                                                                                                   },
                                                                                       name     => ["="],
                                                                                       rexpr    => bless({
                                                                                                     fields   => ["typoid"],
                                                                                                     location => {
                                                                                                                   char_pos => undef,
                                                                                                                   left_side => "columnref",
                                                                                                                   right_side => ["stmtmulti"],
                                                                                                                   rule_name => "columnref_1752",
                                                                                                                   token => "OR",
                                                                                                                   token_val => "OR",
                                                                                                                   val => "typoid",
                                                                                                                 },
                                                                                                   }, "SQL::Translator::Statement::Column::Reference"),
                                                                                     }, "SQL::Translator::Statement::A_Expr"),
                                                                         location => {
                                                                                       char_pos => undef,
                                                                                       left_side => "a_expr",
                                                                                       right_side => ["stmtmulti", ";", "stmt"],
                                                                                       rule_name => "a_expr_1511",
                                                                                       token => ")",
                                                                                       token_val => ")",
                                                                                       val => "OR",
                                                                                     },
                                                                         rexpr    => bless({
                                                                                       kind     => "OP",
                                                                                       lexpr    => bless({
                                                                                                     fields   => ["typbasetype"],
                                                                                                     location => {
                                                                                                                   char_pos => undef,
                                                                                                                   left_side => "columnref",
                                                                                                                   right_side => ["stmtmulti"],
                                                                                                                   rule_name => "columnref_1752",
                                                                                                                   token => "=",
                                                                                                                   token_val => "=",
                                                                                                                   val => "typbasetype",
                                                                                                                 },
                                                                                                   }, "SQL::Translator::Statement::Column::Reference"),
                                                                                       location => {
                                                                                                     char_pos => undef,
                                                                                                     left_side => "a_expr",
                                                                                                     right_side => ["stmtmulti", ";", "stmt"],
                                                                                                     rule_name => "a_expr_1506",
                                                                                                     token => ")",
                                                                                                     token_val => ")",
                                                                                                     val => "=",
                                                                                                   },
                                                                                       name     => ["="],
                                                                                       rexpr    => bless({
                                                                                                     fields   => ["typoid"],
                                                                                                     location => {
                                                                                                                   char_pos => undef,
                                                                                                                   left_side => "columnref",
                                                                                                                   right_side => ["stmtmulti"],
                                                                                                                   rule_name => "columnref_1752",
                                                                                                                   token => ")",
                                                                                                                   token_val => ")",
                                                                                                                   val => "typoid",
                                                                                                                 },
                                                                                                   }, "SQL::Translator::Statement::Column::Reference"),
                                                                                     }, "SQL::Translator::Statement::A_Expr"),
                                                                       }, "SQL::Translator::Statement::A_Expr"),
                                                      }, "SQL::Translator::Statement::Select"),
                                            }, "SQL::Translator::Statement::Select"),
                           location      => {
                                              char_pos => undef,
                                              left_side => "common_table_expr",
                                              right_side => ["stmtmulti"],
                                              rule_name => "common_table_expr_1288",
                                              token => undef,
                                              token_val => undef,
                                              val => "typeoids",
                                            },
                         }, "SQL::Translator::Statement::CommonTableExpr"),
                       ],
                       location => {
                         char_pos => undef,
                         left_side => "with_clause",
                         right_side => ["stmtmulti"],
                         rule_name => "with_clause_1285",
                         token => "UPDATE",
                         token_val => "UPDATE",
                         val => "WITH",
                       },
                       recursive => 1,
                     }, "SQL::Translator::Statement::WithClause"),
    },
  };
  $a->{UpdateStmt}{withClause}{ctes}[0]{ctequery}{larg}{targetList}[0]{val} = $a->{UpdateStmt}{withClause}{ctes}[0]{ctequery}{larg}{targetList}[0]{location}{val};
  $a->{UpdateStmt}{withClause}{ctes}[0]{ctequery}{rarg}{targetList}[0]{val} = $a->{UpdateStmt}{withClause}{ctes}[0]{ctequery}{rarg}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6580 ('

UPDATE pg_catalog.pg_index SET indcollation[7] =')
---GOTMATCH: identifier
---ENDTOKEN: UPDATE, UPDATE
---STARTSTATE: INITIAL @ 6588 (' pg_catalog.pg_index SET indcollation[7] = 100')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 6599 ('.pg_index SET indcollation[7] = 100')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 6600 ('pg_index SET indcollation[7] = 100')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_index
---STARTSTATE: INITIAL @ 6608 (' SET indcollation[7] = 100')
---GOTMATCH: identifier
---ENDTOKEN: SET, SET
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1778",
      token => "SET",
      token_val => "SET",
      val => "pg_catalog",
    },
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6612 (' indcollation[7] = 100')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, indcollation
---STARTSTATE: INITIAL @ 6625 ('[7] = 100')
---GOTMATCH: self
---ENDTOKEN: [, [
---STARTSTATE: INITIAL @ 6626 ('7] = 100')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 7
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1789",
      token => undef,
      token_val => undef,
      val => 7,
    },
    type => "Integer",
    val => 7,
  },
}
---STARTSTATE: INITIAL @ 6627 ('] = 100')
---GOTMATCH: self
---ENDTOKEN: ], ]
{
  A_Indices => {
    uidx => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1789",
        token => undef,
        token_val => undef,
        val => 7,
      },
      type => "Integer",
      val => 7,
    }, "SQL::Translator::Statement::A_Const"),
  },
}
---STARTSTATE: INITIAL @ 6628 (' = 100')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ResultTarget => {
    indirection => [
      undef,
      bless({
        uidx => bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1789",
            token => undef,
            token_val => undef,
            val => 7,
          },
          type => "Integer",
          val => 7,
        }, "SQL::Translator::Statement::A_Const"),
      }, "SQL::Translator::Statement::A_Indices"),
    ],
    location => {
      char_pos => undef,
      left_side => "set_target",
      right_side => ["stmtmulti"],
      rule_name => "set_target_1251",
      token => "=",
      token_val => "=",
      val => "indcollation",
    },
    name => "indcollation",
  },
}
---STARTSTATE: INITIAL @ 6630 (' 100')
---GOTMATCH: integer
---ENDTOKEN: ICONST, 100
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1789",
      token => undef,
      token_val => undef,
      val => 100,
    },
    type => "Integer",
    val => 100,
  },
}
---STARTSTATE: INITIAL @ 6634 ('
WHERE indclass[7] IN (
  WITH RECURSIVE typeoids(')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
---STARTSTATE: INITIAL @ 6640 (' indclass[7] IN (')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, indclass
---STARTSTATE: INITIAL @ 6649 ('[7] IN (')
---GOTMATCH: self
---ENDTOKEN: [, [
---STARTSTATE: INITIAL @ 6650 ('7] IN (')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 7
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1789",
      token => undef,
      token_val => undef,
      val => 7,
    },
    type => "Integer",
    val => 7,
  },
}
---STARTSTATE: INITIAL @ 6651 ('] IN (')
---GOTMATCH: self
---ENDTOKEN: ], ]
{
  A_Indices => {
    uidx => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1789",
        token => undef,
        token_val => undef,
        val => 7,
      },
      type => "Integer",
      val => 7,
    }, "SQL::Translator::Statement::A_Const"),
  },
}
---STARTSTATE: INITIAL @ 6652 (' IN (')
---GOTMATCH: identifier
---ENDTOKEN: IN, IN
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1753",
      token => "IN",
      token_val => "IN",
      val => "indclass",
    },
  },
}
{ A_Indirection => {} }
---STARTSTATE: INITIAL @ 6655 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 6657 ('
  WITH RECURSIVE typeoids(typoid) AS
    ( SELECT')
---GOTMATCH: identifier
---STARTSTATE: INITIAL @ 6664 (' RECURSIVE typeoids(typoid) AS')
---GOTMATCH: identifier
---ENDTOKEN: WITH, WITH
---ENDTOKEN: RECURSIVE, RECURSIVE
---STARTSTATE: INITIAL @ 6674 (' typeoids(typoid) AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typeoids
---STARTSTATE: INITIAL @ 6683 ('(typoid) AS')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 6684 ('typoid) AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typoid
---STARTSTATE: INITIAL @ 6690 (') AS')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 6691 (' AS')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 6694 ('
    ( SELECT 'citext'::pg_catalog.regtype UNION
 ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 6700 (' SELECT 'citext'::pg_catalog.regtype UNION')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 6707 (' 'citext'::pg_catalog.regtype UNION')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 6709 ('citext'::pg_catalog.regtype UNION')
---ENDTOKEN: SCONST, citext
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "citext",
    },
    type => "String",
    val => "citext",
  },
}
---STARTSTATE: INITIAL @ 6716 ('::pg_catalog.regtype UNION')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 6718 ('pg_catalog.regtype UNION')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 6728 ('.regtype UNION')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 6729 ('regtype UNION')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, regtype
---STARTSTATE: INITIAL @ 6736 (' UNION')
---GOTMATCH: identifier
---ENDTOKEN: UNION, UNION
{
  TypeName => { names => ["regtype", "pg_catalog"], typemod => -1 },
}
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "citext",
      },
      type => "String",
      val => "citext",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => "UNION",
      token_val => "UNION",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1430",
                       token => "UNION",
                       token_val => "UNION",
                       val => "pg_catalog",
                     },
      names       => ["regtype", "pg_catalog"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => "UNION",
        token_val => "UNION",
        val => bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "citext",
            },
            type => "String",
            val => "citext",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => "UNION",
            token_val => "UNION",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1430",
                             token => "UNION",
                             token_val => "UNION",
                             val => "pg_catalog",
                           },
            names       => ["regtype", "pg_catalog"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1773",
            token => "UNION",
            token_val => "UNION",
            val => bless({
              arg => bless({
                location => {
                  char_pos => undef,
                  left_side => "AexprConst",
                  right_side => ["stmtmulti"],
                  rule_name => "AexprConst_1791",
                  token => undef,
                  token_val => undef,
                  val => "citext",
                },
                type => "String",
                val => "citext",
              }, "SQL::Translator::Statement::A_Const"),
              location => {
                char_pos => undef,
                left_side => "a_expr",
                right_side => ["stmtmulti", ";", "stmt"],
                rule_name => "a_expr_1493",
                token => "UNION",
                token_val => "UNION",
                val => "::",
              },
              typeName => bless({
                arrayBounds => undef,
                location    => {
                                 char_pos => undef,
                                 left_side => "GenericType",
                                 right_side => ["stmtmulti"],
                                 rule_name => "GenericType_1430",
                                 token => "UNION",
                                 token_val => "UNION",
                                 val => "pg_catalog",
                               },
                names       => ["regtype", "pg_catalog"],
                typemod     => -1,
                typmods     => undef,
              }, "SQL::Translator::Statement::TypeName"),
            }, "SQL::Translator::Statement::TypeCast"),
          },
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6742 ('
      SELECT oid FROM pg_catalog.pg_type, typeoid')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 6755 (' oid FROM pg_catalog.pg_type, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 6759 (' FROM pg_catalog.pg_type, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "FROM",
      token_val => "FROM",
      val => "oid",
    },
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => "FROM",
        token_val => "FROM",
        val => bless({
          fields   => ["oid"],
          location => {
                        char_pos => undef,
                        left_side => "columnref",
                        right_side => ["stmtmulti"],
                        rule_name => "columnref_1752",
                        token => "FROM",
                        token_val => "FROM",
                        val => "oid",
                      },
        }, "SQL::Translator::Statement::Column::Reference"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6764 (' pg_catalog.pg_type, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 6775 ('.pg_type, typeoids')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 6776 ('pg_type, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_type
---STARTSTATE: INITIAL @ 6783 (', typeoids')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1778",
      token => ",",
      token_val => ",",
      val => "pg_catalog",
    },
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6784 (' typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typeoids
---STARTSTATE: INITIAL @ 6793 ('
        WHERE typelem = typoid OR typbasetype = t')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "typeoids",
    },
    relname => "typeoids",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6807 (' typelem = typoid OR typbasetype = typoid )')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typelem
---STARTSTATE: INITIAL @ 6815 (' = typoid OR typbasetype = typoid )')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "=",
      token_val => "=",
      val => "typelem",
    },
  },
}
---STARTSTATE: INITIAL @ 6817 (' typoid OR typbasetype = typoid )')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typoid
---STARTSTATE: INITIAL @ 6824 (' OR typbasetype = typoid )')
---GOTMATCH: identifier
---ENDTOKEN: OR, OR
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "OR",
      token_val => "OR",
      val => "typoid",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["typelem"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "=",
                                token_val => "=",
                                val => "typelem",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => "OR",
                  token_val => "OR",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["typoid"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "OR",
                                token_val => "OR",
                                val => "typoid",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 6827 (' typbasetype = typoid )')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typbasetype
---STARTSTATE: INITIAL @ 6839 (' = typoid )')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "=",
      token_val => "=",
      val => "typbasetype",
    },
  },
}
---STARTSTATE: INITIAL @ 6841 (' typoid )')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typoid
---STARTSTATE: INITIAL @ 6848 (' )')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => ")",
      token_val => ")",
      val => "typoid",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["typbasetype"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "=",
                                token_val => "=",
                                val => "typbasetype",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => ")",
                  token_val => ")",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["typoid"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => ")",
                                token_val => ")",
                                val => "typoid",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
{
  A_Expr => {
    kind     => "OR",
    lexpr    => bless({
                  kind     => "OP",
                  lexpr    => bless({
                                fields   => ["typelem"],
                                location => {
                                              char_pos => undef,
                                              left_side => "columnref",
                                              right_side => ["stmtmulti"],
                                              rule_name => "columnref_1752",
                                              token => "=",
                                              token_val => "=",
                                              val => "typelem",
                                            },
                              }, "SQL::Translator::Statement::Column::Reference"),
                  location => {
                                char_pos => undef,
                                left_side => "a_expr",
                                right_side => ["stmtmulti", ";", "stmt"],
                                rule_name => "a_expr_1506",
                                token => "OR",
                                token_val => "OR",
                                val => "=",
                              },
                  name     => ["="],
                  rexpr    => bless({
                                fields   => ["typoid"],
                                location => {
                                              char_pos => undef,
                                              left_side => "columnref",
                                              right_side => ["stmtmulti"],
                                              rule_name => "columnref_1752",
                                              token => "OR",
                                              token_val => "OR",
                                              val => "typoid",
                                            },
                              }, "SQL::Translator::Statement::Column::Reference"),
                }, "SQL::Translator::Statement::A_Expr"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1511",
                  token => ")",
                  token_val => ")",
                  val => "OR",
                },
    rexpr    => bless({
                  kind     => "OP",
                  lexpr    => bless({
                                fields   => ["typbasetype"],
                                location => {
                                              char_pos => undef,
                                              left_side => "columnref",
                                              right_side => ["stmtmulti"],
                                              rule_name => "columnref_1752",
                                              token => "=",
                                              token_val => "=",
                                              val => "typbasetype",
                                            },
                              }, "SQL::Translator::Statement::Column::Reference"),
                  location => {
                                char_pos => undef,
                                left_side => "a_expr",
                                right_side => ["stmtmulti", ";", "stmt"],
                                rule_name => "a_expr_1506",
                                token => ")",
                                token_val => ")",
                                val => "=",
                              },
                  name     => ["="],
                  rexpr    => bless({
                                fields   => ["typoid"],
                                location => {
                                              char_pos => undef,
                                              left_side => "columnref",
                                              right_side => ["stmtmulti"],
                                              rule_name => "columnref_1752",
                                              token => ")",
                                              token_val => ")",
                                              val => "typoid",
                                            },
                              }, "SQL::Translator::Statement::Column::Reference"),
                }, "SQL::Translator::Statement::A_Expr"),
  },
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias          => undef,
                         catalogname    => undef,
                         inhOpt         => "DEFAULT",
                         location       => {
                                             char_pos => undef,
                                             left_side => "qualified_name",
                                             right_side => ["stmtmulti"],
                                             rule_name => "qualified_name_1778",
                                             token => ",",
                                             token_val => ",",
                                             val => "pg_catalog",
                                           },
                         relname        => "pg_type",
                         relpersistence => "\"p\"",
                         schemaname     => "pg_catalog",
                       }, "SQL::Translator::Statement::RangeVar"),
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "typeoids",
                         },
                         relname => "typeoids",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => "FROM",
                           token_val => "FROM",
                           val => bless({
                             fields   => ["oid"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => "FROM",
                                           token_val => "FROM",
                                           val => "oid",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OR",
                       lexpr    => bless({
                                     kind     => "OP",
                                     lexpr    => bless({
                                                   fields   => ["typelem"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => "=",
                                                                 token_val => "=",
                                                                 val => "typelem",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "a_expr",
                                                   right_side => ["stmtmulti", ";", "stmt"],
                                                   rule_name => "a_expr_1506",
                                                   token => "OR",
                                                   token_val => "OR",
                                                   val => "=",
                                                 },
                                     name     => ["="],
                                     rexpr    => bless({
                                                   fields   => ["typoid"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => "OR",
                                                                 token_val => "OR",
                                                                 val => "typoid",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                   }, "SQL::Translator::Statement::A_Expr"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1511",
                                     token => ")",
                                     token_val => ")",
                                     val => "OR",
                                   },
                       rexpr    => bless({
                                     kind     => "OP",
                                     lexpr    => bless({
                                                   fields   => ["typbasetype"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => "=",
                                                                 token_val => "=",
                                                                 val => "typbasetype",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "a_expr",
                                                   right_side => ["stmtmulti", ";", "stmt"],
                                                   rule_name => "a_expr_1506",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "=",
                                                 },
                                     name     => ["="],
                                     rexpr    => bless({
                                                   fields   => ["typoid"],
                                                   location => {
                                                                 char_pos => undef,
                                                                 left_side => "columnref",
                                                                 right_side => ["stmtmulti"],
                                                                 rule_name => "columnref_1752",
                                                                 token => ")",
                                                                 token_val => ")",
                                                                 val => "typoid",
                                                               },
                                                 }, "SQL::Translator::Statement::Column::Reference"),
                                   }, "SQL::Translator::Statement::A_Expr"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      all  => 0,
      larg => bless({
                targetList => [
                  bless({
                    location => {
                      char_pos => undef,
                      left_side => "target_el",
                      right_side => ["stmtmulti"],
                      rule_name => "target_el_1773",
                      token => "UNION",
                      token_val => "UNION",
                      val => bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "citext",
                          },
                          type => "String",
                          val => "citext",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => "UNION",
                          token_val => "UNION",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1430",
                                           token => "UNION",
                                           token_val => "UNION",
                                           val => "pg_catalog",
                                         },
                          names       => ["regtype", "pg_catalog"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                    },
                    val => 'fix',
                  }, "SQL::Translator::Statement::ResultTarget"),
                ],
              }, "SQL::Translator::Statement::Select"),
      op   => "UNION",
      rarg => bless({
                fromClause  => [
                                 bless({
                                   alias          => undef,
                                   catalogname    => undef,
                                   inhOpt         => "DEFAULT",
                                   location       => {
                                                       char_pos => undef,
                                                       left_side => "qualified_name",
                                                       right_side => ["stmtmulti"],
                                                       rule_name => "qualified_name_1778",
                                                       token => ",",
                                                       token_val => ",",
                                                       val => "pg_catalog",
                                                     },
                                   relname        => "pg_type",
                                   relpersistence => "\"p\"",
                                   schemaname     => "pg_catalog",
                                 }, "SQL::Translator::Statement::RangeVar"),
                                 bless({
                                   alias => undef,
                                   inhOpt => "DEFAULT",
                                   location => {
                                     char_pos => undef,
                                     left_side => "qualified_name",
                                     right_side => ["stmtmulti"],
                                     rule_name => "qualified_name_1777",
                                     token => "WHERE",
                                     token_val => "WHERE",
                                     val => "typeoids",
                                   },
                                   relname => "typeoids",
                                   relpersistence => "\"p\"",
                                 }, "SQL::Translator::Statement::RangeVar"),
                               ],
                targetList  => [
                                 bless({
                                   location => {
                                     char_pos => undef,
                                     left_side => "target_el",
                                     right_side => ["stmtmulti"],
                                     rule_name => "target_el_1773",
                                     token => "FROM",
                                     token_val => "FROM",
                                     val => bless({
                                       fields   => ["oid"],
                                       location => {
                                                     char_pos => undef,
                                                     left_side => "columnref",
                                                     right_side => ["stmtmulti"],
                                                     rule_name => "columnref_1752",
                                                     token => "FROM",
                                                     token_val => "FROM",
                                                     val => "oid",
                                                   },
                                     }, "SQL::Translator::Statement::Column::Reference"),
                                   },
                                   val => 'fix',
                                 }, "SQL::Translator::Statement::ResultTarget"),
                               ],
                whereClause => bless({
                                 kind     => "OR",
                                 lexpr    => bless({
                                               kind     => "OP",
                                               lexpr    => bless({
                                                             fields   => ["typelem"],
                                                             location => {
                                                                           char_pos => undef,
                                                                           left_side => "columnref",
                                                                           right_side => ["stmtmulti"],
                                                                           rule_name => "columnref_1752",
                                                                           token => "=",
                                                                           token_val => "=",
                                                                           val => "typelem",
                                                                         },
                                                           }, "SQL::Translator::Statement::Column::Reference"),
                                               location => {
                                                             char_pos => undef,
                                                             left_side => "a_expr",
                                                             right_side => ["stmtmulti", ";", "stmt"],
                                                             rule_name => "a_expr_1506",
                                                             token => "OR",
                                                             token_val => "OR",
                                                             val => "=",
                                                           },
                                               name     => ["="],
                                               rexpr    => bless({
                                                             fields   => ["typoid"],
                                                             location => {
                                                                           char_pos => undef,
                                                                           left_side => "columnref",
                                                                           right_side => ["stmtmulti"],
                                                                           rule_name => "columnref_1752",
                                                                           token => "OR",
                                                                           token_val => "OR",
                                                                           val => "typoid",
                                                                         },
                                                           }, "SQL::Translator::Statement::Column::Reference"),
                                             }, "SQL::Translator::Statement::A_Expr"),
                                 location => {
                                               char_pos => undef,
                                               left_side => "a_expr",
                                               right_side => ["stmtmulti", ";", "stmt"],
                                               rule_name => "a_expr_1511",
                                               token => ")",
                                               token_val => ")",
                                               val => "OR",
                                             },
                                 rexpr    => bless({
                                               kind     => "OP",
                                               lexpr    => bless({
                                                             fields   => ["typbasetype"],
                                                             location => {
                                                                           char_pos => undef,
                                                                           left_side => "columnref",
                                                                           right_side => ["stmtmulti"],
                                                                           rule_name => "columnref_1752",
                                                                           token => "=",
                                                                           token_val => "=",
                                                                           val => "typbasetype",
                                                                         },
                                                           }, "SQL::Translator::Statement::Column::Reference"),
                                               location => {
                                                             char_pos => undef,
                                                             left_side => "a_expr",
                                                             right_side => ["stmtmulti", ";", "stmt"],
                                                             rule_name => "a_expr_1506",
                                                             token => ")",
                                                             token_val => ")",
                                                             val => "=",
                                                           },
                                               name     => ["="],
                                               rexpr    => bless({
                                                             fields   => ["typoid"],
                                                             location => {
                                                                           char_pos => undef,
                                                                           left_side => "columnref",
                                                                           right_side => ["stmtmulti"],
                                                                           rule_name => "columnref_1752",
                                                                           token => ")",
                                                                           token_val => ")",
                                                                           val => "typoid",
                                                                         },
                                                           }, "SQL::Translator::Statement::Column::Reference"),
                                             }, "SQL::Translator::Statement::A_Expr"),
                               }, "SQL::Translator::Statement::A_Expr"),
              }, "SQL::Translator::Statement::Select"),
    },
  };
  $a->{SelectStmt}{larg}{targetList}[0]{val} = $a->{SelectStmt}{larg}{targetList}[0]{location}{val};
  $a->{SelectStmt}{rarg}{targetList}[0]{val} = $a->{SelectStmt}{rarg}{targetList}[0]{location}{val};
  $a;
}
do {
  my $a = {
    CommonTableExpr => {
      aliascolnames => ["typoid"],
      ctename       => "typeoids",
      ctequery      => bless({
                         all  => 0,
                         larg => bless({
                                   targetList => [
                                     bless({
                                       location => {
                                         char_pos => undef,
                                         left_side => "target_el",
                                         right_side => ["stmtmulti"],
                                         rule_name => "target_el_1773",
                                         token => "UNION",
                                         token_val => "UNION",
                                         val => bless({
                                           arg => bless({
                                             location => {
                                               char_pos => undef,
                                               left_side => "AexprConst",
                                               right_side => ["stmtmulti"],
                                               rule_name => "AexprConst_1791",
                                               token => undef,
                                               token_val => undef,
                                               val => "citext",
                                             },
                                             type => "String",
                                             val => "citext",
                                           }, "SQL::Translator::Statement::A_Const"),
                                           location => {
                                             char_pos => undef,
                                             left_side => "a_expr",
                                             right_side => ["stmtmulti", ";", "stmt"],
                                             rule_name => "a_expr_1493",
                                             token => "UNION",
                                             token_val => "UNION",
                                             val => "::",
                                           },
                                           typeName => bless({
                                             arrayBounds => undef,
                                             location    => {
                                                              char_pos => undef,
                                                              left_side => "GenericType",
                                                              right_side => ["stmtmulti"],
                                                              rule_name => "GenericType_1430",
                                                              token => "UNION",
                                                              token_val => "UNION",
                                                              val => "pg_catalog",
                                                            },
                                             names       => ["regtype", "pg_catalog"],
                                             typemod     => -1,
                                             typmods     => undef,
                                           }, "SQL::Translator::Statement::TypeName"),
                                         }, "SQL::Translator::Statement::TypeCast"),
                                       },
                                       val => 'fix',
                                     }, "SQL::Translator::Statement::ResultTarget"),
                                   ],
                                 }, "SQL::Translator::Statement::Select"),
                         op   => "UNION",
                         rarg => bless({
                                   fromClause  => [
                                                    bless({
                                                      alias          => undef,
                                                      catalogname    => undef,
                                                      inhOpt         => "DEFAULT",
                                                      location       => {
                                                                          char_pos => undef,
                                                                          left_side => "qualified_name",
                                                                          right_side => ["stmtmulti"],
                                                                          rule_name => "qualified_name_1778",
                                                                          token => ",",
                                                                          token_val => ",",
                                                                          val => "pg_catalog",
                                                                        },
                                                      relname        => "pg_type",
                                                      relpersistence => "\"p\"",
                                                      schemaname     => "pg_catalog",
                                                    }, "SQL::Translator::Statement::RangeVar"),
                                                    bless({
                                                      alias => undef,
                                                      inhOpt => "DEFAULT",
                                                      location => {
                                                        char_pos => undef,
                                                        left_side => "qualified_name",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "qualified_name_1777",
                                                        token => "WHERE",
                                                        token_val => "WHERE",
                                                        val => "typeoids",
                                                      },
                                                      relname => "typeoids",
                                                      relpersistence => "\"p\"",
                                                    }, "SQL::Translator::Statement::RangeVar"),
                                                  ],
                                   targetList  => [
                                                    bless({
                                                      location => {
                                                        char_pos => undef,
                                                        left_side => "target_el",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "target_el_1773",
                                                        token => "FROM",
                                                        token_val => "FROM",
                                                        val => bless({
                                                          fields   => ["oid"],
                                                          location => {
                                                                        char_pos => undef,
                                                                        left_side => "columnref",
                                                                        right_side => ["stmtmulti"],
                                                                        rule_name => "columnref_1752",
                                                                        token => "FROM",
                                                                        token_val => "FROM",
                                                                        val => "oid",
                                                                      },
                                                        }, "SQL::Translator::Statement::Column::Reference"),
                                                      },
                                                      val => 'fix',
                                                    }, "SQL::Translator::Statement::ResultTarget"),
                                                  ],
                                   whereClause => bless({
                                                    kind     => "OR",
                                                    lexpr    => bless({
                                                                  kind     => "OP",
                                                                  lexpr    => bless({
                                                                                fields   => ["typelem"],
                                                                                location => {
                                                                                              char_pos => undef,
                                                                                              left_side => "columnref",
                                                                                              right_side => ["stmtmulti"],
                                                                                              rule_name => "columnref_1752",
                                                                                              token => "=",
                                                                                              token_val => "=",
                                                                                              val => "typelem",
                                                                                            },
                                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                                  location => {
                                                                                char_pos => undef,
                                                                                left_side => "a_expr",
                                                                                right_side => ["stmtmulti", ";", "stmt"],
                                                                                rule_name => "a_expr_1506",
                                                                                token => "OR",
                                                                                token_val => "OR",
                                                                                val => "=",
                                                                              },
                                                                  name     => ["="],
                                                                  rexpr    => bless({
                                                                                fields   => ["typoid"],
                                                                                location => {
                                                                                              char_pos => undef,
                                                                                              left_side => "columnref",
                                                                                              right_side => ["stmtmulti"],
                                                                                              rule_name => "columnref_1752",
                                                                                              token => "OR",
                                                                                              token_val => "OR",
                                                                                              val => "typoid",
                                                                                            },
                                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                                }, "SQL::Translator::Statement::A_Expr"),
                                                    location => {
                                                                  char_pos => undef,
                                                                  left_side => "a_expr",
                                                                  right_side => ["stmtmulti", ";", "stmt"],
                                                                  rule_name => "a_expr_1511",
                                                                  token => ")",
                                                                  token_val => ")",
                                                                  val => "OR",
                                                                },
                                                    rexpr    => bless({
                                                                  kind     => "OP",
                                                                  lexpr    => bless({
                                                                                fields   => ["typbasetype"],
                                                                                location => {
                                                                                              char_pos => undef,
                                                                                              left_side => "columnref",
                                                                                              right_side => ["stmtmulti"],
                                                                                              rule_name => "columnref_1752",
                                                                                              token => "=",
                                                                                              token_val => "=",
                                                                                              val => "typbasetype",
                                                                                            },
                                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                                  location => {
                                                                                char_pos => undef,
                                                                                left_side => "a_expr",
                                                                                right_side => ["stmtmulti", ";", "stmt"],
                                                                                rule_name => "a_expr_1506",
                                                                                token => ")",
                                                                                token_val => ")",
                                                                                val => "=",
                                                                              },
                                                                  name     => ["="],
                                                                  rexpr    => bless({
                                                                                fields   => ["typoid"],
                                                                                location => {
                                                                                              char_pos => undef,
                                                                                              left_side => "columnref",
                                                                                              right_side => ["stmtmulti"],
                                                                                              rule_name => "columnref_1752",
                                                                                              token => ")",
                                                                                              token_val => ")",
                                                                                              val => "typoid",
                                                                                            },
                                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                                }, "SQL::Translator::Statement::A_Expr"),
                                                  }, "SQL::Translator::Statement::A_Expr"),
                                 }, "SQL::Translator::Statement::Select"),
                       }, "SQL::Translator::Statement::Select"),
      location      => {
                         char_pos => undef,
                         left_side => "common_table_expr",
                         right_side => ["stmtmulti"],
                         rule_name => "common_table_expr_1288",
                         token => undef,
                         token_val => undef,
                         val => "typeoids",
                       },
    },
  };
  $a->{CommonTableExpr}{ctequery}{larg}{targetList}[0]{val} = $a->{CommonTableExpr}{ctequery}{larg}{targetList}[0]{location}{val};
  $a->{CommonTableExpr}{ctequery}{rarg}{targetList}[0]{val} = $a->{CommonTableExpr}{ctequery}{rarg}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6850 ('
  SELECT oid FROM pg_catalog.pg_opclass, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
do {
  my $a = {
    WithClause => {
      ctes => [
        bless({
          aliascolnames => ["typoid"],
          ctename       => "typeoids",
          ctequery      => bless({
                             all  => 0,
                             larg => bless({
                                       targetList => [
                                         bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "target_el",
                                             right_side => ["stmtmulti"],
                                             rule_name => "target_el_1773",
                                             token => "UNION",
                                             token_val => "UNION",
                                             val => bless({
                                               arg => bless({
                                                 location => {
                                                   char_pos => undef,
                                                   left_side => "AexprConst",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "AexprConst_1791",
                                                   token => undef,
                                                   token_val => undef,
                                                   val => "citext",
                                                 },
                                                 type => "String",
                                                 val => "citext",
                                               }, "SQL::Translator::Statement::A_Const"),
                                               location => {
                                                 char_pos => undef,
                                                 left_side => "a_expr",
                                                 right_side => ["stmtmulti", ";", "stmt"],
                                                 rule_name => "a_expr_1493",
                                                 token => "UNION",
                                                 token_val => "UNION",
                                                 val => "::",
                                               },
                                               typeName => bless({
                                                 arrayBounds => undef,
                                                 location    => {
                                                                  char_pos => undef,
                                                                  left_side => "GenericType",
                                                                  right_side => ["stmtmulti"],
                                                                  rule_name => "GenericType_1430",
                                                                  token => "UNION",
                                                                  token_val => "UNION",
                                                                  val => "pg_catalog",
                                                                },
                                                 names       => ["regtype", "pg_catalog"],
                                                 typemod     => -1,
                                                 typmods     => undef,
                                               }, "SQL::Translator::Statement::TypeName"),
                                             }, "SQL::Translator::Statement::TypeCast"),
                                           },
                                           val => 'fix',
                                         }, "SQL::Translator::Statement::ResultTarget"),
                                       ],
                                     }, "SQL::Translator::Statement::Select"),
                             op   => "UNION",
                             rarg => bless({
                                       fromClause  => [
                                                        bless({
                                                          alias          => undef,
                                                          catalogname    => undef,
                                                          inhOpt         => "DEFAULT",
                                                          location       => {
                                                                              char_pos => undef,
                                                                              left_side => "qualified_name",
                                                                              right_side => ["stmtmulti"],
                                                                              rule_name => "qualified_name_1778",
                                                                              token => ",",
                                                                              token_val => ",",
                                                                              val => "pg_catalog",
                                                                            },
                                                          relname        => "pg_type",
                                                          relpersistence => "\"p\"",
                                                          schemaname     => "pg_catalog",
                                                        }, "SQL::Translator::Statement::RangeVar"),
                                                        bless({
                                                          alias => undef,
                                                          inhOpt => "DEFAULT",
                                                          location => {
                                                            char_pos => undef,
                                                            left_side => "qualified_name",
                                                            right_side => ["stmtmulti"],
                                                            rule_name => "qualified_name_1777",
                                                            token => "WHERE",
                                                            token_val => "WHERE",
                                                            val => "typeoids",
                                                          },
                                                          relname => "typeoids",
                                                          relpersistence => "\"p\"",
                                                        }, "SQL::Translator::Statement::RangeVar"),
                                                      ],
                                       targetList  => [
                                                        bless({
                                                          location => {
                                                            char_pos => undef,
                                                            left_side => "target_el",
                                                            right_side => ["stmtmulti"],
                                                            rule_name => "target_el_1773",
                                                            token => "FROM",
                                                            token_val => "FROM",
                                                            val => bless({
                                                              fields   => ["oid"],
                                                              location => {
                                                                            char_pos => undef,
                                                                            left_side => "columnref",
                                                                            right_side => ["stmtmulti"],
                                                                            rule_name => "columnref_1752",
                                                                            token => "FROM",
                                                                            token_val => "FROM",
                                                                            val => "oid",
                                                                          },
                                                            }, "SQL::Translator::Statement::Column::Reference"),
                                                          },
                                                          val => 'fix',
                                                        }, "SQL::Translator::Statement::ResultTarget"),
                                                      ],
                                       whereClause => bless({
                                                        kind     => "OR",
                                                        lexpr    => bless({
                                                                      kind     => "OP",
                                                                      lexpr    => bless({
                                                                                    fields   => ["typelem"],
                                                                                    location => {
                                                                                                  char_pos => undef,
                                                                                                  left_side => "columnref",
                                                                                                  right_side => ["stmtmulti"],
                                                                                                  rule_name => "columnref_1752",
                                                                                                  token => "=",
                                                                                                  token_val => "=",
                                                                                                  val => "typelem",
                                                                                                },
                                                                                  }, "SQL::Translator::Statement::Column::Reference"),
                                                                      location => {
                                                                                    char_pos => undef,
                                                                                    left_side => "a_expr",
                                                                                    right_side => ["stmtmulti", ";", "stmt"],
                                                                                    rule_name => "a_expr_1506",
                                                                                    token => "OR",
                                                                                    token_val => "OR",
                                                                                    val => "=",
                                                                                  },
                                                                      name     => ["="],
                                                                      rexpr    => bless({
                                                                                    fields   => ["typoid"],
                                                                                    location => {
                                                                                                  char_pos => undef,
                                                                                                  left_side => "columnref",
                                                                                                  right_side => ["stmtmulti"],
                                                                                                  rule_name => "columnref_1752",
                                                                                                  token => "OR",
                                                                                                  token_val => "OR",
                                                                                                  val => "typoid",
                                                                                                },
                                                                                  }, "SQL::Translator::Statement::Column::Reference"),
                                                                    }, "SQL::Translator::Statement::A_Expr"),
                                                        location => {
                                                                      char_pos => undef,
                                                                      left_side => "a_expr",
                                                                      right_side => ["stmtmulti", ";", "stmt"],
                                                                      rule_name => "a_expr_1511",
                                                                      token => ")",
                                                                      token_val => ")",
                                                                      val => "OR",
                                                                    },
                                                        rexpr    => bless({
                                                                      kind     => "OP",
                                                                      lexpr    => bless({
                                                                                    fields   => ["typbasetype"],
                                                                                    location => {
                                                                                                  char_pos => undef,
                                                                                                  left_side => "columnref",
                                                                                                  right_side => ["stmtmulti"],
                                                                                                  rule_name => "columnref_1752",
                                                                                                  token => "=",
                                                                                                  token_val => "=",
                                                                                                  val => "typbasetype",
                                                                                                },
                                                                                  }, "SQL::Translator::Statement::Column::Reference"),
                                                                      location => {
                                                                                    char_pos => undef,
                                                                                    left_side => "a_expr",
                                                                                    right_side => ["stmtmulti", ";", "stmt"],
                                                                                    rule_name => "a_expr_1506",
                                                                                    token => ")",
                                                                                    token_val => ")",
                                                                                    val => "=",
                                                                                  },
                                                                      name     => ["="],
                                                                      rexpr    => bless({
                                                                                    fields   => ["typoid"],
                                                                                    location => {
                                                                                                  char_pos => undef,
                                                                                                  left_side => "columnref",
                                                                                                  right_side => ["stmtmulti"],
                                                                                                  rule_name => "columnref_1752",
                                                                                                  token => ")",
                                                                                                  token_val => ")",
                                                                                                  val => "typoid",
                                                                                                },
                                                                                  }, "SQL::Translator::Statement::Column::Reference"),
                                                                    }, "SQL::Translator::Statement::A_Expr"),
                                                      }, "SQL::Translator::Statement::A_Expr"),
                                     }, "SQL::Translator::Statement::Select"),
                           }, "SQL::Translator::Statement::Select"),
          location      => {
                             char_pos => undef,
                             left_side => "common_table_expr",
                             right_side => ["stmtmulti"],
                             rule_name => "common_table_expr_1288",
                             token => undef,
                             token_val => undef,
                             val => "typeoids",
                           },
        }, "SQL::Translator::Statement::CommonTableExpr"),
      ],
      location => {
        char_pos => undef,
        left_side => "with_clause",
        right_side => ["stmtmulti"],
        rule_name => "with_clause_1285",
        token => "SELECT",
        token_val => "SELECT",
        val => "WITH",
      },
      recursive => 1,
    },
  };
  $a->{WithClause}{ctes}[0]{ctequery}{larg}{targetList}[0]{val} = $a->{WithClause}{ctes}[0]{ctequery}{larg}{targetList}[0]{location}{val};
  $a->{WithClause}{ctes}[0]{ctequery}{rarg}{targetList}[0]{val} = $a->{WithClause}{ctes}[0]{ctequery}{rarg}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6859 (' oid FROM pg_catalog.pg_opclass, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 6863 (' FROM pg_catalog.pg_opclass, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "FROM",
      token_val => "FROM",
      val => "oid",
    },
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => "FROM",
        token_val => "FROM",
        val => bless({
          fields   => ["oid"],
          location => {
                        char_pos => undef,
                        left_side => "columnref",
                        right_side => ["stmtmulti"],
                        rule_name => "columnref_1752",
                        token => "FROM",
                        token_val => "FROM",
                        val => "oid",
                      },
        }, "SQL::Translator::Statement::Column::Reference"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6868 (' pg_catalog.pg_opclass, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 6879 ('.pg_opclass, typeoids')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 6880 ('pg_opclass, typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_opclass
---STARTSTATE: INITIAL @ 6890 (', typeoids')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1778",
      token => ",",
      token_val => ",",
      val => "pg_catalog",
    },
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6891 (' typeoids')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typeoids
---STARTSTATE: INITIAL @ 6900 ('
  WHERE opcintype = typeoids.typoid
);

CREATE TY')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "typeoids",
    },
    relname => "typeoids",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 6908 (' opcintype = typeoids.typoid')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, opcintype
---STARTSTATE: INITIAL @ 6918 (' = typeoids.typoid')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "=",
      token_val => "=",
      val => "opcintype",
    },
  },
}
---STARTSTATE: INITIAL @ 6920 (' typeoids.typoid')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typeoids
---STARTSTATE: INITIAL @ 6929 ('.typoid')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 6930 ('typoid')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, typoid
---STARTSTATE: INITIAL @ 6936 ('
);

CREATE TYPE citext (
    INPUT          = cit')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1753",
      token => ")",
      token_val => ")",
      val => "typeoids",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["opcintype"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "=",
                                token_val => "=",
                                val => "opcintype",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => ")",
                  token_val => ")",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["typeoids", "typoid"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1753",
                                token => ")",
                                token_val => ")",
                                val => "typeoids",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias          => undef,
                         catalogname    => undef,
                         inhOpt         => "DEFAULT",
                         location       => {
                                             char_pos => undef,
                                             left_side => "qualified_name",
                                             right_side => ["stmtmulti"],
                                             rule_name => "qualified_name_1778",
                                             token => ",",
                                             token_val => ",",
                                             val => "pg_catalog",
                                           },
                         relname        => "pg_opclass",
                         relpersistence => "\"p\"",
                         schemaname     => "pg_catalog",
                       }, "SQL::Translator::Statement::RangeVar"),
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "typeoids",
                         },
                         relname => "typeoids",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => "FROM",
                           token_val => "FROM",
                           val => bless({
                             fields   => ["oid"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => "FROM",
                                           token_val => "FROM",
                                           val => "oid",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["opcintype"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "=",
                                                   token_val => "=",
                                                   val => "opcintype",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1506",
                                     token => ")",
                                     token_val => ")",
                                     val => "=",
                                   },
                       name     => ["="],
                       rexpr    => bless({
                                     fields   => ["typeoids", "typoid"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1753",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "typeoids",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
do {
  my $a = {
    SubLink => {
      subselect => bless({
        fromClause    => [
                           bless({
                             alias          => undef,
                             catalogname    => undef,
                             inhOpt         => "DEFAULT",
                             location       => {
                                                 char_pos => undef,
                                                 left_side => "qualified_name",
                                                 right_side => ["stmtmulti"],
                                                 rule_name => "qualified_name_1778",
                                                 token => ",",
                                                 token_val => ",",
                                                 val => "pg_catalog",
                                               },
                             relname        => "pg_opclass",
                             relpersistence => "\"p\"",
                             schemaname     => "pg_catalog",
                           }, "SQL::Translator::Statement::RangeVar"),
                           bless({
                             alias => undef,
                             inhOpt => "DEFAULT",
                             location => {
                               char_pos => undef,
                               left_side => "qualified_name",
                               right_side => ["stmtmulti"],
                               rule_name => "qualified_name_1777",
                               token => "WHERE",
                               token_val => "WHERE",
                               val => "typeoids",
                             },
                             relname => "typeoids",
                             relpersistence => "\"p\"",
                           }, "SQL::Translator::Statement::RangeVar"),
                         ],
        lockingClause => [undef, undef],
        targetList    => [
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "target_el",
                               right_side => ["stmtmulti"],
                               rule_name => "target_el_1773",
                               token => "FROM",
                               token_val => "FROM",
                               val => bless({
                                 fields   => ["oid"],
                                 location => {
                                               char_pos => undef,
                                               left_side => "columnref",
                                               right_side => ["stmtmulti"],
                                               rule_name => "columnref_1752",
                                               token => "FROM",
                                               token_val => "FROM",
                                               val => "oid",
                                             },
                               }, "SQL::Translator::Statement::Column::Reference"),
                             },
                             val => 'fix',
                           }, "SQL::Translator::Statement::ResultTarget"),
                         ],
        whereClause   => bless({
                           kind     => "OP",
                           lexpr    => bless({
                                         fields   => ["opcintype"],
                                         location => {
                                                       char_pos => undef,
                                                       left_side => "columnref",
                                                       right_side => ["stmtmulti"],
                                                       rule_name => "columnref_1752",
                                                       token => "=",
                                                       token_val => "=",
                                                       val => "opcintype",
                                                     },
                                       }, "SQL::Translator::Statement::Column::Reference"),
                           location => {
                                         char_pos => undef,
                                         left_side => "a_expr",
                                         right_side => ["stmtmulti", ";", "stmt"],
                                         rule_name => "a_expr_1506",
                                         token => ")",
                                         token_val => ")",
                                         val => "=",
                                       },
                           name     => ["="],
                           rexpr    => bless({
                                         fields   => ["typeoids", "typoid"],
                                         location => {
                                                       char_pos => undef,
                                                       left_side => "columnref",
                                                       right_side => ["stmtmulti"],
                                                       rule_name => "columnref_1753",
                                                       token => ")",
                                                       token_val => ")",
                                                       val => "typeoids",
                                                     },
                                       }, "SQL::Translator::Statement::Column::Reference"),
                         }, "SQL::Translator::Statement::A_Expr"),
        withClause    => undef,
      }, "SQL::Translator::Statement::Select"),
    },
  };
  $a->{SubLink}{subselect}{targetList}[0]{val} = $a->{SubLink}{subselect}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6938 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    UpdateStmt => {
      relation    => bless({
                       alias          => undef,
                       catalogname    => undef,
                       inhOpt         => "DEFAULT",
                       location       => {
                                           char_pos => undef,
                                           left_side => "qualified_name",
                                           right_side => ["stmtmulti"],
                                           rule_name => "qualified_name_1778",
                                           token => "SET",
                                           token_val => "SET",
                                           val => "pg_catalog",
                                         },
                       relname        => "pg_index",
                       relpersistence => "\"p\"",
                       schemaname     => "pg_catalog",
                     }, "SQL::Translator::Statement::RangeVar"),
      targetList  => [
                       bless({
                         indirection => [
                           undef,
                           bless({
                             uidx => bless({
                               location => {
                                 char_pos => undef,
                                 left_side => "AexprConst",
                                 right_side => ["stmtmulti"],
                                 rule_name => "AexprConst_1789",
                                 token => undef,
                                 token_val => undef,
                                 val => 7,
                               },
                               type => "Integer",
                               val => 7,
                             }, "SQL::Translator::Statement::A_Const"),
                           }, "SQL::Translator::Statement::A_Indices"),
                         ],
                         location => {
                           char_pos => undef,
                           left_side => "set_target",
                           right_side => ["stmtmulti"],
                           rule_name => "set_target_1251",
                           token => "=",
                           token_val => "=",
                           val => "indcollation",
                         },
                         name => "indcollation",
                         val => bless({
                           location => {
                             char_pos => undef,
                             left_side => "AexprConst",
                             right_side => ["stmtmulti"],
                             rule_name => "AexprConst_1789",
                             token => undef,
                             token_val => undef,
                             val => 100,
                           },
                           type => "Integer",
                           val => 100,
                         }, "SQL::Translator::Statement::A_Const"),
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       location    => {
                                        char_pos => undef,
                                        left_side => "a_expr",
                                        right_side => ["stmtmulti", ";", "stmt"],
                                        rule_name => "a_expr_1544",
                                        token => undef,
                                        token_val => undef,
                                        val => "IN",
                                      },
                       operName    => ["="],
                       subLinkType => "ANY_SUBLINK",
                       subselect   => bless({
                                        fromClause    => [
                                                           bless({
                                                             alias          => undef,
                                                             catalogname    => undef,
                                                             inhOpt         => "DEFAULT",
                                                             location       => {
                                                                                 char_pos => undef,
                                                                                 left_side => "qualified_name",
                                                                                 right_side => ["stmtmulti"],
                                                                                 rule_name => "qualified_name_1778",
                                                                                 token => ",",
                                                                                 token_val => ",",
                                                                                 val => "pg_catalog",
                                                                               },
                                                             relname        => "pg_opclass",
                                                             relpersistence => "\"p\"",
                                                             schemaname     => "pg_catalog",
                                                           }, "SQL::Translator::Statement::RangeVar"),
                                                           bless({
                                                             alias => undef,
                                                             inhOpt => "DEFAULT",
                                                             location => {
                                                               char_pos => undef,
                                                               left_side => "qualified_name",
                                                               right_side => ["stmtmulti"],
                                                               rule_name => "qualified_name_1777",
                                                               token => "WHERE",
                                                               token_val => "WHERE",
                                                               val => "typeoids",
                                                             },
                                                             relname => "typeoids",
                                                             relpersistence => "\"p\"",
                                                           }, "SQL::Translator::Statement::RangeVar"),
                                                         ],
                                        lockingClause => [undef, undef],
                                        targetList    => [
                                                           bless({
                                                             location => {
                                                               char_pos => undef,
                                                               left_side => "target_el",
                                                               right_side => ["stmtmulti"],
                                                               rule_name => "target_el_1773",
                                                               token => "FROM",
                                                               token_val => "FROM",
                                                               val => bless({
                                                                 fields   => ["oid"],
                                                                 location => {
                                                                               char_pos => undef,
                                                                               left_side => "columnref",
                                                                               right_side => ["stmtmulti"],
                                                                               rule_name => "columnref_1752",
                                                                               token => "FROM",
                                                                               token_val => "FROM",
                                                                               val => "oid",
                                                                             },
                                                               }, "SQL::Translator::Statement::Column::Reference"),
                                                             },
                                                             val => 'fix',
                                                           }, "SQL::Translator::Statement::ResultTarget"),
                                                         ],
                                        whereClause   => bless({
                                                           kind     => "OP",
                                                           lexpr    => bless({
                                                                         fields   => ["opcintype"],
                                                                         location => {
                                                                                       char_pos => undef,
                                                                                       left_side => "columnref",
                                                                                       right_side => ["stmtmulti"],
                                                                                       rule_name => "columnref_1752",
                                                                                       token => "=",
                                                                                       token_val => "=",
                                                                                       val => "opcintype",
                                                                                     },
                                                                       }, "SQL::Translator::Statement::Column::Reference"),
                                                           location => {
                                                                         char_pos => undef,
                                                                         left_side => "a_expr",
                                                                         right_side => ["stmtmulti", ";", "stmt"],
                                                                         rule_name => "a_expr_1506",
                                                                         token => ")",
                                                                         token_val => ")",
                                                                         val => "=",
                                                                       },
                                                           name     => ["="],
                                                           rexpr    => bless({
                                                                         fields   => ["typeoids", "typoid"],
                                                                         location => {
                                                                                       char_pos => undef,
                                                                                       left_side => "columnref",
                                                                                       right_side => ["stmtmulti"],
                                                                                       rule_name => "columnref_1753",
                                                                                       token => ")",
                                                                                       token_val => ")",
                                                                                       val => "typeoids",
                                                                                     },
                                                                       }, "SQL::Translator::Statement::Column::Reference"),
                                                         }, "SQL::Translator::Statement::A_Expr"),
                                        withClause    => undef,
                                      }, "SQL::Translator::Statement::Select"),
                       testexpr    => bless({
                                        arg => bless({
                                          fields   => ["indclass"],
                                          location => {
                                                        char_pos => undef,
                                                        left_side => "columnref",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "columnref_1753",
                                                        token => "IN",
                                                        token_val => "IN",
                                                        val => "indclass",
                                                      },
                                        }, "SQL::Translator::Statement::Column::Reference"),
                                        indirection => [
                                          bless({
                                            uidx => bless({
                                              location => {
                                                char_pos => undef,
                                                left_side => "AexprConst",
                                                right_side => ["stmtmulti"],
                                                rule_name => "AexprConst_1789",
                                                token => undef,
                                                token_val => undef,
                                                val => 7,
                                              },
                                              type => "Integer",
                                              val => 7,
                                            }, "SQL::Translator::Statement::A_Const"),
                                          }, "SQL::Translator::Statement::A_Indices"),
                                        ],
                                      }, "SQL::Translator::Statement::A_Indirection"),
                     }, "SQL::Translator::Statement::SubLink"),
    },
  };
  $a->{UpdateStmt}{whereClause}{subselect}{targetList}[0]{val} = $a->{UpdateStmt}{whereClause}{subselect}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 6939 ('

CREATE TYPE citext (
    INPUT          = citext')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 6947 (' TYPE citext (')
---GOTMATCH: identifier
---ENDTOKEN: TYPE, TYPE
---STARTSTATE: INITIAL @ 6952 (' citext (')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 6959 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 6961 ('
    INPUT          = citextin,
    OUTPUT        ')
---GOTMATCH: identifier
---ENDTOKEN: INPUT, INPUT
---STARTSTATE: INITIAL @ 6971 ('          = citextin,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 6982 (' citextin,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citextin
---STARTSTATE: INITIAL @ 6991 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citextin"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citextin",
                     },
      names       => ["citextin"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "INPUT",
  },
}
---STARTSTATE: INITIAL @ 6992 ('
    OUTPUT         = citextout,
    RECEIVE      ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, output
---STARTSTATE: INITIAL @ 7003 ('         = citextout,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7013 (' citextout,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citextout
---STARTSTATE: INITIAL @ 7023 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citextout"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citextout",
                     },
      names       => ["citextout"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "output",
  },
}
---STARTSTATE: INITIAL @ 7024 ('
    RECEIVE        = citextrecv,
    SEND        ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, receive
---STARTSTATE: INITIAL @ 7036 ('        = citextrecv,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7045 (' citextrecv,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citextrecv
---STARTSTATE: INITIAL @ 7056 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citextrecv"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citextrecv",
                     },
      names       => ["citextrecv"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "receive",
  },
}
---STARTSTATE: INITIAL @ 7057 ('
    SEND           = citextsend,
    INTERNALLENG')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, send
---STARTSTATE: INITIAL @ 7066 ('           = citextsend,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7078 (' citextsend,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citextsend
---STARTSTATE: INITIAL @ 7089 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citextsend"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citextsend",
                     },
      names       => ["citextsend"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "send",
  },
}
---STARTSTATE: INITIAL @ 7090 ('
    INTERNALLENGTH = VARIABLE,
    STORAGE       ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internallength
---STARTSTATE: INITIAL @ 7109 (' = VARIABLE,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7111 (' VARIABLE,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, variable
---STARTSTATE: INITIAL @ 7120 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["variable"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "variable",
                     },
      names       => ["variable"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "internallength",
  },
}
---STARTSTATE: INITIAL @ 7121 ('
    STORAGE        = extended,
    -- make it a n')
---GOTMATCH: identifier
---ENDTOKEN: STORAGE, STORAGE
---STARTSTATE: INITIAL @ 7133 ('        = extended,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7142 (' extended,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, extended
---STARTSTATE: INITIAL @ 7151 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["extended"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "extended",
                     },
      names       => ["extended"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "STORAGE",
  },
}
---STARTSTATE: INITIAL @ 7152 ('
    -- make it a non-preferred member of string t')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, category
---STARTSTATE: INITIAL @ 7227 ('       = 'S',')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7235 (' 'S',')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 7237 ('S',')
---ENDTOKEN: SCONST, S
{
  DefElem => { arg => "S", defaction => "UNSPEC", defname => "category" },
}
---STARTSTATE: INITIAL @ 7239 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 7240 ('
    PREFERRED      = false,
    COLLATABLE     = ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, preferred
---STARTSTATE: INITIAL @ 7254 ('      = false,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7261 (' false,')
---GOTMATCH: identifier
---ENDTOKEN: FALSE, false
{
  DefElem => { arg => "false", defaction => "UNSPEC", defname => "preferred" },
}
---STARTSTATE: INITIAL @ 7267 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 7268 ('
    COLLATABLE     = true
);

CREATE CAST (citext')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, collatable
---STARTSTATE: INITIAL @ 7283 ('     = true')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7289 (' true')
---GOTMATCH: identifier
---ENDTOKEN: TRUE, true
{
  DefElem => { arg => "true", defaction => "UNSPEC", defname => "collatable" },
}
---STARTSTATE: INITIAL @ 7294 ('
);

CREATE CAST (citext AS text)    WITHOUT FUNCT')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  DefineStmt => {
    definition => [
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "citextin",
                         },
          names       => ["citextin"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "INPUT",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "citextout",
                         },
          names       => ["citextout"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "output",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "citextrecv",
                         },
          names       => ["citextrecv"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "receive",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "citextsend",
                         },
          names       => ["citextsend"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "send",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "variable",
                         },
          names       => ["variable"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "internallength",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "extended",
                         },
          names       => ["extended"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "STORAGE",
      }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => "S", defaction => "UNSPEC", defname => "category" }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => "false", defaction => "UNSPEC", defname => "preferred" }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => "true", defaction => "UNSPEC", defname => "collatable" }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["citext"],
    kind => "TYPE",
    oldstyle => 0,
  },
}
---STARTSTATE: INITIAL @ 7296 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 7297 ('

CREATE CAST (citext AS text)    WITHOUT FUNCTION')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 7305 (' CAST (citext AS text)    WITHOUT FUNCTION AS IMPL')
---GOTMATCH: identifier
---ENDTOKEN: CAST, CAST
---STARTSTATE: INITIAL @ 7310 (' (citext AS text)    WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7312 ('citext AS text)    WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7318 (' AS text)    WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["citext"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7321 (' text)    WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 7326 (')    WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["text"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7327 ('    WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: WITHOUT, WITHOUT
---STARTSTATE: INITIAL @ 7338 (' FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 7347 (' AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 7350 (' IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: IMPLICIT, IMPLICIT
{
  CreateCastStmt => {
    context    => "IMPLICIT",
    inout      => 0,
    sourcetype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "citext",
                                   },
                    names       => ["citext"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
    targettype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ")",
                                     token_val => ")",
                                     val => "text",
                                   },
                    names       => ["text"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 7359 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 7360 ('
CREATE CAST (citext AS varchar) WITHOUT FUNCTION ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 7367 (' CAST (citext AS varchar) WITHOUT FUNCTION AS IMPL')
---GOTMATCH: identifier
---ENDTOKEN: CAST, CAST
---STARTSTATE: INITIAL @ 7372 (' (citext AS varchar) WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7374 ('citext AS varchar) WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7380 (' AS varchar) WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["citext"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7383 (' varchar) WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: VARCHAR, varchar
---STARTSTATE: INITIAL @ 7391 (') WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  TypeName => { names => ["pg_catalog", "varchar"], typemod => -1 },
}
---STARTSTATE: INITIAL @ 7392 (' WITHOUT FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: WITHOUT, WITHOUT
---STARTSTATE: INITIAL @ 7400 (' FUNCTION AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 7409 (' AS IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 7412 (' IMPLICIT;')
---GOTMATCH: identifier
---ENDTOKEN: IMPLICIT, IMPLICIT
{
  CreateCastStmt => {
    context    => "IMPLICIT",
    inout      => 0,
    sourcetype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "citext",
                                   },
                    names       => ["citext"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
    targettype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "CharacterWithoutLength",
                                     right_side => ["stmtmulti"],
                                     rule_name => "CharacterWithoutLength_1457",
                                     token => ")",
                                     token_val => ")",
                                     val => "varchar",
                                   },
                    names       => ["pg_catalog", "varchar"],
                    typemod     => -1,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 7421 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 7422 ('
CREATE CAST (citext AS bpchar)  WITHOUT FUNCTION ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 7429 (' CAST (citext AS bpchar)  WITHOUT FUNCTION AS ASSI')
---GOTMATCH: identifier
---ENDTOKEN: CAST, CAST
---STARTSTATE: INITIAL @ 7434 (' (citext AS bpchar)  WITHOUT FUNCTION AS ASSIGNMEN')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7436 ('citext AS bpchar)  WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7442 (' AS bpchar)  WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["citext"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7445 (' bpchar)  WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, bpchar
---STARTSTATE: INITIAL @ 7452 (')  WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["bpchar"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7453 ('  WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: WITHOUT, WITHOUT
---STARTSTATE: INITIAL @ 7462 (' FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 7471 (' AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 7474 (' ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: ASSIGNMENT, ASSIGNMENT
{
  CreateCastStmt => {
    context    => "ASSIGNMENT",
    inout      => 0,
    sourcetype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "citext",
                                   },
                    names       => ["citext"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
    targettype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ")",
                                     token_val => ")",
                                     val => "bpchar",
                                   },
                    names       => ["bpchar"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 7485 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 7486 ('
CREATE CAST (text AS citext)    WITHOUT FUNCTION ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 7493 (' CAST (text AS citext)    WITHOUT FUNCTION AS ASSI')
---GOTMATCH: identifier
---ENDTOKEN: CAST, CAST
---STARTSTATE: INITIAL @ 7498 (' (text AS citext)    WITHOUT FUNCTION AS ASSIGNMEN')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7500 ('text AS citext)    WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 7504 (' AS citext)    WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["text"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7507 (' citext)    WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7514 (')    WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7515 ('    WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: WITHOUT, WITHOUT
---STARTSTATE: INITIAL @ 7526 (' FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 7535 (' AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 7538 (' ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: ASSIGNMENT, ASSIGNMENT
{
  CreateCastStmt => {
    context    => "ASSIGNMENT",
    inout      => 0,
    sourcetype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "text",
                                   },
                    names       => ["text"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
    targettype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ")",
                                     token_val => ")",
                                     val => "citext",
                                   },
                    names       => ["citext"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 7549 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 7550 ('
CREATE CAST (varchar AS citext) WITHOUT FUNCTION ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 7557 (' CAST (varchar AS citext) WITHOUT FUNCTION AS ASSI')
---GOTMATCH: identifier
---ENDTOKEN: CAST, CAST
---STARTSTATE: INITIAL @ 7562 (' (varchar AS citext) WITHOUT FUNCTION AS ASSIGNMEN')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7564 ('varchar AS citext) WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: VARCHAR, varchar
---STARTSTATE: INITIAL @ 7571 (' AS citext) WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{
  TypeName => { names => ["pg_catalog", "varchar"], typemod => -1 },
}
---STARTSTATE: INITIAL @ 7574 (' citext) WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7581 (') WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7582 (' WITHOUT FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: WITHOUT, WITHOUT
---STARTSTATE: INITIAL @ 7590 (' FUNCTION AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 7599 (' AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 7602 (' ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: ASSIGNMENT, ASSIGNMENT
{
  CreateCastStmt => {
    context    => "ASSIGNMENT",
    inout      => 0,
    sourcetype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "CharacterWithoutLength",
                                     right_side => ["stmtmulti"],
                                     rule_name => "CharacterWithoutLength_1457",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "varchar",
                                   },
                    names       => ["pg_catalog", "varchar"],
                    typemod     => -1,
                  }, "SQL::Translator::Statement::TypeName"),
    targettype => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => ")",
                                     token_val => ")",
                                     val => "citext",
                                   },
                    names       => ["citext"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 7613 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 7614 ('
CREATE CAST (bpchar AS citext)  WITH FUNCTION cit')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 7621 (' CAST (bpchar AS citext)  WITH FUNCTION citext(bpc')
---GOTMATCH: identifier
---ENDTOKEN: CAST, CAST
---STARTSTATE: INITIAL @ 7626 (' (bpchar AS citext)  WITH FUNCTION citext(bpchar) ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7628 ('bpchar AS citext)  WITH FUNCTION citext(bpchar)  A')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, bpchar
---STARTSTATE: INITIAL @ 7634 (' AS citext)  WITH FUNCTION citext(bpchar)  AS ASSI')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["bpchar"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7637 (' citext)  WITH FUNCTION citext(bpchar)  AS ASSIGNM')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7644 (')  WITH FUNCTION citext(bpchar)  AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7645 ('  WITH FUNCTION citext(bpchar)  AS ASSIGNMENT;')
---GOTMATCH: identifier
---STARTSTATE: INITIAL @ 7651 (' FUNCTION citext(bpchar)  AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: WITH, WITH
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 7660 (' citext(bpchar)  AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7667 ('(bpchar)  AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7668 ('bpchar)  AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, bpchar
---STARTSTATE: INITIAL @ 7674 (')  AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["bpchar"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "bpchar",
                     },
      names       => ["bpchar"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["citext"] } }
---STARTSTATE: INITIAL @ 7675 ('  AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 7679 (' ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: ASSIGNMENT, ASSIGNMENT
{
  CreateCastStmt => {
    context => "ASSIGNMENT",
    func => bless({ funcname => ["citext"] }, "SQL::Translator::Statement::Function"),
    inout => 0,
    sourcetype => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => "AS",
                       token_val => "AS",
                       val => "bpchar",
                     },
      names       => ["bpchar"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    targettype => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 7690 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 7691 ('
CREATE CAST (boolean AS citext) WITH FUNCTION cit')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 7698 (' CAST (boolean AS citext) WITH FUNCTION citext(boo')
---GOTMATCH: identifier
---ENDTOKEN: CAST, CAST
---STARTSTATE: INITIAL @ 7703 (' (boolean AS citext) WITH FUNCTION citext(boolean)')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7705 ('boolean AS citext) WITH FUNCTION citext(boolean) A')
---GOTMATCH: identifier
---ENDTOKEN: BOOLEAN, boolean
{ TypeName => { names => ["pg_catalog", "bool"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7712 (' AS citext) WITH FUNCTION citext(boolean) AS ASSIG')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 7715 (' citext) WITH FUNCTION citext(boolean) AS ASSIGNME')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7722 (') WITH FUNCTION citext(boolean) AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7723 (' WITH FUNCTION citext(boolean) AS ASSIGNMENT;')
---GOTMATCH: identifier
---STARTSTATE: INITIAL @ 7728 (' FUNCTION citext(boolean) AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: WITH, WITH
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 7737 (' citext(boolean) AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7744 ('(boolean) AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7745 ('boolean) AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: BOOLEAN, boolean
{ TypeName => { names => ["pg_catalog", "bool"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7752 (') AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1443",
                       token => undef,
                       token_val => undef,
                       val => "boolean",
                     },
      names       => ["pg_catalog", "bool"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["citext"] } }
---STARTSTATE: INITIAL @ 7753 (' AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 7756 (' ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: ASSIGNMENT, ASSIGNMENT
{
  CreateCastStmt => {
    context => "ASSIGNMENT",
    func => bless({ funcname => ["citext"] }, "SQL::Translator::Statement::Function"),
    inout => 0,
    sourcetype => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1443",
                       token => undef,
                       token_val => undef,
                       val => "boolean",
                     },
      names       => ["pg_catalog", "bool"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    targettype => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 7767 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 7768 ('
CREATE CAST (inet AS citext)    WITH FUNCTION cit')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 7775 (' CAST (inet AS citext)    WITH FUNCTION citext(ine')
---GOTMATCH: identifier
---ENDTOKEN: CAST, CAST
---STARTSTATE: INITIAL @ 7780 (' (inet AS citext)    WITH FUNCTION citext(inet)   ')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7782 ('inet AS citext)    WITH FUNCTION citext(inet)    A')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, inet
---STARTSTATE: INITIAL @ 7786 (' AS citext)    WITH FUNCTION citext(inet)    AS AS')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["inet"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7789 (' citext)    WITH FUNCTION citext(inet)    AS ASSIG')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7796 (')    WITH FUNCTION citext(inet)    AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
---STARTSTATE: INITIAL @ 7797 ('    WITH FUNCTION citext(inet)    AS ASSIGNMENT;')
---GOTMATCH: identifier
---STARTSTATE: INITIAL @ 7805 (' FUNCTION citext(inet)    AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: WITH, WITH
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 7814 (' citext(inet)    AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7821 ('(inet)    AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7822 ('inet)    AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, inet
---STARTSTATE: INITIAL @ 7826 (')    AS ASSIGNMENT;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["inet"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "inet",
                     },
      names       => ["inet"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{ Function => { funcname => ["citext"] } }
---STARTSTATE: INITIAL @ 7827 ('    AS ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 7833 (' ASSIGNMENT;')
---GOTMATCH: identifier
---ENDTOKEN: ASSIGNMENT, ASSIGNMENT
{
  CreateCastStmt => {
    context => "ASSIGNMENT",
    func => bless({ funcname => ["citext"] }, "SQL::Translator::Statement::Function"),
    inout => 0,
    sourcetype => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => "AS",
                       token_val => "AS",
                       val => "inet",
                     },
      names       => ["inet"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    targettype => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 7844 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 7845 ('

CREATE OPERATOR = (
    LEFTARG    = CITEXT,
   ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 7853 (' OPERATOR = (')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 7862 (' = (')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7864 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 7866 ('
    LEFTARG    = CITEXT,
    RIGHTARG   = CITEXT,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, leftarg
---STARTSTATE: INITIAL @ 7878 ('    = CITEXT,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7883 (' CITEXT,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7890 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "leftarg",
  },
}
---STARTSTATE: INITIAL @ 7891 ('
    RIGHTARG   = CITEXT,
    COMMUTATOR = =,
    ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, rightarg
---STARTSTATE: INITIAL @ 7904 ('   = CITEXT,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7908 (' CITEXT,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 7915 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "rightarg",
  },
}
---STARTSTATE: INITIAL @ 7916 ('
    COMMUTATOR = =,
    NEGATOR    = <>,
    PROC')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, commutator
---STARTSTATE: INITIAL @ 7931 (' = =,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7933 (' =,')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  DefElem => { arg => ["="], defaction => "UNSPEC", defname => "commutator" },
}
---STARTSTATE: INITIAL @ 7935 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 7936 ('
    NEGATOR    = <>,
    PROCEDURE  = citext_eq,
')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, negator
---STARTSTATE: INITIAL @ 7948 ('    = <>,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7953 (' <>,')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
{
  DefElem => { arg => ["<>"], defaction => "UNSPEC", defname => "negator" },
}
---STARTSTATE: INITIAL @ 7956 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 7957 ('
    PROCEDURE  = citext_eq,
    RESTRICT   = eqse')
---GOTMATCH: identifier
---ENDTOKEN: PROCEDURE, PROCEDURE
---STARTSTATE: INITIAL @ 7971 ('  = citext_eq,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 7974 (' citext_eq,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext_eq
---STARTSTATE: INITIAL @ 7984 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext_eq"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext_eq",
                     },
      names       => ["citext_eq"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "PROCEDURE",
  },
}
---STARTSTATE: INITIAL @ 7985 ('
    RESTRICT   = eqsel,
    JOIN       = eqjoinse')
---GOTMATCH: identifier
---ENDTOKEN: RESTRICT, RESTRICT
---STARTSTATE: INITIAL @ 7998 ('   = eqsel,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 8002 (' eqsel,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, eqsel
---STARTSTATE: INITIAL @ 8008 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["eqsel"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "eqsel",
                     },
      names       => ["eqsel"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "RESTRICT",
  },
}
---STARTSTATE: INITIAL @ 8009 ('
    JOIN       = eqjoinsel,
    HASHES,
    MERGE')
---GOTMATCH: identifier
---ENDTOKEN: JOIN, JOIN
---STARTSTATE: INITIAL @ 8018 ('       = eqjoinsel,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 8026 (' eqjoinsel,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, eqjoinsel
---STARTSTATE: INITIAL @ 8036 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["eqjoinsel"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "eqjoinsel",
                     },
      names       => ["eqjoinsel"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "JOIN",
  },
}
---STARTSTATE: INITIAL @ 8037 ('
    HASHES,
    MERGES
);

CREATE OPERATOR !~* (
')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, hashes
---STARTSTATE: INITIAL @ 8048 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ DefElem => { defaction => "UNSPEC", defname => "hashes" } }
---STARTSTATE: INITIAL @ 8049 ('
    MERGES
);

CREATE OPERATOR !~* (
    PROCEDUR')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, merges
---STARTSTATE: INITIAL @ 8060 ('
);

CREATE OPERATOR !~* (
    PROCEDURE = texticr')
---GOTMATCH: self
---ENDTOKEN: ), )
{ DefElem => { defaction => "UNSPEC", defname => "merges" } }
{
  DefineStmt => {
    definition => [
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "citext",
                         },
          names       => ["citext"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "leftarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "citext",
                         },
          names       => ["citext"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "rightarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => ["="], defaction => "UNSPEC", defname => "commutator" }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => ["<>"], defaction => "UNSPEC", defname => "negator" }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "citext_eq",
                         },
          names       => ["citext_eq"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "PROCEDURE",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "eqsel",
                         },
          names       => ["eqsel"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "RESTRICT",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "eqjoinsel",
                         },
          names       => ["eqjoinsel"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "JOIN",
      }, "SQL::Translator::Statement::DefElem"),
      bless({ defaction => "UNSPEC", defname => "hashes" }, "SQL::Translator::Statement::DefElem"),
      bless({ defaction => "UNSPEC", defname => "merges" }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["="],
    kind => "OPERATOR",
    oldstyle => 0,
  },
}
---STARTSTATE: INITIAL @ 8062 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 8063 ('

CREATE OPERATOR !~* (
    PROCEDURE = texticrege')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 8071 (' OPERATOR !~* (')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 8080 (' !~* (')
---GOTMATCH: operator
---ENDTOKEN: Op, !~*
---STARTSTATE: INITIAL @ 8084 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 8086 ('
    PROCEDURE = texticregexne,
    LEFTARG   = ci')
---GOTMATCH: identifier
---ENDTOKEN: PROCEDURE, PROCEDURE
---STARTSTATE: INITIAL @ 8100 (' = texticregexne,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 8102 (' texticregexne,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, texticregexne
---STARTSTATE: INITIAL @ 8116 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["texticregexne"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "texticregexne",
                     },
      names       => ["texticregexne"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "PROCEDURE",
  },
}
---STARTSTATE: INITIAL @ 8117 ('
    LEFTARG   = citext,
    RIGHTARG  = citext,
 ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, leftarg
---STARTSTATE: INITIAL @ 8129 ('   = citext,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 8133 (' citext,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 8140 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "leftarg",
  },
}
---STARTSTATE: INITIAL @ 8141 ('
    RIGHTARG  = citext,
    NEGATOR   = ~*,
    R')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, rightarg
---STARTSTATE: INITIAL @ 8154 ('  = citext,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 8157 (' citext,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 8164 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "rightarg",
  },
}
---STARTSTATE: INITIAL @ 8165 ('
    NEGATOR   = ~*,
    RESTRICT  = icregexnesel,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, negator
---STARTSTATE: INITIAL @ 8177 ('   = ~*,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 8181 (' ~*,')
---GOTMATCH: operator
---ENDTOKEN: Op, ~*
{
  DefElem => { arg => ["~*"], defaction => "UNSPEC", defname => "negator" },
}
---STARTSTATE: INITIAL @ 8184 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 8185 ('
    RESTRICT  = icregexnesel,
    JOIN      = icr')
---GOTMATCH: identifier
---ENDTOKEN: RESTRICT, RESTRICT
---STARTSTATE: INITIAL @ 8198 ('  = icregexnesel,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 8201 (' icregexnesel,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, icregexnesel
---STARTSTATE: INITIAL @ 8214 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["icregexnesel"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "icregexnesel",
                     },
      names       => ["icregexnesel"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "RESTRICT",
  },
}
---STARTSTATE: INITIAL @ 8215 ('
    JOIN      = icregexnejoinsel
);

CREATE FUNCT')
---GOTMATCH: identifier
---ENDTOKEN: JOIN, JOIN
---STARTSTATE: INITIAL @ 8224 ('      = icregexnejoinsel')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 8231 (' icregexnejoinsel')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, icregexnejoinsel
---STARTSTATE: INITIAL @ 8248 ('
);

CREATE FUNCTION regexp_matches( citext, citex')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["icregexnejoinsel"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "icregexnejoinsel",
                     },
      names       => ["icregexnejoinsel"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "JOIN",
  },
}
{
  DefineStmt => {
    definition => [
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "texticregexne",
                         },
          names       => ["texticregexne"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "PROCEDURE",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "citext",
                         },
          names       => ["citext"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "leftarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "citext",
                         },
          names       => ["citext"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "rightarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => ["~*"], defaction => "UNSPEC", defname => "negator" }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "icregexnesel",
                         },
          names       => ["icregexnesel"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "RESTRICT",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ")",
                           token_val => ")",
                           val => "icregexnejoinsel",
                         },
          names       => ["icregexnejoinsel"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "JOIN",
      }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["!~*"],
    kind => "OPERATOR",
    oldstyle => 0,
  },
}
---STARTSTATE: INITIAL @ 8250 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 8251 ('

CREATE FUNCTION regexp_matches( citext, citext )')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 8259 (' FUNCTION regexp_matches( citext, citext ) RETURNS')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 8268 (' regexp_matches( citext, citext ) RETURNS TEXT[] A')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, regexp_matches
---STARTSTATE: INITIAL @ 8283 ('( citext, citext ) RETURNS TEXT[] AS $$')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 8284 (' citext, citext ) RETURNS TEXT[] AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 8291 (', citext ) RETURNS TEXT[] AS $$')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 8292 (' citext ) RETURNS TEXT[] AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 8299 (' ) RETURNS TEXT[] AS $$')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 8301 (' RETURNS TEXT[] AS $$')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 8309 (' TEXT[] AS $$')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 8314 ('[] AS $$')
---GOTMATCH: self
---ENDTOKEN: [, [
{ TypeName => { names => ["TEXT"], typemod => -1 } }
---STARTSTATE: INITIAL @ 8315 ('] AS $$')
---GOTMATCH: self
---ENDTOKEN: ], ]
---STARTSTATE: INITIAL @ 8316 (' AS $$')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 8319 (' $$')
---GOTMATCH: dolqdelim
---STARTSTATE: xdolq @ 8322 ('
    SELECT pg_catalog.regexp_matches( $1::pg_cata')
---ENDTOKEN: SCONST, 
    SELECT pg_catalog.regexp_matches( $1::pg_catalog.text, $2::pg_catalog.text, 'i' );

---STARTSTATE: INITIAL @ 8412 (' LANGUAGE SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => {
    arg => [
      "\n    SELECT pg_catalog.regexp_matches( \$1::pg_catalog.text, \$2::pg_catalog.text, 'i' );\n",
    ],
    defaction => "UNSPEC",
    defname => "as",
  },
}
---STARTSTATE: INITIAL @ 8421 (' SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, sql
{
  DefElem => { arg => "sql", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 8425 (' IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IMMUTABLE, IMMUTABLE
{
  DefElem => { arg => "immutable", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 8435 (' STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 8442 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["regexp_matches"],
    options    => [
                    bless({
                      arg => [
                        "\n    SELECT pg_catalog.regexp_matches( \$1::pg_catalog.text, \$2::pg_catalog.text, 'i' );\n",
                      ],
                      defaction => "UNSPEC",
                      defname => "as",
                    }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => [undef, -1],
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "[",
                                     token_val => "[",
                                     val => "TEXT",
                                   },
                    names       => ["TEXT"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 8443 ('

/* CREATE FUNCTION regexp_matches( citext, citex')
---GOTMATCH: xcstart
---STARTSTATE: xc @ 8447 (' CREATE FUNCTION regexp_matches( citext, citext ) ')
---STARTSTATE: xc @ 8447 (' CREATE FUNCTION regexp_matches( citext, citext ) ')
---STARTSTATE: xc @ 8639 ('*/

CREATE FUNCTION regexp_split_to_array( citext,')
---xcstop: xc @ 8641 ('

CREATE FUNCTION regexp_split_to_array( citext, c')
---STARTSTATE: INITIAL @ 8641 ('

CREATE FUNCTION regexp_split_to_array( citext, c')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 8649 (' FUNCTION regexp_split_to_array( citext, citext, t')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 8658 (' regexp_split_to_array( citext, citext, text ) RET')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, regexp_split_to_array
---STARTSTATE: INITIAL @ 8680 ('( citext, citext, text ) RETURNS TEXT[] AS $$')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 8681 (' citext, citext, text ) RETURNS TEXT[] AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 8688 (', citext, text ) RETURNS TEXT[] AS $$')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 8689 (' citext, text ) RETURNS TEXT[] AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 8696 (', text ) RETURNS TEXT[] AS $$')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 8697 (' text ) RETURNS TEXT[] AS $$')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 8702 (' ) RETURNS TEXT[] AS $$')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["text"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 8704 (' RETURNS TEXT[] AS $$')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 8712 (' TEXT[] AS $$')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 8717 ('[] AS $$')
---GOTMATCH: self
---ENDTOKEN: [, [
{ TypeName => { names => ["TEXT"], typemod => -1 } }
---STARTSTATE: INITIAL @ 8718 ('] AS $$')
---GOTMATCH: self
---ENDTOKEN: ], ]
---STARTSTATE: INITIAL @ 8719 (' AS $$')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 8722 (' $$')
---GOTMATCH: dolqdelim
---STARTSTATE: xdolq @ 8725 ('
    SELECT pg_catalog.regexp_split_to_array( $1::')
---ENDTOKEN: SCONST, 
    SELECT pg_catalog.regexp_split_to_array( $1::pg_catalog.text, $2::pg_catalog.text, CASE WHEN pg_catalog.strpos($3, 'c') = 0 THEN  $3 || 'i' ELSE $3 END );

---STARTSTATE: INITIAL @ 8887 (' LANGUAGE SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => {
    arg => [
      "\n    SELECT pg_catalog.regexp_split_to_array( \$1::pg_catalog.text, \$2::pg_catalog.text, CASE WHEN pg_catalog.strpos(\$3, 'c') = 0 THEN  \$3 || 'i' ELSE \$3 END );\n",
    ],
    defaction => "UNSPEC",
    defname => "as",
  },
}
---STARTSTATE: INITIAL @ 8896 (' SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, sql
{
  DefElem => { arg => "sql", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 8900 (' IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IMMUTABLE, IMMUTABLE
{
  DefElem => { arg => "immutable", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 8910 (' STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 8917 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["regexp_split_to_array"],
    options    => [
                    bless({
                      arg => [
                        "\n    SELECT pg_catalog.regexp_split_to_array( \$1::pg_catalog.text, \$2::pg_catalog.text, CASE WHEN pg_catalog.strpos(\$3, 'c') = 0 THEN  \$3 || 'i' ELSE \$3 END );\n",
                      ],
                      defaction => "UNSPEC",
                      defname => "as",
                    }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "text",
                                       },
                        names       => ["text"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => [undef, -1],
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "[",
                                     token_val => "[",
                                     val => "TEXT",
                                   },
                    names       => ["TEXT"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 8918 ('

CREATE FUNCTION replace( citext, citext, citext ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 8926 (' FUNCTION replace( citext, citext, citext ) RETURN')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 8935 (' replace( citext, citext, citext ) RETURNS TEXT AS')
---GOTMATCH: identifier
---ENDTOKEN: REPLACE, replace
---STARTSTATE: INITIAL @ 8943 ('( citext, citext, citext ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 8944 (' citext, citext, citext ) RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 8951 (', citext, citext ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 8952 (' citext, citext ) RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 8959 (', citext ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 8960 (' citext ) RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 8967 (' ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 8969 (' RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 8977 (' TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 8982 (' AS $$')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["TEXT"], typemod => -1 } }
---STARTSTATE: INITIAL @ 8985 (' $$')
---GOTMATCH: dolqdelim
---STARTSTATE: xdolq @ 8988 ('
    SELECT pg_catalog.regexp_replace( $1::pg_cata')
---ENDTOKEN: SCONST, 
    SELECT pg_catalog.regexp_replace( $1::pg_catalog.text, pg_catalog.regexp_replace($2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\1', 'g'), $3::pg_catalog.text, 'gi' );

---STARTSTATE: INITIAL @ 9163 (' LANGUAGE SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => {
    arg => [
      "\n    SELECT pg_catalog.regexp_replace( \$1::pg_catalog.text, pg_catalog.regexp_replace(\$2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\\\\\\\1', 'g'), \$3::pg_catalog.text, 'gi' );\n",
    ],
    defaction => "UNSPEC",
    defname => "as",
  },
}
---STARTSTATE: INITIAL @ 9172 (' SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, sql
{
  DefElem => { arg => "sql", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 9176 (' IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IMMUTABLE, IMMUTABLE
{
  DefElem => { arg => "immutable", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 9186 (' STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 9193 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["replace"],
    options    => [
                    bless({
                      arg => [
                        "\n    SELECT pg_catalog.regexp_replace( \$1::pg_catalog.text, pg_catalog.regexp_replace(\$2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\\\\\\\1', 'g'), \$3::pg_catalog.text, 'gi' );\n",
                      ],
                      defaction => "UNSPEC",
                      defname => "as",
                    }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "TEXT",
                                   },
                    names       => ["TEXT"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 9194 ('

CREATE FUNCTION split_part( citext, citext, int ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 9202 (' FUNCTION split_part( citext, citext, int ) RETURN')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 9211 (' split_part( citext, citext, int ) RETURNS TEXT AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, split_part
---STARTSTATE: INITIAL @ 9222 ('( citext, citext, int ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9223 (' citext, citext, int ) RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 9230 (', citext, int ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 9231 (' citext, int ) RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 9238 (', int ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 9239 (' int ) RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: INT, int
{ TypeName => { names => ["pg_catalog", "int4"], typemod => -1 } }
---STARTSTATE: INITIAL @ 9243 (' ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1433",
                       token => undef,
                       token_val => undef,
                       val => "int",
                     },
      names       => ["pg_catalog", "int4"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 9245 (' RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 9253 (' TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 9258 (' AS $$')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["TEXT"], typemod => -1 } }
---STARTSTATE: INITIAL @ 9261 (' $$')
---GOTMATCH: dolqdelim
---STARTSTATE: xdolq @ 9264 ('
    SELECT (pg_catalog.regexp_split_to_array( $1:')
---ENDTOKEN: SCONST, 
    SELECT (pg_catalog.regexp_split_to_array( $1::pg_catalog.text, pg_catalog.regexp_replace($2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\1', 'g'), 'i'))[$3];

---STARTSTATE: INITIAL @ 9429 (' LANGUAGE SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => {
    arg => [
      "\n    SELECT (pg_catalog.regexp_split_to_array( \$1::pg_catalog.text, pg_catalog.regexp_replace(\$2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\\\\\\\1', 'g'), 'i'))[\$3];\n",
    ],
    defaction => "UNSPEC",
    defname => "as",
  },
}
---STARTSTATE: INITIAL @ 9438 (' SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, sql
{
  DefElem => { arg => "sql", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 9442 (' IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IMMUTABLE, IMMUTABLE
{
  DefElem => { arg => "immutable", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 9452 (' STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 9459 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["split_part"],
    options    => [
                    bless({
                      arg => [
                        "\n    SELECT (pg_catalog.regexp_split_to_array( \$1::pg_catalog.text, pg_catalog.regexp_replace(\$2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\\\\\\\1', 'g'), 'i'))[\$3];\n",
                      ],
                      defaction => "UNSPEC",
                      defname => "as",
                    }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "Numeric",
                                         right_side => ["stmtmulti"],
                                         rule_name => "Numeric_1433",
                                         token => undef,
                                         token_val => undef,
                                         val => "int",
                                       },
                        names       => ["pg_catalog", "int4"],
                        typemod     => -1,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "TEXT",
                                   },
                    names       => ["TEXT"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 9460 ('

CREATE FUNCTION translate( citext, citext, text ')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 9468 (' FUNCTION translate( citext, citext, text ) RETURN')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 9477 (' translate( citext, citext, text ) RETURNS TEXT AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, translate
---STARTSTATE: INITIAL @ 9487 ('( citext, citext, text ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9488 (' citext, citext, text ) RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 9495 (', citext, text ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 9496 (' citext, text ) RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 9503 (', text ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 9504 (' text ) RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 9509 (' ) RETURNS TEXT AS $$')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["text"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 9511 (' RETURNS TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 9519 (' TEXT AS $$')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 9524 (' AS $$')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["TEXT"], typemod => -1 } }
---STARTSTATE: INITIAL @ 9527 (' $$')
---GOTMATCH: dolqdelim
---STARTSTATE: xdolq @ 9530 ('
    SELECT pg_catalog.translate( pg_catalog.trans')
---ENDTOKEN: SCONST, 
    SELECT pg_catalog.translate( pg_catalog.translate( $1::pg_catalog.text, pg_catalog.lower($2::pg_catalog.text), $3), pg_catalog.upper($2::pg_catalog.text), $3);

---STARTSTATE: INITIAL @ 9697 (' LANGUAGE SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => {
    arg => [
      "\n    SELECT pg_catalog.translate( pg_catalog.translate( \$1::pg_catalog.text, pg_catalog.lower(\$2::pg_catalog.text), \$3), pg_catalog.upper(\$2::pg_catalog.text), \$3);\n",
    ],
    defaction => "UNSPEC",
    defname => "as",
  },
}
---STARTSTATE: INITIAL @ 9706 (' SQL IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, sql
{
  DefElem => { arg => "sql", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 9710 (' IMMUTABLE STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IMMUTABLE, IMMUTABLE
{
  DefElem => { arg => "immutable", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 9720 (' STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 9727 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["translate"],
    options    => [
                    bless({
                      arg => [
                        "\n    SELECT pg_catalog.translate( pg_catalog.translate( \$1::pg_catalog.text, pg_catalog.lower(\$2::pg_catalog.text), \$3), pg_catalog.upper(\$2::pg_catalog.text), \$3);\n",
                      ],
                      defaction => "UNSPEC",
                      defname => "as",
                    }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ",",
                                         token_val => ",",
                                         val => "citext",
                                       },
                        names       => ["citext"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "text",
                                       },
                        names       => ["text"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "TEXT",
                                   },
                    names       => ["TEXT"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 9728 ('

INSERT INTO try (name)
VALUES ('a'), ('ab'), ('â')
---GOTMATCH: identifier
---ENDTOKEN: INSERT, INSERT
---STARTSTATE: INITIAL @ 9736 (' INTO try (name)')
---GOTMATCH: identifier
---ENDTOKEN: INTO, INTO
---STARTSTATE: INITIAL @ 9741 (' try (name)')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, try
---STARTSTATE: INITIAL @ 9745 (' (name)')
---GOTMATCH: self
---ENDTOKEN: (, (
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "(",
      token_val => "(",
      val => "try",
    },
    relname => "try",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 9747 ('name)')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 9751 (')')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  ResultTarget => {
    location => {
      char_pos => undef,
      left_side => "insert_column_item",
      right_side => ["stmtmulti"],
      rule_name => "insert_column_item_1225",
      token => ")",
      token_val => ")",
      val => "name",
    },
    name => "name",
  },
}
---STARTSTATE: INITIAL @ 9752 ('
VALUES ('a'), ('ab'), ('â'), ('aba'), ('b'), ('ba')
---GOTMATCH: identifier
---ENDTOKEN: VALUES, VALUES
---STARTSTATE: INITIAL @ 9759 (' ('a'), ('ab'), ('â'), ('aba'), ('b'), ('ba'), ('b')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9761 (''a'), ('ab'), ('â'), ('aba'), ('b'), ('ba'), ('bab')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9762 ('a'), ('ab'), ('â'), ('aba'), ('b'), ('ba'), ('bab'')
---ENDTOKEN: SCONST, a
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "a",
    },
    type => "String",
    val => "a",
  },
}
---STARTSTATE: INITIAL @ 9764 ('), ('ab'), ('â'), ('aba'), ('b'), ('ba'), ('bab'),')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  SelectStmt => {
    valuesLists => [
      bless({
        location => {
          char_pos => undef,
          left_side => "AexprConst",
          right_side => ["stmtmulti"],
          rule_name => "AexprConst_1791",
          token => undef,
          token_val => undef,
          val => "a",
        },
        type => "String",
        val => "a",
      }, "SQL::Translator::Statement::A_Const"),
    ],
  },
}
---STARTSTATE: INITIAL @ 9765 (', ('ab'), ('â'), ('aba'), ('b'), ('ba'), ('bab'), ')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 9766 (' ('ab'), ('â'), ('aba'), ('b'), ('ba'), ('bab'), (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9768 (''ab'), ('â'), ('aba'), ('b'), ('ba'), ('bab'), ('A')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9769 ('ab'), ('â'), ('aba'), ('b'), ('ba'), ('bab'), ('AZ')
---ENDTOKEN: SCONST, ab
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "ab",
    },
    type => "String",
    val => "ab",
  },
}
---STARTSTATE: INITIAL @ 9772 ('), ('â'), ('aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 9773 (', ('â'), ('aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 9774 (' ('â'), ('aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9776 (''â'), ('aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9777 ('â'), ('aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---ENDTOKEN: SCONST, â
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "\xE2",
    },
    type => "String",
    val => "\xE2",
  },
}
---STARTSTATE: INITIAL @ 9779 ('), ('aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 9780 (', ('aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 9781 (' ('aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9783 (''aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9784 ('aba'), ('b'), ('ba'), ('bab'), ('AZ');')
---ENDTOKEN: SCONST, aba
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "aba",
    },
    type => "String",
    val => "aba",
  },
}
---STARTSTATE: INITIAL @ 9788 ('), ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 9789 (', ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 9790 (' ('b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9792 (''b'), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9793 ('b'), ('ba'), ('bab'), ('AZ');')
---ENDTOKEN: SCONST, b
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "b",
    },
    type => "String",
    val => "b",
  },
}
---STARTSTATE: INITIAL @ 9795 ('), ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 9796 (', ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 9797 (' ('ba'), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9799 (''ba'), ('bab'), ('AZ');')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9800 ('ba'), ('bab'), ('AZ');')
---ENDTOKEN: SCONST, ba
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "ba",
    },
    type => "String",
    val => "ba",
  },
}
---STARTSTATE: INITIAL @ 9803 ('), ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 9804 (', ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 9805 (' ('bab'), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9807 (''bab'), ('AZ');')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9808 ('bab'), ('AZ');')
---ENDTOKEN: SCONST, bab
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "bab",
    },
    type => "String",
    val => "bab",
  },
}
---STARTSTATE: INITIAL @ 9812 ('), ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 9813 (', ('AZ');')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 9814 (' ('AZ');')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 9816 (''AZ');')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9817 ('AZ');')
---ENDTOKEN: SCONST, AZ
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "AZ",
    },
    type => "String",
    val => "AZ",
  },
}
---STARTSTATE: INITIAL @ 9820 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 9821 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  InsertStmt => {
    cols => [
      bless({
        location => {
          char_pos => undef,
          left_side => "insert_column_item",
          right_side => ["stmtmulti"],
          rule_name => "insert_column_item_1225",
          token => ")",
          token_val => ")",
          val => "name",
        },
        name => "name",
      }, "SQL::Translator::Statement::ResultTarget"),
    ],
    selectStmt => bless({
      valuesLists => [
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "a",
          },
          type => "String",
          val => "a",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "ab",
          },
          type => "String",
          val => "ab",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "\xE2",
          },
          type => "String",
          val => "\xE2",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "aba",
          },
          type => "String",
          val => "aba",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "b",
          },
          type => "String",
          val => "b",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "ba",
          },
          type => "String",
          val => "ba",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "bab",
          },
          type => "String",
          val => "bab",
        }, "SQL::Translator::Statement::A_Const"),
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "AZ",
          },
          type => "String",
          val => "AZ",
        }, "SQL::Translator::Statement::A_Const"),
      ],
    }, "SQL::Translator::Statement::Select"),
  },
}
---STARTSTATE: INITIAL @ 9822 ('

SELECT name, 'a' = name AS eq_a   FROM try WHERE')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 9830 (' name, 'a' = name AS eq_a   FROM try WHERE name <>')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 9835 (', 'a' = name AS eq_a   FROM try WHERE name <> 'â';')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => ",",
      token_val => ",",
      val => "name",
    },
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => ",",
        token_val => ",",
        val => bless({
          fields   => ["name"],
          location => {
                        char_pos => undef,
                        left_side => "columnref",
                        right_side => ["stmtmulti"],
                        rule_name => "columnref_1752",
                        token => ",",
                        token_val => ",",
                        val => "name",
                      },
        }, "SQL::Translator::Statement::Column::Reference"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 9836 (' 'a' = name AS eq_a   FROM try WHERE name <> 'â';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9838 ('a' = name AS eq_a   FROM try WHERE name <> 'â';')
---ENDTOKEN: SCONST, a
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "a",
    },
    type => "String",
    val => "a",
  },
}
---STARTSTATE: INITIAL @ 9840 (' = name AS eq_a   FROM try WHERE name <> 'â';')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 9842 (' name AS eq_a   FROM try WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 9847 (' AS eq_a   FROM try WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "AS",
      token_val => "AS",
      val => "name",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  location => {
                    char_pos => undef,
                    left_side => "AexprConst",
                    right_side => ["stmtmulti"],
                    rule_name => "AexprConst_1791",
                    token => undef,
                    token_val => undef,
                    val => "a",
                  },
                  type => "String",
                  val => "a",
                }, "SQL::Translator::Statement::A_Const"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => "AS",
                  token_val => "AS",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["name"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "AS",
                                token_val => "AS",
                                val => "name",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 9850 (' eq_a   FROM try WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, eq_a
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "a",
                        },
                        type => "String",
                        val => "a",
                      }, "SQL::Translator::Statement::A_Const"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        fields   => ["name"],
                        location => {
                                      char_pos => undef,
                                      left_side => "columnref",
                                      right_side => ["stmtmulti"],
                                      rule_name => "columnref_1752",
                                      token => "AS",
                                      token_val => "AS",
                                      val => "name",
                                    },
                      }, "SQL::Translator::Statement::Column::Reference"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "eq_a",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 9855 ('   FROM try WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
---STARTSTATE: INITIAL @ 9862 (' try WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, try
---STARTSTATE: INITIAL @ 9866 (' WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "try",
    },
    relname => "try",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 9872 (' name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 9877 (' <> 'â';')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "Op",
      token_val => "<>",
      val => "name",
    },
  },
}
---STARTSTATE: INITIAL @ 9880 (' 'â';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9882 ('â';')
---ENDTOKEN: SCONST, â
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "\xE2",
    },
    type => "String",
    val => "\xE2",
  },
}
---STARTSTATE: INITIAL @ 9884 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    fields   => ["name"],
                    location => {
                                  char_pos => undef,
                                  left_side => "columnref",
                                  right_side => ["stmtmulti"],
                                  rule_name => "columnref_1752",
                                  token => "Op",
                                  token_val => "<>",
                                  val => "name",
                                },
                  }, "SQL::Translator::Statement::Column::Reference"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1507",
                    token => ";",
                    token_val => ";",
                    val => ["<>"],
                  },
      name     => 'fix',
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "\xE2",
                    },
                    type => "String",
                    val => "\xE2",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{name} = $a->{A_Expr}{location}{val};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "a",
                                           },
                                           type => "String",
                                           val => "a",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "eq_a",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "Op",
                                                   token_val => "<>",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1507",
                                     token => ";",
                                     token_val => ";",
                                     val => ["<>"],
                                   },
                       name     => 'fix',
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "\xE2",
                                     },
                                     type => "String",
                                     val => "\xE2",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a->{SelectStmt}{targetList}[1]{val} = $a->{SelectStmt}{targetList}[1]{location}{val};
  $a->{SelectStmt}{whereClause}{name} = $a->{SelectStmt}{whereClause}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 9885 ('
SELECT name, 'a' = name AS t      FROM try where ')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 9892 (' name, 'a' = name AS t      FROM try where name = ')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 9897 (', 'a' = name AS t      FROM try where name = 'a';')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => ",",
      token_val => ",",
      val => "name",
    },
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => ",",
        token_val => ",",
        val => bless({
          fields   => ["name"],
          location => {
                        char_pos => undef,
                        left_side => "columnref",
                        right_side => ["stmtmulti"],
                        rule_name => "columnref_1752",
                        token => ",",
                        token_val => ",",
                        val => "name",
                      },
        }, "SQL::Translator::Statement::Column::Reference"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 9898 (' 'a' = name AS t      FROM try where name = 'a';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9900 ('a' = name AS t      FROM try where name = 'a';')
---ENDTOKEN: SCONST, a
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "a",
    },
    type => "String",
    val => "a",
  },
}
---STARTSTATE: INITIAL @ 9902 (' = name AS t      FROM try where name = 'a';')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 9904 (' name AS t      FROM try where name = 'a';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 9909 (' AS t      FROM try where name = 'a';')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "AS",
      token_val => "AS",
      val => "name",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  location => {
                    char_pos => undef,
                    left_side => "AexprConst",
                    right_side => ["stmtmulti"],
                    rule_name => "AexprConst_1791",
                    token => undef,
                    token_val => undef,
                    val => "a",
                  },
                  type => "String",
                  val => "a",
                }, "SQL::Translator::Statement::A_Const"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => "AS",
                  token_val => "AS",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["name"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "AS",
                                token_val => "AS",
                                val => "name",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 9912 (' t      FROM try where name = 'a';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "a",
                        },
                        type => "String",
                        val => "a",
                      }, "SQL::Translator::Statement::A_Const"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        fields   => ["name"],
                        location => {
                                      char_pos => undef,
                                      left_side => "columnref",
                                      right_side => ["stmtmulti"],
                                      rule_name => "columnref_1752",
                                      token => "AS",
                                      token_val => "AS",
                                      val => "name",
                                    },
                      }, "SQL::Translator::Statement::Column::Reference"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 9914 ('      FROM try where name = 'a';')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
---STARTSTATE: INITIAL @ 9924 (' try where name = 'a';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, try
---STARTSTATE: INITIAL @ 9928 (' where name = 'a';')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, where
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "where",
      val => "try",
    },
    relname => "try",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 9934 (' name = 'a';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 9939 (' = 'a';')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "=",
      token_val => "=",
      val => "name",
    },
  },
}
---STARTSTATE: INITIAL @ 9941 (' 'a';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9943 ('a';')
---ENDTOKEN: SCONST, a
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "a",
    },
    type => "String",
    val => "a",
  },
}
---STARTSTATE: INITIAL @ 9945 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["name"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "=",
                                token_val => "=",
                                val => "name",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => ";",
                  token_val => ";",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  location => {
                    char_pos => undef,
                    left_side => "AexprConst",
                    right_side => ["stmtmulti"],
                    rule_name => "AexprConst_1791",
                    token => undef,
                    token_val => undef,
                    val => "a",
                  },
                  type => "String",
                  val => "a",
                }, "SQL::Translator::Statement::A_Const"),
  },
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "where",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "a",
                                           },
                                           type => "String",
                                           val => "a",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "t",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "=",
                                                   token_val => "=",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1506",
                                     token => ";",
                                     token_val => ";",
                                     val => "=",
                                   },
                       name     => ["="],
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "a",
                                     },
                                     type => "String",
                                     val => "a",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a->{SelectStmt}{targetList}[1]{val} = $a->{SelectStmt}{targetList}[1]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 9946 ('
SELECT name, 'A' = name AS "eq_A" FROM try WHERE ')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 9953 (' name, 'A' = name AS "eq_A" FROM try WHERE name <>')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 9958 (', 'A' = name AS "eq_A" FROM try WHERE name <> 'â';')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => ",",
      token_val => ",",
      val => "name",
    },
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => ",",
        token_val => ",",
        val => bless({
          fields   => ["name"],
          location => {
                        char_pos => undef,
                        left_side => "columnref",
                        right_side => ["stmtmulti"],
                        rule_name => "columnref_1752",
                        token => ",",
                        token_val => ",",
                        val => "name",
                      },
        }, "SQL::Translator::Statement::Column::Reference"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 9959 (' 'A' = name AS "eq_A" FROM try WHERE name <> 'â';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 9961 ('A' = name AS "eq_A" FROM try WHERE name <> 'â';')
---ENDTOKEN: SCONST, A
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "A",
    },
    type => "String",
    val => "A",
  },
}
---STARTSTATE: INITIAL @ 9963 (' = name AS "eq_A" FROM try WHERE name <> 'â';')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 9965 (' name AS "eq_A" FROM try WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 9970 (' AS "eq_A" FROM try WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "AS",
      token_val => "AS",
      val => "name",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  location => {
                    char_pos => undef,
                    left_side => "AexprConst",
                    right_side => ["stmtmulti"],
                    rule_name => "AexprConst_1791",
                    token => undef,
                    token_val => undef,
                    val => "A",
                  },
                  type => "String",
                  val => "A",
                }, "SQL::Translator::Statement::A_Const"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => "AS",
                  token_val => "AS",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["name"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "AS",
                                token_val => "AS",
                                val => "name",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 9973 (' "eq_A" FROM try WHERE name <> 'â';')
---GOTMATCH: xdstart
---STARTSTATE: xd @ 9975 ('eq_A" FROM try WHERE name <> 'â';')
---ENDTOKEN: IDENT, eq_A
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "A",
                        },
                        type => "String",
                        val => "A",
                      }, "SQL::Translator::Statement::A_Const"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        fields   => ["name"],
                        location => {
                                      char_pos => undef,
                                      left_side => "columnref",
                                      right_side => ["stmtmulti"],
                                      rule_name => "columnref_1752",
                                      token => "AS",
                                      token_val => "AS",
                                      val => "name",
                                    },
                      }, "SQL::Translator::Statement::Column::Reference"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "eq_A",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 9980 (' FROM try WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
---STARTSTATE: INITIAL @ 9985 (' try WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, try
---STARTSTATE: INITIAL @ 9989 (' WHERE name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, WHERE
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "WHERE",
      val => "try",
    },
    relname => "try",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 9995 (' name <> 'â';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10000 (' <> 'â';')
---GOTMATCH: operator
---ENDTOKEN: Op, <>
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "Op",
      token_val => "<>",
      val => "name",
    },
  },
}
---STARTSTATE: INITIAL @ 10003 (' 'â';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10005 ('â';')
---ENDTOKEN: SCONST, â
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "\xE2",
    },
    type => "String",
    val => "\xE2",
  },
}
---STARTSTATE: INITIAL @ 10007 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    fields   => ["name"],
                    location => {
                                  char_pos => undef,
                                  left_side => "columnref",
                                  right_side => ["stmtmulti"],
                                  rule_name => "columnref_1752",
                                  token => "Op",
                                  token_val => "<>",
                                  val => "name",
                                },
                  }, "SQL::Translator::Statement::Column::Reference"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1507",
                    token => ";",
                    token_val => ";",
                    val => ["<>"],
                  },
      name     => 'fix',
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "\xE2",
                    },
                    type => "String",
                    val => "\xE2",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{name} = $a->{A_Expr}{location}{val};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "A",
                                           },
                                           type => "String",
                                           val => "A",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "eq_A",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "Op",
                                                   token_val => "<>",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1507",
                                     token => ";",
                                     token_val => ";",
                                     val => ["<>"],
                                   },
                       name     => 'fix',
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "\xE2",
                                     },
                                     type => "String",
                                     val => "\xE2",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a->{SelectStmt}{targetList}[1]{val} = $a->{SelectStmt}{targetList}[1]{location}{val};
  $a->{SelectStmt}{whereClause}{name} = $a->{SelectStmt}{whereClause}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10008 ('
SELECT name, 'A' = name AS t      FROM try where ')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 10015 (' name, 'A' = name AS t      FROM try where name = ')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10020 (', 'A' = name AS t      FROM try where name = 'A';')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => ",",
      token_val => ",",
      val => "name",
    },
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => ",",
        token_val => ",",
        val => bless({
          fields   => ["name"],
          location => {
                        char_pos => undef,
                        left_side => "columnref",
                        right_side => ["stmtmulti"],
                        rule_name => "columnref_1752",
                        token => ",",
                        token_val => ",",
                        val => "name",
                      },
        }, "SQL::Translator::Statement::Column::Reference"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10021 (' 'A' = name AS t      FROM try where name = 'A';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10023 ('A' = name AS t      FROM try where name = 'A';')
---ENDTOKEN: SCONST, A
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "A",
    },
    type => "String",
    val => "A",
  },
}
---STARTSTATE: INITIAL @ 10025 (' = name AS t      FROM try where name = 'A';')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 10027 (' name AS t      FROM try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10032 (' AS t      FROM try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "AS",
      token_val => "AS",
      val => "name",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  location => {
                    char_pos => undef,
                    left_side => "AexprConst",
                    right_side => ["stmtmulti"],
                    rule_name => "AexprConst_1791",
                    token => undef,
                    token_val => undef,
                    val => "A",
                  },
                  type => "String",
                  val => "A",
                }, "SQL::Translator::Statement::A_Const"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => "AS",
                  token_val => "AS",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["name"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "AS",
                                token_val => "AS",
                                val => "name",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 10035 (' t      FROM try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "A",
                        },
                        type => "String",
                        val => "A",
                      }, "SQL::Translator::Statement::A_Const"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        fields   => ["name"],
                        location => {
                                      char_pos => undef,
                                      left_side => "columnref",
                                      right_side => ["stmtmulti"],
                                      rule_name => "columnref_1752",
                                      token => "AS",
                                      token_val => "AS",
                                      val => "name",
                                    },
                      }, "SQL::Translator::Statement::Column::Reference"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10037 ('      FROM try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
---STARTSTATE: INITIAL @ 10047 (' try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, try
---STARTSTATE: INITIAL @ 10051 (' where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, where
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "where",
      val => "try",
    },
    relname => "try",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 10057 (' name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10062 (' = 'A';')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "=",
      token_val => "=",
      val => "name",
    },
  },
}
---STARTSTATE: INITIAL @ 10064 (' 'A';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10066 ('A';')
---ENDTOKEN: SCONST, A
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "A",
    },
    type => "String",
    val => "A",
  },
}
---STARTSTATE: INITIAL @ 10068 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["name"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "=",
                                token_val => "=",
                                val => "name",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => ";",
                  token_val => ";",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  location => {
                    char_pos => undef,
                    left_side => "AexprConst",
                    right_side => ["stmtmulti"],
                    rule_name => "AexprConst_1791",
                    token => undef,
                    token_val => undef,
                    val => "A",
                  },
                  type => "String",
                  val => "A",
                }, "SQL::Translator::Statement::A_Const"),
  },
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "where",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "A",
                                           },
                                           type => "String",
                                           val => "A",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "t",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "=",
                                                   token_val => "=",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1506",
                                     token => ";",
                                     token_val => ";",
                                     val => "=",
                                   },
                       name     => ["="],
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "A",
                                     },
                                     type => "String",
                                     val => "A",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a->{SelectStmt}{targetList}[1]{val} = $a->{SelectStmt}{targetList}[1]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10069 ('
SELECT name, 'A' = name AS t      FROM try where ')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 10076 (' name, 'A' = name AS t      FROM try where name = ')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10081 (', 'A' = name AS t      FROM try where name = 'A';')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => ",",
      token_val => ",",
      val => "name",
    },
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => ",",
        token_val => ",",
        val => bless({
          fields   => ["name"],
          location => {
                        char_pos => undef,
                        left_side => "columnref",
                        right_side => ["stmtmulti"],
                        rule_name => "columnref_1752",
                        token => ",",
                        token_val => ",",
                        val => "name",
                      },
        }, "SQL::Translator::Statement::Column::Reference"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10082 (' 'A' = name AS t      FROM try where name = 'A';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10084 ('A' = name AS t      FROM try where name = 'A';')
---ENDTOKEN: SCONST, A
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "A",
    },
    type => "String",
    val => "A",
  },
}
---STARTSTATE: INITIAL @ 10086 (' = name AS t      FROM try where name = 'A';')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 10088 (' name AS t      FROM try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10093 (' AS t      FROM try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "AS",
      token_val => "AS",
      val => "name",
    },
  },
}
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  location => {
                    char_pos => undef,
                    left_side => "AexprConst",
                    right_side => ["stmtmulti"],
                    rule_name => "AexprConst_1791",
                    token => undef,
                    token_val => undef,
                    val => "A",
                  },
                  type => "String",
                  val => "A",
                }, "SQL::Translator::Statement::A_Const"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => "AS",
                  token_val => "AS",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  fields   => ["name"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "AS",
                                token_val => "AS",
                                val => "name",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
  },
}
---STARTSTATE: INITIAL @ 10096 (' t      FROM try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "A",
                        },
                        type => "String",
                        val => "A",
                      }, "SQL::Translator::Statement::A_Const"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        fields   => ["name"],
                        location => {
                                      char_pos => undef,
                                      left_side => "columnref",
                                      right_side => ["stmtmulti"],
                                      rule_name => "columnref_1752",
                                      token => "AS",
                                      token_val => "AS",
                                      val => "name",
                                    },
                      }, "SQL::Translator::Statement::Column::Reference"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10098 ('      FROM try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: FROM, FROM
---STARTSTATE: INITIAL @ 10108 (' try where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, try
---STARTSTATE: INITIAL @ 10112 (' where name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: WHERE, where
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "WHERE",
      token_val => "where",
      val => "try",
    },
    relname => "try",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 10118 (' name = 'A';')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10123 (' = 'A';')
---GOTMATCH: self
---ENDTOKEN: =, =
{
  ColumnReference => {
    location => {
      char_pos => undef,
      left_side => "columnref",
      right_side => ["stmtmulti"],
      rule_name => "columnref_1752",
      token => "=",
      token_val => "=",
      val => "name",
    },
  },
}
---STARTSTATE: INITIAL @ 10125 (' 'A';')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10127 ('A';')
---ENDTOKEN: SCONST, A
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "A",
    },
    type => "String",
    val => "A",
  },
}
---STARTSTATE: INITIAL @ 10129 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  A_Expr => {
    kind     => "OP",
    lexpr    => bless({
                  fields   => ["name"],
                  location => {
                                char_pos => undef,
                                left_side => "columnref",
                                right_side => ["stmtmulti"],
                                rule_name => "columnref_1752",
                                token => "=",
                                token_val => "=",
                                val => "name",
                              },
                }, "SQL::Translator::Statement::Column::Reference"),
    location => {
                  char_pos => undef,
                  left_side => "a_expr",
                  right_side => ["stmtmulti", ";", "stmt"],
                  rule_name => "a_expr_1506",
                  token => ";",
                  token_val => ";",
                  val => "=",
                },
    name     => ["="],
    rexpr    => bless({
                  location => {
                    char_pos => undef,
                    left_side => "AexprConst",
                    right_side => ["stmtmulti"],
                    rule_name => "AexprConst_1791",
                    token => undef,
                    token_val => undef,
                    val => "A",
                  },
                  type => "String",
                  val => "A",
                }, "SQL::Translator::Statement::A_Const"),
  },
}
do {
  my $a = {
    SelectStmt => {
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "where",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "A",
                                           },
                                           type => "String",
                                           val => "A",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "t",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "=",
                                                   token_val => "=",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1506",
                                     token => ";",
                                     token_val => ";",
                                     val => "=",
                                   },
                       name     => ["="],
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "A",
                                     },
                                     type => "String",
                                     val => "A",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a->{SelectStmt}{targetList}[1]{val} = $a->{SelectStmt}{targetList}[1]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10130 ('

-- expected failures on duplicate key
INSERT INT')
---GOTMATCH: identifier
---ENDTOKEN: INSERT, INSERT
---STARTSTATE: INITIAL @ 10176 (' INTO try (name) VALUES ('a');')
---GOTMATCH: identifier
---ENDTOKEN: INTO, INTO
---STARTSTATE: INITIAL @ 10181 (' try (name) VALUES ('a');')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, try
---STARTSTATE: INITIAL @ 10185 (' (name) VALUES ('a');')
---GOTMATCH: self
---ENDTOKEN: (, (
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "(",
      token_val => "(",
      val => "try",
    },
    relname => "try",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 10187 ('name) VALUES ('a');')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10191 (') VALUES ('a');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  ResultTarget => {
    location => {
      char_pos => undef,
      left_side => "insert_column_item",
      right_side => ["stmtmulti"],
      rule_name => "insert_column_item_1225",
      token => ")",
      token_val => ")",
      val => "name",
    },
    name => "name",
  },
}
---STARTSTATE: INITIAL @ 10192 (' VALUES ('a');')
---GOTMATCH: identifier
---ENDTOKEN: VALUES, VALUES
---STARTSTATE: INITIAL @ 10199 (' ('a');')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10201 (''a');')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10202 ('a');')
---ENDTOKEN: SCONST, a
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "a",
    },
    type => "String",
    val => "a",
  },
}
---STARTSTATE: INITIAL @ 10204 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  SelectStmt => {
    valuesLists => [
      bless({
        location => {
          char_pos => undef,
          left_side => "AexprConst",
          right_side => ["stmtmulti"],
          rule_name => "AexprConst_1791",
          token => undef,
          token_val => undef,
          val => "a",
        },
        type => "String",
        val => "a",
      }, "SQL::Translator::Statement::A_Const"),
    ],
  },
}
---STARTSTATE: INITIAL @ 10205 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  InsertStmt => {
    cols => [
      bless({
        location => {
          char_pos => undef,
          left_side => "insert_column_item",
          right_side => ["stmtmulti"],
          rule_name => "insert_column_item_1225",
          token => ")",
          token_val => ")",
          val => "name",
        },
        name => "name",
      }, "SQL::Translator::Statement::ResultTarget"),
    ],
    selectStmt => bless({
      valuesLists => [
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "a",
          },
          type => "String",
          val => "a",
        }, "SQL::Translator::Statement::A_Const"),
      ],
    }, "SQL::Translator::Statement::Select"),
  },
}
---STARTSTATE: INITIAL @ 10206 ('
INSERT INTO try (name) VALUES ('A');
INSERT INTO ')
---GOTMATCH: identifier
---ENDTOKEN: INSERT, INSERT
---STARTSTATE: INITIAL @ 10213 (' INTO try (name) VALUES ('A');')
---GOTMATCH: identifier
---ENDTOKEN: INTO, INTO
---STARTSTATE: INITIAL @ 10218 (' try (name) VALUES ('A');')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, try
---STARTSTATE: INITIAL @ 10222 (' (name) VALUES ('A');')
---GOTMATCH: self
---ENDTOKEN: (, (
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "(",
      token_val => "(",
      val => "try",
    },
    relname => "try",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 10224 ('name) VALUES ('A');')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10228 (') VALUES ('A');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  ResultTarget => {
    location => {
      char_pos => undef,
      left_side => "insert_column_item",
      right_side => ["stmtmulti"],
      rule_name => "insert_column_item_1225",
      token => ")",
      token_val => ")",
      val => "name",
    },
    name => "name",
  },
}
---STARTSTATE: INITIAL @ 10229 (' VALUES ('A');')
---GOTMATCH: identifier
---ENDTOKEN: VALUES, VALUES
---STARTSTATE: INITIAL @ 10236 (' ('A');')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10238 (''A');')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10239 ('A');')
---ENDTOKEN: SCONST, A
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "A",
    },
    type => "String",
    val => "A",
  },
}
---STARTSTATE: INITIAL @ 10241 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  SelectStmt => {
    valuesLists => [
      bless({
        location => {
          char_pos => undef,
          left_side => "AexprConst",
          right_side => ["stmtmulti"],
          rule_name => "AexprConst_1791",
          token => undef,
          token_val => undef,
          val => "A",
        },
        type => "String",
        val => "A",
      }, "SQL::Translator::Statement::A_Const"),
    ],
  },
}
---STARTSTATE: INITIAL @ 10242 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  InsertStmt => {
    cols => [
      bless({
        location => {
          char_pos => undef,
          left_side => "insert_column_item",
          right_side => ["stmtmulti"],
          rule_name => "insert_column_item_1225",
          token => ")",
          token_val => ")",
          val => "name",
        },
        name => "name",
      }, "SQL::Translator::Statement::ResultTarget"),
    ],
    selectStmt => bless({
      valuesLists => [
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "A",
          },
          type => "String",
          val => "A",
        }, "SQL::Translator::Statement::A_Const"),
      ],
    }, "SQL::Translator::Statement::Select"),
  },
}
---STARTSTATE: INITIAL @ 10243 ('
INSERT INTO try (name) VALUES ('aB');

-- Make su')
---GOTMATCH: identifier
---ENDTOKEN: INSERT, INSERT
---STARTSTATE: INITIAL @ 10250 (' INTO try (name) VALUES ('aB');')
---GOTMATCH: identifier
---ENDTOKEN: INTO, INTO
---STARTSTATE: INITIAL @ 10255 (' try (name) VALUES ('aB');')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, try
---STARTSTATE: INITIAL @ 10259 (' (name) VALUES ('aB');')
---GOTMATCH: self
---ENDTOKEN: (, (
{
  RangeVar => {
    inhOpt => "DEFAULT",
    location => {
      char_pos => undef,
      left_side => "qualified_name",
      right_side => ["stmtmulti"],
      rule_name => "qualified_name_1777",
      token => "(",
      token_val => "(",
      val => "try",
    },
    relname => "try",
    relpersistence => "\"p\"",
  },
}
---STARTSTATE: INITIAL @ 10261 ('name) VALUES ('aB');')
---GOTMATCH: identifier
---ENDTOKEN: NAME, name
---STARTSTATE: INITIAL @ 10265 (') VALUES ('aB');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  ResultTarget => {
    location => {
      char_pos => undef,
      left_side => "insert_column_item",
      right_side => ["stmtmulti"],
      rule_name => "insert_column_item_1225",
      token => ")",
      token_val => ")",
      val => "name",
    },
    name => "name",
  },
}
---STARTSTATE: INITIAL @ 10266 (' VALUES ('aB');')
---GOTMATCH: identifier
---ENDTOKEN: VALUES, VALUES
---STARTSTATE: INITIAL @ 10273 (' ('aB');')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10275 (''aB');')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10276 ('aB');')
---ENDTOKEN: SCONST, aB
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "aB",
    },
    type => "String",
    val => "aB",
  },
}
---STARTSTATE: INITIAL @ 10279 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{
  SelectStmt => {
    valuesLists => [
      bless({
        location => {
          char_pos => undef,
          left_side => "AexprConst",
          right_side => ["stmtmulti"],
          rule_name => "AexprConst_1791",
          token => undef,
          token_val => undef,
          val => "aB",
        },
        type => "String",
        val => "aB",
      }, "SQL::Translator::Statement::A_Const"),
    ],
  },
}
---STARTSTATE: INITIAL @ 10280 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  InsertStmt => {
    cols => [
      bless({
        location => {
          char_pos => undef,
          left_side => "insert_column_item",
          right_side => ["stmtmulti"],
          rule_name => "insert_column_item_1225",
          token => ")",
          token_val => ")",
          val => "name",
        },
        name => "name",
      }, "SQL::Translator::Statement::ResultTarget"),
    ],
    selectStmt => bless({
      valuesLists => [
        bless({
          location => {
            char_pos => undef,
            left_side => "AexprConst",
            right_side => ["stmtmulti"],
            rule_name => "AexprConst_1791",
            token => undef,
            token_val => undef,
            val => "aB",
          },
          type => "String",
          val => "aB",
        }, "SQL::Translator::Statement::A_Const"),
      ],
    }, "SQL::Translator::Statement::Select"),
  },
}
---STARTSTATE: INITIAL @ 10281 ('

-- Make sure that citext_smaller() and citext_la')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 10358 (' citext_smaller( 'aa'::citext, 'ab'::citext ) = 'a')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext_smaller
---STARTSTATE: INITIAL @ 10373 ('( 'aa'::citext, 'ab'::citext ) = 'aa' AS t;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10374 (' 'aa'::citext, 'ab'::citext ) = 'aa' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10376 ('aa'::citext, 'ab'::citext ) = 'aa' AS t;')
---ENDTOKEN: SCONST, aa
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "aa",
    },
    type => "String",
    val => "aa",
  },
}
---STARTSTATE: INITIAL @ 10379 ('::citext, 'ab'::citext ) = 'aa' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10381 ('citext, 'ab'::citext ) = 'aa' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10387 (', 'ab'::citext ) = 'aa' AS t;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "aa",
      },
      type => "String",
      val => "aa",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ",",
      token_val => ",",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10388 (' 'ab'::citext ) = 'aa' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10390 ('ab'::citext ) = 'aa' AS t;')
---ENDTOKEN: SCONST, ab
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "ab",
    },
    type => "String",
    val => "ab",
  },
}
---STARTSTATE: INITIAL @ 10393 ('::citext ) = 'aa' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10395 ('citext ) = 'aa' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10401 (' ) = 'aa' AS t;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "ab",
      },
      type => "String",
      val => "ab",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ")",
      token_val => ")",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10403 (' = 'aa' AS t;')
---GOTMATCH: self
---ENDTOKEN: =, =
do {
  my $a = {
    FunctionCall => {
      agg_distinct => 0,
      agg_star => 0,
      args => [
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "aa",
            },
            type => "String",
            val => "aa",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ",",
            token_val => ",",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "ab",
            },
            type => "String",
            val => "ab",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ")",
            token_val => ")",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      ],
      func_variadic => 0,
      funcname => ["citext_smaller"],
      location => {
        char_pos => undef,
        left_side => "func_expr",
        right_side => ["stmtmulti"],
        rule_name => "func_expr_1585",
        token => "=",
        token_val => "=",
        val => 'fix',
      },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10405 (' 'aa' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10407 ('aa' AS t;')
---ENDTOKEN: SCONST, aa
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "aa",
    },
    type => "String",
    val => "aa",
  },
}
---STARTSTATE: INITIAL @ 10410 (' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    agg_distinct => 0,
                    agg_star => 0,
                    args => [
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "aa",
                          },
                          type => "String",
                          val => "aa",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ",",
                          token_val => ",",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "ab",
                          },
                          type => "String",
                          val => "ab",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ")",
                          token_val => ")",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                    ],
                    func_variadic => 0,
                    funcname => ["citext_smaller"],
                    location => {
                      char_pos => undef,
                      left_side => "func_expr",
                      right_side => ["stmtmulti"],
                      rule_name => "func_expr_1585",
                      token => "=",
                      token_val => "=",
                      val => 'fix',
                    },
                  }, "SQL::Translator::Statement::Function::Call"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1506",
                    token => "AS",
                    token_val => "AS",
                    val => "=",
                  },
      name     => ["="],
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "aa",
                    },
                    type => "String",
                    val => "aa",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{lexpr}{location}{val} = $a->{A_Expr}{lexpr}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10413 (' t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        agg_distinct => 0,
                        agg_star => 0,
                        args => [
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "aa",
                              },
                              type => "String",
                              val => "aa",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ",",
                              token_val => ",",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ",",
                                               token_val => ",",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "ab",
                              },
                              type => "String",
                              val => "ab",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ")",
                              token_val => ")",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ")",
                                               token_val => ")",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                        ],
                        func_variadic => 0,
                        funcname => ["citext_smaller"],
                        location => {
                          char_pos => undef,
                          left_side => "func_expr",
                          right_side => ["stmtmulti"],
                          rule_name => "func_expr_1585",
                          token => "=",
                          token_val => "=",
                          val => 'fix',
                        },
                      }, "SQL::Translator::Statement::Function::Call"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "aa",
                        },
                        type => "String",
                        val => "aa",
                      }, "SQL::Translator::Statement::A_Const"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{location}{val}{lexpr}{location}{val} = $a->{ResultTarget}{location}{val}{lexpr}{funcname};
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10415 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aa",
                                  },
                                  type => "String",
                                  val => "aa",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "ab",
                                  },
                                  type => "String",
                                  val => "ab",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_smaller"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "aa",
                            },
                            type => "String",
                            val => "aa",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10416 ('
SELECT citext_smaller( 'AAAA'::citext, 'bbbb'::ci')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 10423 (' citext_smaller( 'AAAA'::citext, 'bbbb'::citext ) ')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext_smaller
---STARTSTATE: INITIAL @ 10438 ('( 'AAAA'::citext, 'bbbb'::citext ) = 'AAAA' AS t;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10439 (' 'AAAA'::citext, 'bbbb'::citext ) = 'AAAA' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10441 ('AAAA'::citext, 'bbbb'::citext ) = 'AAAA' AS t;')
---ENDTOKEN: SCONST, AAAA
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "AAAA",
    },
    type => "String",
    val => "AAAA",
  },
}
---STARTSTATE: INITIAL @ 10446 ('::citext, 'bbbb'::citext ) = 'AAAA' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10448 ('citext, 'bbbb'::citext ) = 'AAAA' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10454 (', 'bbbb'::citext ) = 'AAAA' AS t;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "AAAA",
      },
      type => "String",
      val => "AAAA",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ",",
      token_val => ",",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10455 (' 'bbbb'::citext ) = 'AAAA' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10457 ('bbbb'::citext ) = 'AAAA' AS t;')
---ENDTOKEN: SCONST, bbbb
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "bbbb",
    },
    type => "String",
    val => "bbbb",
  },
}
---STARTSTATE: INITIAL @ 10462 ('::citext ) = 'AAAA' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10464 ('citext ) = 'AAAA' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10470 (' ) = 'AAAA' AS t;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "bbbb",
      },
      type => "String",
      val => "bbbb",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ")",
      token_val => ")",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10472 (' = 'AAAA' AS t;')
---GOTMATCH: self
---ENDTOKEN: =, =
do {
  my $a = {
    FunctionCall => {
      agg_distinct => 0,
      agg_star => 0,
      args => [
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "AAAA",
            },
            type => "String",
            val => "AAAA",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ",",
            token_val => ",",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "bbbb",
            },
            type => "String",
            val => "bbbb",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ")",
            token_val => ")",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      ],
      func_variadic => 0,
      funcname => ["citext_smaller"],
      location => {
        char_pos => undef,
        left_side => "func_expr",
        right_side => ["stmtmulti"],
        rule_name => "func_expr_1585",
        token => "=",
        token_val => "=",
        val => 'fix',
      },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10474 (' 'AAAA' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10476 ('AAAA' AS t;')
---ENDTOKEN: SCONST, AAAA
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "AAAA",
    },
    type => "String",
    val => "AAAA",
  },
}
---STARTSTATE: INITIAL @ 10481 (' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    agg_distinct => 0,
                    agg_star => 0,
                    args => [
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "AAAA",
                          },
                          type => "String",
                          val => "AAAA",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ",",
                          token_val => ",",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "bbbb",
                          },
                          type => "String",
                          val => "bbbb",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ")",
                          token_val => ")",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                    ],
                    func_variadic => 0,
                    funcname => ["citext_smaller"],
                    location => {
                      char_pos => undef,
                      left_side => "func_expr",
                      right_side => ["stmtmulti"],
                      rule_name => "func_expr_1585",
                      token => "=",
                      token_val => "=",
                      val => 'fix',
                    },
                  }, "SQL::Translator::Statement::Function::Call"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1506",
                    token => "AS",
                    token_val => "AS",
                    val => "=",
                  },
      name     => ["="],
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "AAAA",
                    },
                    type => "String",
                    val => "AAAA",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{lexpr}{location}{val} = $a->{A_Expr}{lexpr}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10484 (' t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        agg_distinct => 0,
                        agg_star => 0,
                        args => [
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "AAAA",
                              },
                              type => "String",
                              val => "AAAA",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ",",
                              token_val => ",",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ",",
                                               token_val => ",",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "bbbb",
                              },
                              type => "String",
                              val => "bbbb",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ")",
                              token_val => ")",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ")",
                                               token_val => ")",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                        ],
                        func_variadic => 0,
                        funcname => ["citext_smaller"],
                        location => {
                          char_pos => undef,
                          left_side => "func_expr",
                          right_side => ["stmtmulti"],
                          rule_name => "func_expr_1585",
                          token => "=",
                          token_val => "=",
                          val => 'fix',
                        },
                      }, "SQL::Translator::Statement::Function::Call"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "AAAA",
                        },
                        type => "String",
                        val => "AAAA",
                      }, "SQL::Translator::Statement::A_Const"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{location}{val}{lexpr}{location}{val} = $a->{ResultTarget}{location}{val}{lexpr}{funcname};
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10486 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "AAAA",
                                  },
                                  type => "String",
                                  val => "AAAA",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "bbbb",
                                  },
                                  type => "String",
                                  val => "bbbb",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_smaller"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "AAAA",
                            },
                            type => "String",
                            val => "AAAA",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10487 ('
SELECT citext_smaller( 'aardvark'::citext, 'Aaba'')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 10494 (' citext_smaller( 'aardvark'::citext, 'Aaba'::citex')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext_smaller
---STARTSTATE: INITIAL @ 10509 ('( 'aardvark'::citext, 'Aaba'::citext ) = 'Aaba' AS')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10510 (' 'aardvark'::citext, 'Aaba'::citext ) = 'Aaba' AS ')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10512 ('aardvark'::citext, 'Aaba'::citext ) = 'Aaba' AS t;')
---ENDTOKEN: SCONST, aardvark
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "aardvark",
    },
    type => "String",
    val => "aardvark",
  },
}
---STARTSTATE: INITIAL @ 10521 ('::citext, 'Aaba'::citext ) = 'Aaba' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10523 ('citext, 'Aaba'::citext ) = 'Aaba' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10529 (', 'Aaba'::citext ) = 'Aaba' AS t;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "aardvark",
      },
      type => "String",
      val => "aardvark",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ",",
      token_val => ",",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10530 (' 'Aaba'::citext ) = 'Aaba' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10532 ('Aaba'::citext ) = 'Aaba' AS t;')
---ENDTOKEN: SCONST, Aaba
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "Aaba",
    },
    type => "String",
    val => "Aaba",
  },
}
---STARTSTATE: INITIAL @ 10537 ('::citext ) = 'Aaba' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10539 ('citext ) = 'Aaba' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10545 (' ) = 'Aaba' AS t;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "Aaba",
      },
      type => "String",
      val => "Aaba",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ")",
      token_val => ")",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10547 (' = 'Aaba' AS t;')
---GOTMATCH: self
---ENDTOKEN: =, =
do {
  my $a = {
    FunctionCall => {
      agg_distinct => 0,
      agg_star => 0,
      args => [
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "aardvark",
            },
            type => "String",
            val => "aardvark",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ",",
            token_val => ",",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "Aaba",
            },
            type => "String",
            val => "Aaba",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ")",
            token_val => ")",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      ],
      func_variadic => 0,
      funcname => ["citext_smaller"],
      location => {
        char_pos => undef,
        left_side => "func_expr",
        right_side => ["stmtmulti"],
        rule_name => "func_expr_1585",
        token => "=",
        token_val => "=",
        val => 'fix',
      },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10549 (' 'Aaba' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10551 ('Aaba' AS t;')
---ENDTOKEN: SCONST, Aaba
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "Aaba",
    },
    type => "String",
    val => "Aaba",
  },
}
---STARTSTATE: INITIAL @ 10556 (' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    agg_distinct => 0,
                    agg_star => 0,
                    args => [
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "aardvark",
                          },
                          type => "String",
                          val => "aardvark",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ",",
                          token_val => ",",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "Aaba",
                          },
                          type => "String",
                          val => "Aaba",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ")",
                          token_val => ")",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                    ],
                    func_variadic => 0,
                    funcname => ["citext_smaller"],
                    location => {
                      char_pos => undef,
                      left_side => "func_expr",
                      right_side => ["stmtmulti"],
                      rule_name => "func_expr_1585",
                      token => "=",
                      token_val => "=",
                      val => 'fix',
                    },
                  }, "SQL::Translator::Statement::Function::Call"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1506",
                    token => "AS",
                    token_val => "AS",
                    val => "=",
                  },
      name     => ["="],
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "Aaba",
                    },
                    type => "String",
                    val => "Aaba",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{lexpr}{location}{val} = $a->{A_Expr}{lexpr}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10559 (' t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        agg_distinct => 0,
                        agg_star => 0,
                        args => [
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "aardvark",
                              },
                              type => "String",
                              val => "aardvark",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ",",
                              token_val => ",",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ",",
                                               token_val => ",",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "Aaba",
                              },
                              type => "String",
                              val => "Aaba",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ")",
                              token_val => ")",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ")",
                                               token_val => ")",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                        ],
                        func_variadic => 0,
                        funcname => ["citext_smaller"],
                        location => {
                          char_pos => undef,
                          left_side => "func_expr",
                          right_side => ["stmtmulti"],
                          rule_name => "func_expr_1585",
                          token => "=",
                          token_val => "=",
                          val => 'fix',
                        },
                      }, "SQL::Translator::Statement::Function::Call"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "Aaba",
                        },
                        type => "String",
                        val => "Aaba",
                      }, "SQL::Translator::Statement::A_Const"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{location}{val}{lexpr}{location}{val} = $a->{ResultTarget}{location}{val}{lexpr}{funcname};
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10561 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aardvark",
                                  },
                                  type => "String",
                                  val => "aardvark",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "Aaba",
                                  },
                                  type => "String",
                                  val => "Aaba",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_smaller"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "Aaba",
                            },
                            type => "String",
                            val => "Aaba",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10562 ('
SELECT citext_smaller( 'aardvark'::citext, 'AARDV')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 10569 (' citext_smaller( 'aardvark'::citext, 'AARDVARK'::c')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext_smaller
---STARTSTATE: INITIAL @ 10584 ('( 'aardvark'::citext, 'AARDVARK'::citext ) = 'AARD')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10585 (' 'aardvark'::citext, 'AARDVARK'::citext ) = 'AARDV')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10587 ('aardvark'::citext, 'AARDVARK'::citext ) = 'AARDVAR')
---ENDTOKEN: SCONST, aardvark
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "aardvark",
    },
    type => "String",
    val => "aardvark",
  },
}
---STARTSTATE: INITIAL @ 10596 ('::citext, 'AARDVARK'::citext ) = 'AARDVARK' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10598 ('citext, 'AARDVARK'::citext ) = 'AARDVARK' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10604 (', 'AARDVARK'::citext ) = 'AARDVARK' AS t;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "aardvark",
      },
      type => "String",
      val => "aardvark",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ",",
      token_val => ",",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10605 (' 'AARDVARK'::citext ) = 'AARDVARK' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10607 ('AARDVARK'::citext ) = 'AARDVARK' AS t;')
---ENDTOKEN: SCONST, AARDVARK
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "AARDVARK",
    },
    type => "String",
    val => "AARDVARK",
  },
}
---STARTSTATE: INITIAL @ 10616 ('::citext ) = 'AARDVARK' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10618 ('citext ) = 'AARDVARK' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10624 (' ) = 'AARDVARK' AS t;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "AARDVARK",
      },
      type => "String",
      val => "AARDVARK",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ")",
      token_val => ")",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10626 (' = 'AARDVARK' AS t;')
---GOTMATCH: self
---ENDTOKEN: =, =
do {
  my $a = {
    FunctionCall => {
      agg_distinct => 0,
      agg_star => 0,
      args => [
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "aardvark",
            },
            type => "String",
            val => "aardvark",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ",",
            token_val => ",",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "AARDVARK",
            },
            type => "String",
            val => "AARDVARK",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ")",
            token_val => ")",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      ],
      func_variadic => 0,
      funcname => ["citext_smaller"],
      location => {
        char_pos => undef,
        left_side => "func_expr",
        right_side => ["stmtmulti"],
        rule_name => "func_expr_1585",
        token => "=",
        token_val => "=",
        val => 'fix',
      },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10628 (' 'AARDVARK' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10630 ('AARDVARK' AS t;')
---ENDTOKEN: SCONST, AARDVARK
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "AARDVARK",
    },
    type => "String",
    val => "AARDVARK",
  },
}
---STARTSTATE: INITIAL @ 10639 (' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    agg_distinct => 0,
                    agg_star => 0,
                    args => [
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "aardvark",
                          },
                          type => "String",
                          val => "aardvark",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ",",
                          token_val => ",",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "AARDVARK",
                          },
                          type => "String",
                          val => "AARDVARK",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ")",
                          token_val => ")",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                    ],
                    func_variadic => 0,
                    funcname => ["citext_smaller"],
                    location => {
                      char_pos => undef,
                      left_side => "func_expr",
                      right_side => ["stmtmulti"],
                      rule_name => "func_expr_1585",
                      token => "=",
                      token_val => "=",
                      val => 'fix',
                    },
                  }, "SQL::Translator::Statement::Function::Call"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1506",
                    token => "AS",
                    token_val => "AS",
                    val => "=",
                  },
      name     => ["="],
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "AARDVARK",
                    },
                    type => "String",
                    val => "AARDVARK",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{lexpr}{location}{val} = $a->{A_Expr}{lexpr}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10642 (' t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        agg_distinct => 0,
                        agg_star => 0,
                        args => [
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "aardvark",
                              },
                              type => "String",
                              val => "aardvark",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ",",
                              token_val => ",",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ",",
                                               token_val => ",",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "AARDVARK",
                              },
                              type => "String",
                              val => "AARDVARK",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ")",
                              token_val => ")",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ")",
                                               token_val => ")",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                        ],
                        func_variadic => 0,
                        funcname => ["citext_smaller"],
                        location => {
                          char_pos => undef,
                          left_side => "func_expr",
                          right_side => ["stmtmulti"],
                          rule_name => "func_expr_1585",
                          token => "=",
                          token_val => "=",
                          val => 'fix',
                        },
                      }, "SQL::Translator::Statement::Function::Call"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "AARDVARK",
                        },
                        type => "String",
                        val => "AARDVARK",
                      }, "SQL::Translator::Statement::A_Const"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{location}{val}{lexpr}{location}{val} = $a->{ResultTarget}{location}{val}{lexpr}{funcname};
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10644 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aardvark",
                                  },
                                  type => "String",
                                  val => "aardvark",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "AARDVARK",
                                  },
                                  type => "String",
                                  val => "AARDVARK",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_smaller"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "AARDVARK",
                            },
                            type => "String",
                            val => "AARDVARK",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10645 ('

SELECT citext_larger( 'aa'::citext, 'ab'::citext')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 10653 (' citext_larger( 'aa'::citext, 'ab'::citext ) = 'ab')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext_larger
---STARTSTATE: INITIAL @ 10667 ('( 'aa'::citext, 'ab'::citext ) = 'ab' AS t;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10668 (' 'aa'::citext, 'ab'::citext ) = 'ab' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10670 ('aa'::citext, 'ab'::citext ) = 'ab' AS t;')
---ENDTOKEN: SCONST, aa
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "aa",
    },
    type => "String",
    val => "aa",
  },
}
---STARTSTATE: INITIAL @ 10673 ('::citext, 'ab'::citext ) = 'ab' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10675 ('citext, 'ab'::citext ) = 'ab' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10681 (', 'ab'::citext ) = 'ab' AS t;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "aa",
      },
      type => "String",
      val => "aa",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ",",
      token_val => ",",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10682 (' 'ab'::citext ) = 'ab' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10684 ('ab'::citext ) = 'ab' AS t;')
---ENDTOKEN: SCONST, ab
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "ab",
    },
    type => "String",
    val => "ab",
  },
}
---STARTSTATE: INITIAL @ 10687 ('::citext ) = 'ab' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10689 ('citext ) = 'ab' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10695 (' ) = 'ab' AS t;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "ab",
      },
      type => "String",
      val => "ab",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ")",
      token_val => ")",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10697 (' = 'ab' AS t;')
---GOTMATCH: self
---ENDTOKEN: =, =
do {
  my $a = {
    FunctionCall => {
      agg_distinct => 0,
      agg_star => 0,
      args => [
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "aa",
            },
            type => "String",
            val => "aa",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ",",
            token_val => ",",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "ab",
            },
            type => "String",
            val => "ab",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ")",
            token_val => ")",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      ],
      func_variadic => 0,
      funcname => ["citext_larger"],
      location => {
        char_pos => undef,
        left_side => "func_expr",
        right_side => ["stmtmulti"],
        rule_name => "func_expr_1585",
        token => "=",
        token_val => "=",
        val => 'fix',
      },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10699 (' 'ab' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10701 ('ab' AS t;')
---ENDTOKEN: SCONST, ab
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "ab",
    },
    type => "String",
    val => "ab",
  },
}
---STARTSTATE: INITIAL @ 10704 (' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    agg_distinct => 0,
                    agg_star => 0,
                    args => [
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "aa",
                          },
                          type => "String",
                          val => "aa",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ",",
                          token_val => ",",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "ab",
                          },
                          type => "String",
                          val => "ab",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ")",
                          token_val => ")",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                    ],
                    func_variadic => 0,
                    funcname => ["citext_larger"],
                    location => {
                      char_pos => undef,
                      left_side => "func_expr",
                      right_side => ["stmtmulti"],
                      rule_name => "func_expr_1585",
                      token => "=",
                      token_val => "=",
                      val => 'fix',
                    },
                  }, "SQL::Translator::Statement::Function::Call"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1506",
                    token => "AS",
                    token_val => "AS",
                    val => "=",
                  },
      name     => ["="],
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "ab",
                    },
                    type => "String",
                    val => "ab",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{lexpr}{location}{val} = $a->{A_Expr}{lexpr}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10707 (' t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        agg_distinct => 0,
                        agg_star => 0,
                        args => [
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "aa",
                              },
                              type => "String",
                              val => "aa",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ",",
                              token_val => ",",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ",",
                                               token_val => ",",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "ab",
                              },
                              type => "String",
                              val => "ab",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ")",
                              token_val => ")",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ")",
                                               token_val => ")",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                        ],
                        func_variadic => 0,
                        funcname => ["citext_larger"],
                        location => {
                          char_pos => undef,
                          left_side => "func_expr",
                          right_side => ["stmtmulti"],
                          rule_name => "func_expr_1585",
                          token => "=",
                          token_val => "=",
                          val => 'fix',
                        },
                      }, "SQL::Translator::Statement::Function::Call"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "ab",
                        },
                        type => "String",
                        val => "ab",
                      }, "SQL::Translator::Statement::A_Const"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{location}{val}{lexpr}{location}{val} = $a->{ResultTarget}{location}{val}{lexpr}{funcname};
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10709 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aa",
                                  },
                                  type => "String",
                                  val => "aa",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "ab",
                                  },
                                  type => "String",
                                  val => "ab",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_larger"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "ab",
                            },
                            type => "String",
                            val => "ab",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10710 ('
SELECT citext_larger( 'AAAA'::citext, 'bbbb'::cit')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 10717 (' citext_larger( 'AAAA'::citext, 'bbbb'::citext ) =')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext_larger
---STARTSTATE: INITIAL @ 10731 ('( 'AAAA'::citext, 'bbbb'::citext ) = 'bbbb' AS t;')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10732 (' 'AAAA'::citext, 'bbbb'::citext ) = 'bbbb' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10734 ('AAAA'::citext, 'bbbb'::citext ) = 'bbbb' AS t;')
---ENDTOKEN: SCONST, AAAA
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "AAAA",
    },
    type => "String",
    val => "AAAA",
  },
}
---STARTSTATE: INITIAL @ 10739 ('::citext, 'bbbb'::citext ) = 'bbbb' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10741 ('citext, 'bbbb'::citext ) = 'bbbb' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10747 (', 'bbbb'::citext ) = 'bbbb' AS t;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "AAAA",
      },
      type => "String",
      val => "AAAA",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ",",
      token_val => ",",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10748 (' 'bbbb'::citext ) = 'bbbb' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10750 ('bbbb'::citext ) = 'bbbb' AS t;')
---ENDTOKEN: SCONST, bbbb
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "bbbb",
    },
    type => "String",
    val => "bbbb",
  },
}
---STARTSTATE: INITIAL @ 10755 ('::citext ) = 'bbbb' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10757 ('citext ) = 'bbbb' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10763 (' ) = 'bbbb' AS t;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "bbbb",
      },
      type => "String",
      val => "bbbb",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ")",
      token_val => ")",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10765 (' = 'bbbb' AS t;')
---GOTMATCH: self
---ENDTOKEN: =, =
do {
  my $a = {
    FunctionCall => {
      agg_distinct => 0,
      agg_star => 0,
      args => [
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "AAAA",
            },
            type => "String",
            val => "AAAA",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ",",
            token_val => ",",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "bbbb",
            },
            type => "String",
            val => "bbbb",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ")",
            token_val => ")",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      ],
      func_variadic => 0,
      funcname => ["citext_larger"],
      location => {
        char_pos => undef,
        left_side => "func_expr",
        right_side => ["stmtmulti"],
        rule_name => "func_expr_1585",
        token => "=",
        token_val => "=",
        val => 'fix',
      },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10767 (' 'bbbb' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10769 ('bbbb' AS t;')
---ENDTOKEN: SCONST, bbbb
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "bbbb",
    },
    type => "String",
    val => "bbbb",
  },
}
---STARTSTATE: INITIAL @ 10774 (' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    agg_distinct => 0,
                    agg_star => 0,
                    args => [
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "AAAA",
                          },
                          type => "String",
                          val => "AAAA",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ",",
                          token_val => ",",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "bbbb",
                          },
                          type => "String",
                          val => "bbbb",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ")",
                          token_val => ")",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                    ],
                    func_variadic => 0,
                    funcname => ["citext_larger"],
                    location => {
                      char_pos => undef,
                      left_side => "func_expr",
                      right_side => ["stmtmulti"],
                      rule_name => "func_expr_1585",
                      token => "=",
                      token_val => "=",
                      val => 'fix',
                    },
                  }, "SQL::Translator::Statement::Function::Call"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1506",
                    token => "AS",
                    token_val => "AS",
                    val => "=",
                  },
      name     => ["="],
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "bbbb",
                    },
                    type => "String",
                    val => "bbbb",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{lexpr}{location}{val} = $a->{A_Expr}{lexpr}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10777 (' t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        agg_distinct => 0,
                        agg_star => 0,
                        args => [
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "AAAA",
                              },
                              type => "String",
                              val => "AAAA",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ",",
                              token_val => ",",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ",",
                                               token_val => ",",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "bbbb",
                              },
                              type => "String",
                              val => "bbbb",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ")",
                              token_val => ")",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ")",
                                               token_val => ")",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                        ],
                        func_variadic => 0,
                        funcname => ["citext_larger"],
                        location => {
                          char_pos => undef,
                          left_side => "func_expr",
                          right_side => ["stmtmulti"],
                          rule_name => "func_expr_1585",
                          token => "=",
                          token_val => "=",
                          val => 'fix',
                        },
                      }, "SQL::Translator::Statement::Function::Call"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "bbbb",
                        },
                        type => "String",
                        val => "bbbb",
                      }, "SQL::Translator::Statement::A_Const"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{location}{val}{lexpr}{location}{val} = $a->{ResultTarget}{location}{val}{lexpr}{funcname};
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10779 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "AAAA",
                                  },
                                  type => "String",
                                  val => "AAAA",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "bbbb",
                                  },
                                  type => "String",
                                  val => "bbbb",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_larger"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "bbbb",
                            },
                            type => "String",
                            val => "bbbb",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10780 ('
SELECT citext_larger( 'aardvark'::citext, 'Aaba':')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, SELECT
---STARTSTATE: INITIAL @ 10787 (' citext_larger( 'aardvark'::citext, 'Aaba'::citext')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext_larger
---STARTSTATE: INITIAL @ 10801 ('( 'aardvark'::citext, 'Aaba'::citext ) = 'aardvark')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10802 (' 'aardvark'::citext, 'Aaba'::citext ) = 'aardvark'')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10804 ('aardvark'::citext, 'Aaba'::citext ) = 'aardvark' A')
---ENDTOKEN: SCONST, aardvark
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "aardvark",
    },
    type => "String",
    val => "aardvark",
  },
}
---STARTSTATE: INITIAL @ 10813 ('::citext, 'Aaba'::citext ) = 'aardvark' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10815 ('citext, 'Aaba'::citext ) = 'aardvark' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10821 (', 'Aaba'::citext ) = 'aardvark' AS t;')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "aardvark",
      },
      type => "String",
      val => "aardvark",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ",",
      token_val => ",",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10822 (' 'Aaba'::citext ) = 'aardvark' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10824 ('Aaba'::citext ) = 'aardvark' AS t;')
---ENDTOKEN: SCONST, Aaba
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "Aaba",
    },
    type => "String",
    val => "Aaba",
  },
}
---STARTSTATE: INITIAL @ 10829 ('::citext ) = 'aardvark' AS t;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 10831 ('citext ) = 'aardvark' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, citext
---STARTSTATE: INITIAL @ 10837 (' ) = 'aardvark' AS t;')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["citext"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "Aaba",
      },
      type => "String",
      val => "Aaba",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ")",
      token_val => ")",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "citext",
                     },
      names       => ["citext"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 10839 (' = 'aardvark' AS t;')
---GOTMATCH: self
---ENDTOKEN: =, =
do {
  my $a = {
    FunctionCall => {
      agg_distinct => 0,
      agg_star => 0,
      args => [
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "aardvark",
            },
            type => "String",
            val => "aardvark",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ",",
            token_val => ",",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
        bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "Aaba",
            },
            type => "String",
            val => "Aaba",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ")",
            token_val => ")",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      ],
      func_variadic => 0,
      funcname => ["citext_larger"],
      location => {
        char_pos => undef,
        left_side => "func_expr",
        right_side => ["stmtmulti"],
        rule_name => "func_expr_1585",
        token => "=",
        token_val => "=",
        val => 'fix',
      },
    },
  };
  $a->{FunctionCall}{location}{val} = $a->{FunctionCall}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10841 (' 'aardvark' AS t;')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10843 ('aardvark' AS t;')
---ENDTOKEN: SCONST, aardvark
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "aardvark",
    },
    type => "String",
    val => "aardvark",
  },
}
---STARTSTATE: INITIAL @ 10852 (' AS t;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
do {
  my $a = {
    A_Expr => {
      kind     => "OP",
      lexpr    => bless({
                    agg_distinct => 0,
                    agg_star => 0,
                    args => [
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "aardvark",
                          },
                          type => "String",
                          val => "aardvark",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ",",
                          token_val => ",",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                      bless({
                        arg => bless({
                          location => {
                            char_pos => undef,
                            left_side => "AexprConst",
                            right_side => ["stmtmulti"],
                            rule_name => "AexprConst_1791",
                            token => undef,
                            token_val => undef,
                            val => "Aaba",
                          },
                          type => "String",
                          val => "Aaba",
                        }, "SQL::Translator::Statement::A_Const"),
                        location => {
                          char_pos => undef,
                          left_side => "a_expr",
                          right_side => ["stmtmulti", ";", "stmt"],
                          rule_name => "a_expr_1493",
                          token => ")",
                          token_val => ")",
                          val => "::",
                        },
                        typeName => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      }, "SQL::Translator::Statement::TypeCast"),
                    ],
                    func_variadic => 0,
                    funcname => ["citext_larger"],
                    location => {
                      char_pos => undef,
                      left_side => "func_expr",
                      right_side => ["stmtmulti"],
                      rule_name => "func_expr_1585",
                      token => "=",
                      token_val => "=",
                      val => 'fix',
                    },
                  }, "SQL::Translator::Statement::Function::Call"),
      location => {
                    char_pos => undef,
                    left_side => "a_expr",
                    right_side => ["stmtmulti", ";", "stmt"],
                    rule_name => "a_expr_1506",
                    token => "AS",
                    token_val => "AS",
                    val => "=",
                  },
      name     => ["="],
      rexpr    => bless({
                    location => {
                      char_pos => undef,
                      left_side => "AexprConst",
                      right_side => ["stmtmulti"],
                      rule_name => "AexprConst_1791",
                      token => undef,
                      token_val => undef,
                      val => "aardvark",
                    },
                    type => "String",
                    val => "aardvark",
                  }, "SQL::Translator::Statement::A_Const"),
    },
  };
  $a->{A_Expr}{lexpr}{location}{val} = $a->{A_Expr}{lexpr}{funcname};
  $a;
}
---STARTSTATE: INITIAL @ 10855 (' t;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, t
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1771",
        token => undef,
        token_val => undef,
        val => bless({
          kind     => "OP",
          lexpr    => bless({
                        agg_distinct => 0,
                        agg_star => 0,
                        args => [
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "aardvark",
                              },
                              type => "String",
                              val => "aardvark",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ",",
                              token_val => ",",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ",",
                                               token_val => ",",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                          bless({
                            arg => bless({
                              location => {
                                char_pos => undef,
                                left_side => "AexprConst",
                                right_side => ["stmtmulti"],
                                rule_name => "AexprConst_1791",
                                token => undef,
                                token_val => undef,
                                val => "Aaba",
                              },
                              type => "String",
                              val => "Aaba",
                            }, "SQL::Translator::Statement::A_Const"),
                            location => {
                              char_pos => undef,
                              left_side => "a_expr",
                              right_side => ["stmtmulti", ";", "stmt"],
                              rule_name => "a_expr_1493",
                              token => ")",
                              token_val => ")",
                              val => "::",
                            },
                            typeName => bless({
                              arrayBounds => undef,
                              location    => {
                                               char_pos => undef,
                                               left_side => "GenericType",
                                               right_side => ["stmtmulti"],
                                               rule_name => "GenericType_1429",
                                               token => ")",
                                               token_val => ")",
                                               val => "citext",
                                             },
                              names       => ["citext"],
                              typemod     => -1,
                              typmods     => undef,
                            }, "SQL::Translator::Statement::TypeName"),
                          }, "SQL::Translator::Statement::TypeCast"),
                        ],
                        func_variadic => 0,
                        funcname => ["citext_larger"],
                        location => {
                          char_pos => undef,
                          left_side => "func_expr",
                          right_side => ["stmtmulti"],
                          rule_name => "func_expr_1585",
                          token => "=",
                          token_val => "=",
                          val => 'fix',
                        },
                      }, "SQL::Translator::Statement::Function::Call"),
          location => {
                        char_pos => undef,
                        left_side => "a_expr",
                        right_side => ["stmtmulti", ";", "stmt"],
                        rule_name => "a_expr_1506",
                        token => "AS",
                        token_val => "AS",
                        val => "=",
                      },
          name     => ["="],
          rexpr    => bless({
                        location => {
                          char_pos => undef,
                          left_side => "AexprConst",
                          right_side => ["stmtmulti"],
                          rule_name => "AexprConst_1791",
                          token => undef,
                          token_val => undef,
                          val => "aardvark",
                        },
                        type => "String",
                        val => "aardvark",
                      }, "SQL::Translator::Statement::A_Const"),
        }, "SQL::Translator::Statement::A_Expr"),
      },
      name => "t",
      val => 'fix',
    },
  };
  $a->{ResultTarget}{location}{val}{lexpr}{location}{val} = $a->{ResultTarget}{location}{val}{lexpr}{funcname};
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10857 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aardvark",
                                  },
                                  type => "String",
                                  val => "aardvark",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "Aaba",
                                  },
                                  type => "String",
                                  val => "Aaba",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_larger"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "aardvark",
                            },
                            type => "String",
                            val => "aardvark",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->{SelectStmt}{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 10858 ('

CREATE OPERATOR @> (
	LEFTARG = cube, RIGHTARG =')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 10866 (' OPERATOR @> (')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 10875 (' @> (')
---GOTMATCH: operator
---ENDTOKEN: Op, @>
---STARTSTATE: INITIAL @ 10878 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 10880 ('
	LEFTARG = cube, RIGHTARG = cube, PROCEDURE = cub')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, leftarg
---STARTSTATE: INITIAL @ 10889 (' = cube, RIGHTARG = cube, PROCEDURE = cube_contain')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 10891 (' cube, RIGHTARG = cube, PROCEDURE = cube_contains,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 10896 (', RIGHTARG = cube, PROCEDURE = cube_contains,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "cube",
                     },
      names       => ["cube"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "leftarg",
  },
}
---STARTSTATE: INITIAL @ 10897 (' RIGHTARG = cube, PROCEDURE = cube_contains,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, rightarg
---STARTSTATE: INITIAL @ 10906 (' = cube, PROCEDURE = cube_contains,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 10908 (' cube, PROCEDURE = cube_contains,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 10913 (', PROCEDURE = cube_contains,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "cube",
                     },
      names       => ["cube"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "rightarg",
  },
}
---STARTSTATE: INITIAL @ 10914 (' PROCEDURE = cube_contains,')
---GOTMATCH: identifier
---ENDTOKEN: PROCEDURE, PROCEDURE
---STARTSTATE: INITIAL @ 10924 (' = cube_contains,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 10926 (' cube_contains,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube_contains
---STARTSTATE: INITIAL @ 10940 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube_contains"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "cube_contains",
                     },
      names       => ["cube_contains"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "PROCEDURE",
  },
}
---STARTSTATE: INITIAL @ 10941 ('
	COMMUTATOR = '<@',
	RESTRICT = contsel, JOIN = c')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, commutator
---STARTSTATE: INITIAL @ 10953 (' = '<@',')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 10955 (' '<@',')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 10957 ('<@',')
---ENDTOKEN: SCONST, <@
{
  DefElem => { arg => "<\@", defaction => "UNSPEC", defname => "commutator" },
}
---STARTSTATE: INITIAL @ 10960 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 10961 ('
	RESTRICT = contsel, JOIN = contjoinsel
);

CREAT')
---GOTMATCH: identifier
---ENDTOKEN: RESTRICT, RESTRICT
---STARTSTATE: INITIAL @ 10971 (' = contsel, JOIN = contjoinsel')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 10973 (' contsel, JOIN = contjoinsel')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, contsel
---STARTSTATE: INITIAL @ 10981 (', JOIN = contjoinsel')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["contsel"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "contsel",
                     },
      names       => ["contsel"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "RESTRICT",
  },
}
---STARTSTATE: INITIAL @ 10982 (' JOIN = contjoinsel')
---GOTMATCH: identifier
---ENDTOKEN: JOIN, JOIN
---STARTSTATE: INITIAL @ 10987 (' = contjoinsel')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 10989 (' contjoinsel')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, contjoinsel
---STARTSTATE: INITIAL @ 11001 ('
);

CREATE OPERATOR CLASS gist_cube_ops
   DEFAUL')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["contjoinsel"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "contjoinsel",
                     },
      names       => ["contjoinsel"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "JOIN",
  },
}
{
  DefineStmt => {
    definition => [
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "cube",
                         },
          names       => ["cube"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "leftarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "cube",
                         },
          names       => ["cube"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "rightarg",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "cube_contains",
                         },
          names       => ["cube_contains"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "PROCEDURE",
      }, "SQL::Translator::Statement::DefElem"),
      bless({ arg => "<\@", defaction => "UNSPEC", defname => "commutator" }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "contsel",
                         },
          names       => ["contsel"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "RESTRICT",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ")",
                           token_val => ")",
                           val => "contjoinsel",
                         },
          names       => ["contjoinsel"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "JOIN",
      }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["\@>"],
    kind => "OPERATOR",
    oldstyle => 0,
  },
}
---STARTSTATE: INITIAL @ 11003 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 11004 ('

CREATE OPERATOR CLASS gist_cube_ops
   DEFAULT F')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 11012 (' OPERATOR CLASS gist_cube_ops')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 11021 (' CLASS gist_cube_ops')
---GOTMATCH: identifier
---ENDTOKEN: CLASS, CLASS
---STARTSTATE: INITIAL @ 11027 (' gist_cube_ops')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist_cube_ops
---STARTSTATE: INITIAL @ 11041 ('
   DEFAULT FOR TYPE cube USING gist AS
      OPER')
---GOTMATCH: identifier
---ENDTOKEN: DEFAULT, DEFAULT
---STARTSTATE: INITIAL @ 11052 (' FOR TYPE cube USING gist AS')
---GOTMATCH: identifier
---ENDTOKEN: FOR, FOR
---STARTSTATE: INITIAL @ 11056 (' TYPE cube USING gist AS')
---GOTMATCH: identifier
---ENDTOKEN: TYPE, TYPE
---STARTSTATE: INITIAL @ 11061 (' cube USING gist AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11066 (' USING gist AS')
---GOTMATCH: identifier
---ENDTOKEN: USING, USING
{ TypeName => { names => ["cube"], typemod => -1 } }
---STARTSTATE: INITIAL @ 11072 (' gist AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gist
---STARTSTATE: INITIAL @ 11077 (' AS')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 11080 ('
      OPERATOR	3	&& ,
      OPERATOR	6	= ,
      ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 11095 ('	3	&& ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 3
---STARTSTATE: INITIAL @ 11097 ('	&& ,')
---GOTMATCH: operator
---ENDTOKEN: Op, &&
---STARTSTATE: INITIAL @ 11100 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["&&"], number => 3 },
}
---STARTSTATE: INITIAL @ 11102 ('
      OPERATOR	6	= ,
      OPERATOR	7	@> ,
      ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 11117 ('	6	= ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 6
---STARTSTATE: INITIAL @ 11119 ('	= ,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 11121 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["="], number => 6 },
}
---STARTSTATE: INITIAL @ 11123 ('
      OPERATOR	7	@> ,
      OPERATOR	8	<@ ,
     ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 11138 ('	7	@> ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 7
---STARTSTATE: INITIAL @ 11140 ('	@> ,')
---GOTMATCH: operator
---ENDTOKEN: Op, @>
---STARTSTATE: INITIAL @ 11143 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["\@>"], number => 7 },
}
---STARTSTATE: INITIAL @ 11145 ('
      OPERATOR	8	<@ ,
      OPERATOR	13	@ ,
     ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 11160 ('	8	<@ ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 8
---STARTSTATE: INITIAL @ 11162 ('	<@ ,')
---GOTMATCH: operator
---ENDTOKEN: Op, <@
---STARTSTATE: INITIAL @ 11165 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["<\@"], number => 8 },
}
---STARTSTATE: INITIAL @ 11167 ('
      OPERATOR	13	@ ,
      OPERATOR	14	~ ,
     ')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 11182 ('	13	@ ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 13
---STARTSTATE: INITIAL @ 11185 ('	@ ,')
---GOTMATCH: operator
---ENDTOKEN: Op, @
---STARTSTATE: INITIAL @ 11187 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["\@"], number => 13 },
}
---STARTSTATE: INITIAL @ 11189 ('
      OPERATOR	14	~ ,
      FUNCTION	1	g_cube_con')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, OPERATOR
---STARTSTATE: INITIAL @ 11204 ('	14	~ ,')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 14
---STARTSTATE: INITIAL @ 11207 ('	~ ,')
---GOTMATCH: operator
---ENDTOKEN: Op, ~
---STARTSTATE: INITIAL @ 11209 (' ,')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  CreateOpClassItem => { itemtype => "OPERATOR", name => ["~"], number => 14 },
}
---STARTSTATE: INITIAL @ 11211 ('
      FUNCTION	1	g_cube_consistent (internal, cub')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 11226 ('	1	g_cube_consistent (internal, cube, int, oid, in')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 1
---STARTSTATE: INITIAL @ 11228 ('	g_cube_consistent (internal, cube, int, oid, inte')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, g_cube_consistent
---STARTSTATE: INITIAL @ 11246 (' (internal, cube, int, oid, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11248 ('internal, cube, int, oid, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11256 (', cube, int, oid, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11257 (' cube, int, oid, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11262 (', int, oid, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "cube",
                     },
      names       => ["cube"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11263 (' int, oid, internal),')
---GOTMATCH: identifier
---ENDTOKEN: INT, int
{ TypeName => { names => ["pg_catalog", "int4"], typemod => -1 } }
---STARTSTATE: INITIAL @ 11267 (', oid, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "Numeric",
                       right_side => ["stmtmulti"],
                       rule_name => "Numeric_1433",
                       token => undef,
                       token_val => undef,
                       val => "int",
                     },
      names       => ["pg_catalog", "int4"],
      typemod     => -1,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11268 (' oid, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 11272 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["oid"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "oid",
                     },
      names       => ["oid"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11273 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11282 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["g_cube_consistent"], number => 1 },
}
---STARTSTATE: INITIAL @ 11283 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 11284 ('
      FUNCTION	2	g_cube_union (internal, internal')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 11299 ('	2	g_cube_union (internal, internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 2
---STARTSTATE: INITIAL @ 11301 ('	g_cube_union (internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, g_cube_union
---STARTSTATE: INITIAL @ 11314 (' (internal, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11316 ('internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11324 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11325 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11334 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["g_cube_union"], number => 2 },
}
---STARTSTATE: INITIAL @ 11335 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 11336 ('
      FUNCTION	3	g_cube_compress (internal),
    ')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 11351 ('	3	g_cube_compress (internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 3
---STARTSTATE: INITIAL @ 11353 ('	g_cube_compress (internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, g_cube_compress
---STARTSTATE: INITIAL @ 11369 (' (internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11371 ('internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11379 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["g_cube_compress"], number => 3 },
}
---STARTSTATE: INITIAL @ 11380 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 11381 ('
      FUNCTION	4	g_cube_decompress (internal),
  ')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 11396 ('	4	g_cube_decompress (internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 4
---STARTSTATE: INITIAL @ 11398 ('	g_cube_decompress (internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, g_cube_decompress
---STARTSTATE: INITIAL @ 11416 (' (internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11418 ('internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11426 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["g_cube_decompress"], number => 4 },
}
---STARTSTATE: INITIAL @ 11427 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 11428 ('
      FUNCTION	5	g_cube_penalty (internal, intern')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 11443 ('	5	g_cube_penalty (internal, internal, internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 5
---STARTSTATE: INITIAL @ 11445 ('	g_cube_penalty (internal, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, g_cube_penalty
---STARTSTATE: INITIAL @ 11460 (' (internal, internal, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11462 ('internal, internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11470 (', internal, internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11471 (' internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11480 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11481 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11490 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["g_cube_penalty"], number => 5 },
}
---STARTSTATE: INITIAL @ 11491 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 11492 ('
      FUNCTION	6	g_cube_picksplit (internal, inte')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 11507 ('	6	g_cube_picksplit (internal, internal),')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 6
---STARTSTATE: INITIAL @ 11509 ('	g_cube_picksplit (internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, g_cube_picksplit
---STARTSTATE: INITIAL @ 11526 (' (internal, internal),')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11528 ('internal, internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11536 (', internal),')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11537 (' internal),')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11546 ('),')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["g_cube_picksplit"], number => 6 },
}
---STARTSTATE: INITIAL @ 11547 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 11548 ('
      FUNCTION	7	g_cube_same (cube, cube, interna')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 11563 ('	7	g_cube_same (cube, cube, internal);')
---GOTMATCH: decimalfail
---ENDTOKEN: ICONST, 7
---STARTSTATE: INITIAL @ 11565 ('	g_cube_same (cube, cube, internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, g_cube_same
---STARTSTATE: INITIAL @ 11577 (' (cube, cube, internal);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11579 ('cube, cube, internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11583 (', cube, internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "cube",
                     },
      names       => ["cube"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11584 (' cube, internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11589 (', internal);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "cube",
                     },
      names       => ["cube"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 11590 (' internal);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, internal
---STARTSTATE: INITIAL @ 11599 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["internal"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "internal",
                     },
      names       => ["internal"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
{
  CreateOpClassItem => { itemtype => "FUNCTION", name => ["g_cube_same"], number => 7 },
}
---STARTSTATE: INITIAL @ 11600 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateOpClassStmt => {
    amname      => "gist",
    datatype    => bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => "USING",
                                      token_val => "USING",
                                      val => "cube",
                                    },
                     names       => ["cube"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
    isDefault   => 1,
    items       => [
                     bless({ itemtype => "OPERATOR", name => ["&&"], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => ["="], number => 6 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => ["\@>"], number => 7 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => ["<\@"], number => 8 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => ["\@"], number => 13 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "OPERATOR", name => ["~"], number => 14 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["g_cube_consistent"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["g_cube_union"], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["g_cube_compress"], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["g_cube_decompress"], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["g_cube_penalty"], number => 5 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["g_cube_picksplit"], number => 6 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     bless({ itemtype => "FUNCTION", name => ["g_cube_same"], number => 7 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                   ],
    opclassname => ["gist_cube_ops"],
  },
}
---STARTSTATE: INITIAL @ 11601 ('

ALTER EXTENSION cube ADD operator <@(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 11608 (' EXTENSION cube ADD operator <@(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 11618 (' cube ADD operator <@(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11623 (' ADD operator <@(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 11627 (' operator <@(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, operator
---STARTSTATE: INITIAL @ 11636 (' <@(cube,cube);')
---GOTMATCH: operator
---ENDTOKEN: Op, <@
---STARTSTATE: INITIAL @ 11639 ('(cube,cube);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11640 ('cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11644 (',cube);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube"], typemod => -1 } }
---STARTSTATE: INITIAL @ 11645 ('cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11649 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "cube",
    objargs => [
                 bless({
                   arrayBounds => undef,
                   location    => {
                                    char_pos => undef,
                                    left_side => "GenericType",
                                    right_side => ["stmtmulti"],
                                    rule_name => "GenericType_1429",
                                    token => ",",
                                    token_val => ",",
                                    val => "cube",
                                  },
                   names       => ["cube"],
                   typemod     => -1,
                   typmods     => undef,
                 }, "SQL::Translator::Statement::TypeName"),
                 bless({
                   arrayBounds => undef,
                   location    => {
                                    char_pos => undef,
                                    left_side => "GenericType",
                                    right_side => ["stmtmulti"],
                                    rule_name => "GenericType_1429",
                                    token => ")",
                                    token_val => ")",
                                    val => "cube",
                                  },
                   names       => ["cube"],
                   typemod     => -1,
                   typmods     => undef,
                 }, "SQL::Translator::Statement::TypeName"),
               ],
    objname => ["<\@"],
    objtype => "OPERATOR",
  },
}
---STARTSTATE: INITIAL @ 11650 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 11651 ('
ALTER EXTENSION cube ADD operator @>(cube,cube);
')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 11657 (' EXTENSION cube ADD operator @>(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 11667 (' cube ADD operator @>(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11672 (' ADD operator @>(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 11676 (' operator @>(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, operator
---STARTSTATE: INITIAL @ 11685 (' @>(cube,cube);')
---GOTMATCH: operator
---ENDTOKEN: Op, @>
---STARTSTATE: INITIAL @ 11688 ('(cube,cube);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11689 ('cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11693 (',cube);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube"], typemod => -1 } }
---STARTSTATE: INITIAL @ 11694 ('cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11698 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "cube",
    objargs => [
                 bless({
                   arrayBounds => undef,
                   location    => {
                                    char_pos => undef,
                                    left_side => "GenericType",
                                    right_side => ["stmtmulti"],
                                    rule_name => "GenericType_1429",
                                    token => ",",
                                    token_val => ",",
                                    val => "cube",
                                  },
                   names       => ["cube"],
                   typemod     => -1,
                   typmods     => undef,
                 }, "SQL::Translator::Statement::TypeName"),
                 bless({
                   arrayBounds => undef,
                   location    => {
                                    char_pos => undef,
                                    left_side => "GenericType",
                                    right_side => ["stmtmulti"],
                                    rule_name => "GenericType_1429",
                                    token => ")",
                                    token_val => ")",
                                    val => "cube",
                                  },
                   names       => ["cube"],
                   typemod     => -1,
                   typmods     => undef,
                 }, "SQL::Translator::Statement::TypeName"),
               ],
    objname => ["\@>"],
    objtype => "OPERATOR",
  },
}
---STARTSTATE: INITIAL @ 11699 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 11700 ('
ALTER EXTENSION cube ADD operator ~(cube,cube);
A')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 11706 (' EXTENSION cube ADD operator ~(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 11716 (' cube ADD operator ~(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11721 (' ADD operator ~(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 11725 (' operator ~(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, operator
---STARTSTATE: INITIAL @ 11734 (' ~(cube,cube);')
---GOTMATCH: operator
---ENDTOKEN: Op, ~
---STARTSTATE: INITIAL @ 11736 ('(cube,cube);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11737 ('cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11741 (',cube);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube"], typemod => -1 } }
---STARTSTATE: INITIAL @ 11742 ('cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11746 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "cube",
    objargs => [
                 bless({
                   arrayBounds => undef,
                   location    => {
                                    char_pos => undef,
                                    left_side => "GenericType",
                                    right_side => ["stmtmulti"],
                                    rule_name => "GenericType_1429",
                                    token => ",",
                                    token_val => ",",
                                    val => "cube",
                                  },
                   names       => ["cube"],
                   typemod     => -1,
                   typmods     => undef,
                 }, "SQL::Translator::Statement::TypeName"),
                 bless({
                   arrayBounds => undef,
                   location    => {
                                    char_pos => undef,
                                    left_side => "GenericType",
                                    right_side => ["stmtmulti"],
                                    rule_name => "GenericType_1429",
                                    token => ")",
                                    token_val => ")",
                                    val => "cube",
                                  },
                   names       => ["cube"],
                   typemod     => -1,
                   typmods     => undef,
                 }, "SQL::Translator::Statement::TypeName"),
               ],
    objname => ["~"],
    objtype => "OPERATOR",
  },
}
---STARTSTATE: INITIAL @ 11747 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 11748 ('
ALTER EXTENSION cube ADD operator @(cube,cube);

')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 11754 (' EXTENSION cube ADD operator @(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: EXTENSION, EXTENSION
---STARTSTATE: INITIAL @ 11764 (' cube ADD operator @(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11769 (' ADD operator @(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 11773 (' operator @(cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: OPERATOR, operator
---STARTSTATE: INITIAL @ 11782 (' @(cube,cube);')
---GOTMATCH: operator
---ENDTOKEN: Op, @
---STARTSTATE: INITIAL @ 11784 ('(cube,cube);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 11785 ('cube,cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11789 (',cube);')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["cube"], typemod => -1 } }
---STARTSTATE: INITIAL @ 11790 ('cube);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 11794 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  AlterExtensionContents => {
    action  => 1,
    extname => "cube",
    objargs => [
                 bless({
                   arrayBounds => undef,
                   location    => {
                                    char_pos => undef,
                                    left_side => "GenericType",
                                    right_side => ["stmtmulti"],
                                    rule_name => "GenericType_1429",
                                    token => ",",
                                    token_val => ",",
                                    val => "cube",
                                  },
                   names       => ["cube"],
                   typemod     => -1,
                   typmods     => undef,
                 }, "SQL::Translator::Statement::TypeName"),
                 bless({
                   arrayBounds => undef,
                   location    => {
                                    char_pos => undef,
                                    left_side => "GenericType",
                                    right_side => ["stmtmulti"],
                                    rule_name => "GenericType_1429",
                                    token => ")",
                                    token_val => ")",
                                    val => "cube",
                                  },
                   names       => ["cube"],
                   typemod     => -1,
                   typmods     => undef,
                 }, "SQL::Translator::Statement::TypeName"),
               ],
    objname => ["\@"],
    objtype => "OPERATOR",
  },
}
---STARTSTATE: INITIAL @ 11795 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 11796 ('

select '(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0')
---GOTMATCH: identifier
---ENDTOKEN: SELECT, select
---STARTSTATE: INITIAL @ 11804 (' '(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 11806 ('(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0')
---ENDTOKEN: SCONST, (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
{
  A_Const => {
    location => {
      char_pos => undef,
      left_side => "AexprConst",
      right_side => ["stmtmulti"],
      rule_name => "AexprConst_1791",
      token => undef,
      token_val => undef,
      val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
    },
    type => "String",
    val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
  },
}
---STARTSTATE: INITIAL @ 12606 ('::cube;')
---GOTMATCH: typecast
---ENDTOKEN: TYPECAST, ::
---STARTSTATE: INITIAL @ 12608 ('cube;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, cube
---STARTSTATE: INITIAL @ 12612 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{ TypeName => { names => ["cube"], typemod => -1 } }
{
  TypeCast => {
    arg => bless({
      location => {
        char_pos => undef,
        left_side => "AexprConst",
        right_side => ["stmtmulti"],
        rule_name => "AexprConst_1791",
        token => undef,
        token_val => undef,
        val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
      },
      type => "String",
      val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
    }, "SQL::Translator::Statement::A_Const"),
    location => {
      char_pos => undef,
      left_side => "a_expr",
      right_side => ["stmtmulti", ";", "stmt"],
      rule_name => "a_expr_1493",
      token => ";",
      token_val => ";",
      val => "::",
    },
    typeName => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ";",
                       token_val => ";",
                       val => "cube",
                     },
      names       => ["cube"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
  },
}
do {
  my $a = {
    ResultTarget => {
      location => {
        char_pos => undef,
        left_side => "target_el",
        right_side => ["stmtmulti"],
        rule_name => "target_el_1773",
        token => ";",
        token_val => ";",
        val => bless({
          arg => bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
            },
            type => "String",
            val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
          }, "SQL::Translator::Statement::A_Const"),
          location => {
            char_pos => undef,
            left_side => "a_expr",
            right_side => ["stmtmulti", ";", "stmt"],
            rule_name => "a_expr_1493",
            token => ";",
            token_val => ";",
            val => "::",
          },
          typeName => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ";",
                             token_val => ";",
                             val => "cube",
                           },
            names       => ["cube"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
        }, "SQL::Translator::Statement::TypeCast"),
      },
      val => 'fix',
    },
  };
  $a->{ResultTarget}{val} = $a->{ResultTarget}{location}{val};
  $a;
}
do {
  my $a = {
    SelectStmt => {
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1773",
            token => ";",
            token_val => ";",
            val => bless({
              arg => bless({
                location => {
                  char_pos => undef,
                  left_side => "AexprConst",
                  right_side => ["stmtmulti"],
                  rule_name => "AexprConst_1791",
                  token => undef,
                  token_val => undef,
                  val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
                },
                type => "String",
                val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
              }, "SQL::Translator::Statement::A_Const"),
              location => {
                char_pos => undef,
                left_side => "a_expr",
                right_side => ["stmtmulti", ";", "stmt"],
                rule_name => "a_expr_1493",
                token => ";",
                token_val => ";",
                val => "::",
              },
              typeName => bless({
                arrayBounds => undef,
                location    => {
                                 char_pos => undef,
                                 left_side => "GenericType",
                                 right_side => ["stmtmulti"],
                                 rule_name => "GenericType_1429",
                                 token => ";",
                                 token_val => ";",
                                 val => "cube",
                               },
                names       => ["cube"],
                typemod     => -1,
                typmods     => undef,
              }, "SQL::Translator::Statement::TypeName"),
            }, "SQL::Translator::Statement::TypeCast"),
          },
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    },
  };
  $a->{SelectStmt}{targetList}[0]{val} = $a->{SelectStmt}{targetList}[0]{location}{val};
  $a;
}
---STARTSTATE: INITIAL @ 12613 ('

CREATE FUNCTION dblink_get_notify(
   OUT notify')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 12621 (' FUNCTION dblink_get_notify(')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 12630 (' dblink_get_notify(')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, dblink_get_notify
---STARTSTATE: INITIAL @ 12648 ('(')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 12649 ('
   OUT notify_name TEXT,
   OUT be_pid INT4,
   O')
---GOTMATCH: identifier
---ENDTOKEN: OUT, OUT
---STARTSTATE: INITIAL @ 12656 (' notify_name TEXT,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, notify_name
---STARTSTATE: INITIAL @ 12668 (' TEXT,')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 12673 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["TEXT"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
                 arrayBounds => undef,
                 location    => {
                                  char_pos => undef,
                                  left_side => "GenericType",
                                  right_side => ["stmtmulti"],
                                  rule_name => "GenericType_1429",
                                  token => ",",
                                  token_val => ",",
                                  val => "TEXT",
                                },
                 names       => ["TEXT"],
                 typemod     => -1,
                 typmods     => undef,
               }, "SQL::Translator::Statement::TypeName"),
    mode    => "OUT",
    name    => "notify_name",
  },
}
---STARTSTATE: INITIAL @ 12674 ('
   OUT be_pid INT4,
   OUT extra TEXT
)
RETURNS s')
---GOTMATCH: identifier
---ENDTOKEN: OUT, OUT
---STARTSTATE: INITIAL @ 12681 (' be_pid INT4,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, be_pid
---STARTSTATE: INITIAL @ 12688 (' INT4,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, int4
---STARTSTATE: INITIAL @ 12693 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["int4"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
                 arrayBounds => undef,
                 location    => {
                                  char_pos => undef,
                                  left_side => "GenericType",
                                  right_side => ["stmtmulti"],
                                  rule_name => "GenericType_1429",
                                  token => ",",
                                  token_val => ",",
                                  val => "int4",
                                },
                 names       => ["int4"],
                 typemod     => -1,
                 typmods     => undef,
               }, "SQL::Translator::Statement::TypeName"),
    mode    => "OUT",
    name    => "be_pid",
  },
}
---STARTSTATE: INITIAL @ 12694 ('
   OUT extra TEXT
)
RETURNS setof record
AS 'MODU')
---GOTMATCH: identifier
---ENDTOKEN: OUT, OUT
---STARTSTATE: INITIAL @ 12701 (' extra TEXT')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, extra
---STARTSTATE: INITIAL @ 12707 (' TEXT')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 12712 ('
)
RETURNS setof record
AS 'MODULE_PATHNAME', 'dbl')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["TEXT"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
                 arrayBounds => undef,
                 location    => {
                                  char_pos => undef,
                                  left_side => "GenericType",
                                  right_side => ["stmtmulti"],
                                  rule_name => "GenericType_1429",
                                  token => ")",
                                  token_val => ")",
                                  val => "TEXT",
                                },
                 names       => ["TEXT"],
                 typemod     => -1,
                 typmods     => undef,
               }, "SQL::Translator::Statement::TypeName"),
    mode    => "OUT",
    name    => "extra",
  },
}
---STARTSTATE: INITIAL @ 12714 ('
RETURNS setof record
AS 'MODULE_PATHNAME', 'dblin')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 12722 (' setof record')
---GOTMATCH: identifier
---ENDTOKEN: SETOF, setof
---STARTSTATE: INITIAL @ 12728 (' record')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, record
---STARTSTATE: INITIAL @ 12735 ('
AS 'MODULE_PATHNAME', 'dblink_get_notify'
LANGUAG')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["record"], typemod => -1 } }
---STARTSTATE: INITIAL @ 12738 (' 'MODULE_PATHNAME', 'dblink_get_notify'')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 12740 ('MODULE_PATHNAME', 'dblink_get_notify'')
---ENDTOKEN: SCONST, MODULE_PATHNAME
---STARTSTATE: INITIAL @ 12756 (', 'dblink_get_notify'')
---GOTMATCH: self
---ENDTOKEN: ,, ,
---STARTSTATE: INITIAL @ 12757 (' 'dblink_get_notify'')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 12759 ('dblink_get_notify'')
---ENDTOKEN: SCONST, dblink_get_notify
{
  DefElem => {
    arg => ["MODULE_PATHNAME", "dblink_get_notify"],
    defaction => "UNSPEC",
    defname => "as",
  },
}
---STARTSTATE: INITIAL @ 12777 ('
LANGUAGE C STRICT;

CREATE DOMAIN lo AS pg_catalo')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
---STARTSTATE: INITIAL @ 12786 (' C STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, c
{
  DefElem => { arg => "c", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 12788 (' STRICT;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 12795 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["dblink_get_notify"],
    options    => [
                    bless({
                      arg => ["MODULE_PATHNAME", "dblink_get_notify"],
                      defaction => "UNSPEC",
                      defname => "as",
                    }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "c", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                                   arrayBounds => undef,
                                   location    => {
                                                    char_pos => undef,
                                                    left_side => "GenericType",
                                                    right_side => ["stmtmulti"],
                                                    rule_name => "GenericType_1429",
                                                    token => ",",
                                                    token_val => ",",
                                                    val => "TEXT",
                                                  },
                                   names       => ["TEXT"],
                                   typemod     => -1,
                                   typmods     => undef,
                                 }, "SQL::Translator::Statement::TypeName"),
                      mode    => "OUT",
                      name    => "notify_name",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                                   arrayBounds => undef,
                                   location    => {
                                                    char_pos => undef,
                                                    left_side => "GenericType",
                                                    right_side => ["stmtmulti"],
                                                    rule_name => "GenericType_1429",
                                                    token => ",",
                                                    token_val => ",",
                                                    val => "int4",
                                                  },
                                   names       => ["int4"],
                                   typemod     => -1,
                                   typmods     => undef,
                                 }, "SQL::Translator::Statement::TypeName"),
                      mode    => "OUT",
                      name    => "be_pid",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                    bless({
                      argType => bless({
                                   arrayBounds => undef,
                                   location    => {
                                                    char_pos => undef,
                                                    left_side => "GenericType",
                                                    right_side => ["stmtmulti"],
                                                    rule_name => "GenericType_1429",
                                                    token => ")",
                                                    token_val => ")",
                                                    val => "TEXT",
                                                  },
                                   names       => ["TEXT"],
                                   typemod     => -1,
                                   typmods     => undef,
                                 }, "SQL::Translator::Statement::TypeName"),
                      mode    => "OUT",
                      name    => "extra",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1429",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "record",
                                   },
                    names       => ["record"],
                    setof       => 1,
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 12796 ('

CREATE DOMAIN lo AS pg_catalog.oid;

--
-- For b')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 12804 (' DOMAIN lo AS pg_catalog.oid;')
---GOTMATCH: identifier
---ENDTOKEN: DOMAIN, DOMAIN
---STARTSTATE: INITIAL @ 12811 (' lo AS pg_catalog.oid;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, lo
---STARTSTATE: INITIAL @ 12814 (' AS pg_catalog.oid;')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
---STARTSTATE: INITIAL @ 12817 (' pg_catalog.oid;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 12828 ('.oid;')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 12829 ('oid;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 12832 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{ TypeName => { names => ["oid", "pg_catalog"], typemod => -1 } }
{
  CreateDomainStmt => {
    domainname => ["lo"],
    typeName   => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1430",
                                     token => ";",
                                     token_val => ";",
                                     val => "pg_catalog",
                                   },
                    names       => ["oid", "pg_catalog"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 12833 ('

--
-- For backwards compatibility, define a func')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 13058 (' FUNCTION lo_oid(lo) RETURNS pg_catalog.oid AS')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 13067 (' lo_oid(lo) RETURNS pg_catalog.oid AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, lo_oid
---STARTSTATE: INITIAL @ 13074 ('(lo) RETURNS pg_catalog.oid AS')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 13075 ('lo) RETURNS pg_catalog.oid AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, lo
---STARTSTATE: INITIAL @ 13077 (') RETURNS pg_catalog.oid AS')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["lo"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "lo",
                     },
      names       => ["lo"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 13078 (' RETURNS pg_catalog.oid AS')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 13086 (' pg_catalog.oid AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 13097 ('.oid AS')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 13098 ('oid AS')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, oid
---STARTSTATE: INITIAL @ 13101 (' AS')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{ TypeName => { names => ["oid", "pg_catalog"], typemod => -1 } }
---STARTSTATE: INITIAL @ 13104 ('
'SELECT $1::pg_catalog.oid' LANGUAGE SQL STRICT I')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 13106 ('SELECT $1::pg_catalog.oid' LANGUAGE SQL STRICT IMM')
---ENDTOKEN: SCONST, SELECT $1::pg_catalog.oid
---STARTSTATE: INITIAL @ 13132 (' LANGUAGE SQL STRICT IMMUTABLE;')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => {
    arg => ["SELECT \$1::pg_catalog.oid"],
    defaction => "UNSPEC",
    defname => "as",
  },
}
---STARTSTATE: INITIAL @ 13141 (' SQL STRICT IMMUTABLE;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, sql
{
  DefElem => { arg => "sql", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 13145 (' STRICT IMMUTABLE;')
---GOTMATCH: identifier
---ENDTOKEN: STRICT, STRICT
{
  DefElem => { arg => 1, defaction => "UNSPEC", defname => "strict" },
}
---STARTSTATE: INITIAL @ 13152 (' IMMUTABLE;')
---GOTMATCH: identifier
---ENDTOKEN: IMMUTABLE, IMMUTABLE
{
  DefElem => { arg => "immutable", defaction => "UNSPEC", defname => "volatility" },
}
---STARTSTATE: INITIAL @ 13162 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["lo_oid"],
    options    => [
                    bless({
                      arg => ["SELECT \$1::pg_catalog.oid"],
                      defaction => "UNSPEC",
                      defname => "as",
                    }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                  ],
    parameters => [
                    bless({
                      argType => bless({
                        arrayBounds => undef,
                        location    => {
                                         char_pos => undef,
                                         left_side => "GenericType",
                                         right_side => ["stmtmulti"],
                                         rule_name => "GenericType_1429",
                                         token => ")",
                                         token_val => ")",
                                         val => "lo",
                                       },
                        names       => ["lo"],
                        typemod     => -1,
                        typmods     => undef,
                      }, "SQL::Translator::Statement::TypeName"),
                      mode => "IN",
                    }, "SQL::Translator::Statement::Function::Parameter"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1430",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "pg_catalog",
                                   },
                    names       => ["oid", "pg_catalog"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 13163 ('

-- This is used in triggers
CREATE FUNCTION lo_m')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 13199 (' FUNCTION lo_manage()')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 13208 (' lo_manage()')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, lo_manage
---STARTSTATE: INITIAL @ 13218 ('()')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 13219 (')')
---GOTMATCH: self
---ENDTOKEN: ), )
---STARTSTATE: INITIAL @ 13220 ('
RETURNS pg_catalog.trigger
AS 'MODULE_PATHNAME'
L')
---GOTMATCH: identifier
---ENDTOKEN: RETURNS, RETURNS
---STARTSTATE: INITIAL @ 13228 (' pg_catalog.trigger')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 13239 ('.trigger')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 13240 ('trigger')
---GOTMATCH: identifier
---ENDTOKEN: TRIGGER, trigger
---STARTSTATE: INITIAL @ 13247 ('
AS 'MODULE_PATHNAME'
LANGUAGE C;

/* @extschema@ ')
---GOTMATCH: identifier
---ENDTOKEN: AS, AS
{
  TypeName => { names => ["trigger", "pg_catalog"], typemod => -1 },
}
---STARTSTATE: INITIAL @ 13250 (' 'MODULE_PATHNAME'')
---GOTMATCH: xqstart
---STARTSTATE: xq @ 13252 ('MODULE_PATHNAME'')
---ENDTOKEN: SCONST, MODULE_PATHNAME
---STARTSTATE: INITIAL @ 13268 ('
LANGUAGE C;

/* @extschema@ isn't legal...
 * DRO')
---GOTMATCH: identifier
---ENDTOKEN: LANGUAGE, LANGUAGE
{
  DefElem => { arg => ["MODULE_PATHNAME"], defaction => "UNSPEC", defname => "as" },
}
---STARTSTATE: INITIAL @ 13277 (' C;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, c
{
  DefElem => { arg => "c", defaction => "UNSPEC", defname => "language" },
}
---STARTSTATE: INITIAL @ 13279 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  CreateFunctionStmt => {
    funcname   => ["lo_manage"],
    options    => [
                    bless({ arg => ["MODULE_PATHNAME"], defaction => "UNSPEC", defname => "as" }, "SQL::Translator::Statement::DefElem"),
                    bless({ arg => "c", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                  ],
    replace    => 0,
    returnType => bless({
                    arrayBounds => undef,
                    location    => {
                                     char_pos => undef,
                                     left_side => "GenericType",
                                     right_side => ["stmtmulti"],
                                     rule_name => "GenericType_1430",
                                     token => "AS",
                                     token_val => "AS",
                                     val => "pg_catalog",
                                   },
                    names       => ["trigger", "pg_catalog"],
                    typemod     => -1,
                    typmods     => undef,
                  }, "SQL::Translator::Statement::TypeName"),
  },
}
---STARTSTATE: INITIAL @ 13280 ('

/* @extschema@ isn't legal...
 * DROP FUNCTION @')
---GOTMATCH: xcstart
---STARTSTATE: xc @ 13284 (' @extschema@ isn't legal...')
---STARTSTATE: xc @ 13284 (' @extschema@ isn't legal...
 * DROP FUNCTION @exts')
---STARTSTATE: xc @ 13313 ('* DROP FUNCTION @extschema@.xml_is_well_formed(tex')
---STARTSTATE: xc @ 13314 (' DROP FUNCTION @extschema@.xml_is_well_formed(text')
---STARTSTATE: xc @ 13368 ('*/

DROP FUNCTION extschema.xml_is_well_formed(tex')
---xcstop: xc @ 13370 ('

DROP FUNCTION extschema.xml_is_well_formed(text)')
---STARTSTATE: INITIAL @ 13370 ('

DROP FUNCTION extschema.xml_is_well_formed(text)')
---GOTMATCH: identifier
---ENDTOKEN: DROP, DROP
---STARTSTATE: INITIAL @ 13376 (' FUNCTION extschema.xml_is_well_formed(text);')
---GOTMATCH: identifier
---ENDTOKEN: FUNCTION, FUNCTION
---STARTSTATE: INITIAL @ 13385 (' extschema.xml_is_well_formed(text);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, extschema
---STARTSTATE: INITIAL @ 13395 ('.xml_is_well_formed(text);')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 13396 ('xml_is_well_formed(text);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, xml_is_well_formed
---STARTSTATE: INITIAL @ 13414 ('(text);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 13415 ('text);')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, text
---STARTSTATE: INITIAL @ 13419 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["text"], typemod => -1 } }
{
  FunctionParameter => {
    argType => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "text",
                     },
      names       => ["text"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    mode => "IN",
  },
}
---STARTSTATE: INITIAL @ 13420 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  DropStmt => {
    arguments  => [[]],
    behavior   => "RESTRICT",
    concurrent => 0,
    missing_ok => 0,
    objects    => [["xml_is_well_formed", "extschema"]],
    removeType => "FUNCTION",
  },
}
---STARTSTATE: INITIAL @ 13421 ('
 
CREATE TEXT SEARCH PARSER testparser (
   START')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 13430 (' TEXT SEARCH PARSER testparser (')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 13435 (' SEARCH PARSER testparser (')
---GOTMATCH: identifier
---ENDTOKEN: SEARCH, SEARCH
---STARTSTATE: INITIAL @ 13442 (' PARSER testparser (')
---GOTMATCH: identifier
---ENDTOKEN: PARSER, PARSER
---STARTSTATE: INITIAL @ 13449 (' testparser (')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, testparser
---STARTSTATE: INITIAL @ 13460 (' (')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 13462 ('
   START    = testprs_start,
   GETTOKEN = testpr')
---GOTMATCH: identifier
---ENDTOKEN: START, START
---STARTSTATE: INITIAL @ 13471 ('    = testprs_start,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 13476 (' testprs_start,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, testprs_start
---STARTSTATE: INITIAL @ 13490 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["testprs_start"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "testprs_start",
                     },
      names       => ["testprs_start"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "START",
  },
}
---STARTSTATE: INITIAL @ 13491 ('
   GETTOKEN = testprs_getlexeme,
   END      = te')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, gettoken
---STARTSTATE: INITIAL @ 13503 (' = testprs_getlexeme,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 13505 (' testprs_getlexeme,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, testprs_getlexeme
---STARTSTATE: INITIAL @ 13523 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["testprs_getlexeme"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "testprs_getlexeme",
                     },
      names       => ["testprs_getlexeme"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "gettoken",
  },
}
---STARTSTATE: INITIAL @ 13524 ('
   END      = testprs_end,
   HEADLINE = pg_catal')
---GOTMATCH: identifier
---ENDTOKEN: END, END
---STARTSTATE: INITIAL @ 13531 ('      = testprs_end,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 13538 (' testprs_end,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, testprs_end
---STARTSTATE: INITIAL @ 13550 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{ TypeName => { names => ["testprs_end"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ",",
                       token_val => ",",
                       val => "testprs_end",
                     },
      names       => ["testprs_end"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "END",
  },
}
---STARTSTATE: INITIAL @ 13551 ('
   HEADLINE = pg_catalog.prsd_headline,
   LEXTYP')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, headline
---STARTSTATE: INITIAL @ 13563 (' = pg_catalog.prsd_headline,')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 13565 (' pg_catalog.prsd_headline,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, pg_catalog
---STARTSTATE: INITIAL @ 13576 ('.prsd_headline,')
---GOTMATCH: self
---ENDTOKEN: ., .
---STARTSTATE: INITIAL @ 13577 ('prsd_headline,')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, prsd_headline
---STARTSTATE: INITIAL @ 13590 (',')
---GOTMATCH: self
---ENDTOKEN: ,, ,
{
  TypeName => { names => ["prsd_headline", "pg_catalog"], typemod => -1 },
}
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1430",
                       token => ",",
                       token_val => ",",
                       val => "pg_catalog",
                     },
      names       => ["prsd_headline", "pg_catalog"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "headline",
  },
}
---STARTSTATE: INITIAL @ 13591 ('
   LEXTYPES = testprs_lextype
);

CREATE TEXT SEA')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, lextypes
---STARTSTATE: INITIAL @ 13603 (' = testprs_lextype')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 13605 (' testprs_lextype')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, testprs_lextype
---STARTSTATE: INITIAL @ 13621 ('
);

CREATE TEXT SEARCH CONFIGURATION testcfg (PAR')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["testprs_lextype"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "testprs_lextype",
                     },
      names       => ["testprs_lextype"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "lextypes",
  },
}
{
  DefineStmt => {
    definition => [
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "testprs_start",
                         },
          names       => ["testprs_start"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "START",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "testprs_getlexeme",
                         },
          names       => ["testprs_getlexeme"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "gettoken",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ",",
                           token_val => ",",
                           val => "testprs_end",
                         },
          names       => ["testprs_end"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "END",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1430",
                           token => ",",
                           token_val => ",",
                           val => "pg_catalog",
                         },
          names       => ["prsd_headline", "pg_catalog"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "headline",
      }, "SQL::Translator::Statement::DefElem"),
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ")",
                           token_val => ")",
                           val => "testprs_lextype",
                         },
          names       => ["testprs_lextype"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "lextypes",
      }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["testparser"],
    kind => "TSPARSER",
  },
}
---STARTSTATE: INITIAL @ 13623 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 13624 ('

CREATE TEXT SEARCH CONFIGURATION testcfg (PARSER')
---GOTMATCH: identifier
---ENDTOKEN: CREATE, CREATE
---STARTSTATE: INITIAL @ 13632 (' TEXT SEARCH CONFIGURATION testcfg (PARSER = testp')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 13637 (' SEARCH CONFIGURATION testcfg (PARSER = testparser')
---GOTMATCH: identifier
---ENDTOKEN: SEARCH, SEARCH
---STARTSTATE: INITIAL @ 13644 (' CONFIGURATION testcfg (PARSER = testparser);')
---GOTMATCH: identifier
---ENDTOKEN: CONFIGURATION, CONFIGURATION
---STARTSTATE: INITIAL @ 13658 (' testcfg (PARSER = testparser);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, testcfg
---STARTSTATE: INITIAL @ 13666 (' (PARSER = testparser);')
---GOTMATCH: self
---ENDTOKEN: (, (
---STARTSTATE: INITIAL @ 13668 ('PARSER = testparser);')
---GOTMATCH: identifier
---ENDTOKEN: PARSER, PARSER
---STARTSTATE: INITIAL @ 13674 (' = testparser);')
---GOTMATCH: self
---ENDTOKEN: =, =
---STARTSTATE: INITIAL @ 13676 (' testparser);')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, testparser
---STARTSTATE: INITIAL @ 13687 (');')
---GOTMATCH: self
---ENDTOKEN: ), )
{ TypeName => { names => ["testparser"], typemod => -1 } }
{
  DefElem => {
    arg => bless({
      arrayBounds => undef,
      location    => {
                       char_pos => undef,
                       left_side => "GenericType",
                       right_side => ["stmtmulti"],
                       rule_name => "GenericType_1429",
                       token => ")",
                       token_val => ")",
                       val => "testparser",
                     },
      names       => ["testparser"],
      typemod     => -1,
      typmods     => undef,
    }, "SQL::Translator::Statement::TypeName"),
    defaction => "UNSPEC",
    defname => "PARSER",
  },
}
{
  DefineStmt => {
    definition => [
      bless({
        arg => bless({
          arrayBounds => undef,
          location    => {
                           char_pos => undef,
                           left_side => "GenericType",
                           right_side => ["stmtmulti"],
                           rule_name => "GenericType_1429",
                           token => ")",
                           token_val => ")",
                           val => "testparser",
                         },
          names       => ["testparser"],
          typemod     => -1,
          typmods     => undef,
        }, "SQL::Translator::Statement::TypeName"),
        defaction => "UNSPEC",
        defname => "PARSER",
      }, "SQL::Translator::Statement::DefElem"),
    ],
    defnames => ["testcfg"],
    kind => "TSCONFIGURATION",
  },
}
---STARTSTATE: INITIAL @ 13688 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
---STARTSTATE: INITIAL @ 13689 ('

ALTER TEXT SEARCH CONFIGURATION testcfg ADD MAPP')
---GOTMATCH: identifier
---ENDTOKEN: ALTER, ALTER
---STARTSTATE: INITIAL @ 13696 (' TEXT SEARCH CONFIGURATION testcfg ADD MAPPING FOR')
---GOTMATCH: identifier
---ENDTOKEN: TEXT, TEXT
---STARTSTATE: INITIAL @ 13701 (' SEARCH CONFIGURATION testcfg ADD MAPPING FOR word')
---GOTMATCH: identifier
---ENDTOKEN: SEARCH, SEARCH
---STARTSTATE: INITIAL @ 13708 (' CONFIGURATION testcfg ADD MAPPING FOR word WITH s')
---GOTMATCH: identifier
---ENDTOKEN: CONFIGURATION, CONFIGURATION
---STARTSTATE: INITIAL @ 13722 (' testcfg ADD MAPPING FOR word WITH simple;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, testcfg
---STARTSTATE: INITIAL @ 13730 (' ADD MAPPING FOR word WITH simple;')
---GOTMATCH: identifier
---ENDTOKEN: ADD, ADD
---STARTSTATE: INITIAL @ 13734 (' MAPPING FOR word WITH simple;')
---GOTMATCH: identifier
---ENDTOKEN: MAPPING, MAPPING
---STARTSTATE: INITIAL @ 13742 (' FOR word WITH simple;')
---GOTMATCH: identifier
---ENDTOKEN: FOR, FOR
---STARTSTATE: INITIAL @ 13746 (' word WITH simple;')
---GOTMATCH: identifier
---ENDTOKEN: IDENT, word
---STARTSTATE: INITIAL @ 13751 (' WITH simple;')
---GOTMATCH: identifier
---STARTSTATE: INITIAL @ 13756 (' simple;')
---GOTMATCH: identifier
---ENDTOKEN: WITH, WITH
---ENDTOKEN: SIMPLE, simple
---STARTSTATE: INITIAL @ 13763 (';')
---GOTMATCH: self
---ENDTOKEN: ;, ;
{
  AlterTSConfigurationStmt => {
    cfgname   => ["testcfg"],
    dicts     => ["simple"],
    override  => 0,
    replace   => 0,
    tokentype => ["word"],
  },
}
---STARTSTATE: INITIAL @ 13764 ('
')
---EOB
---ENDTOKEN: , 
do {
  my $a = [
    bless({
      args => [
        bless({
          location => {
            char_pos => undef,
            left_side => "var_value",
            right_side => ["stmtmulti"],
            rule_name => "var_value_188",
            token => undef,
            token_val => undef,
            val => "off",
          },
          type => "String",
          val => "off",
        }, "SQL::Translator::Statement::A_Const"),
      ],
      is_local => 0,
      kind => "SET_VALUE",
      name => "enable_seqscan",
    }, "SQL::Translator::Statement::VariableSet"),
    bless({
      args => [
        bless({
          location => {
            char_pos => undef,
            left_side => "var_value",
            right_side => ["stmtmulti"],
            rule_name => "var_value_188",
            token => undef,
            token_val => undef,
            val => "escape",
          },
          type => "String",
          val => "escape",
        }, "SQL::Translator::Statement::A_Const"),
      ],
      is_local => 0,
      kind => "SET_VALUE",
      name => "bytea_output",
    }, "SQL::Translator::Statement::VariableSet"),
    bless({
      if_not_exists => 0,
      oncommit      => "NOOP",
      relation      => bless({
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "(",
                           token_val => "(",
                           val => "test_timetz",
                         },
                         relname => "test_timetz",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
      tableElts     => [
                         bless({
                           collOid      => 0,
                           colname      => "i",
                           constraints  => [],
                           inhcount     => 0,
                           is_from_type => 0,
                           is_local     => 1,
                           is_not_null  => 0,
                           storage      => 0,
                           typeName     => bless({
                                             arrayBounds => undef,
                                             location    => {
                                                              char_pos => undef,
                                                              left_side => "GenericType",
                                                              right_side => ["stmtmulti"],
                                                              rule_name => "GenericType_1429",
                                                              token => ")",
                                                              token_val => ")",
                                                              val => "timetz",
                                                            },
                                             names       => ["timetz"],
                                             typemod     => -1,
                                             typmods     => undef,
                                           }, "SQL::Translator::Statement::TypeName"),
                         }, "SQL::Translator::Statement::Column::Definition"),
                       ],
    }, "SQL::Translator::Statement::Create"),
    bless({
      if_not_exists => 0,
      oncommit      => "NOOP",
      relation      => bless({
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "(",
                           token_val => "(",
                           val => "test_char",
                         },
                         relname => "test_char",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
      tableElts     => [
                         bless({
                           collOid      => 0,
                           colname      => "i",
                           constraints  => [],
                           inhcount     => 0,
                           is_from_type => 0,
                           is_local     => 1,
                           is_not_null  => 0,
                           storage      => 0,
                           typeName     => bless({
                                             arrayBounds => undef,
                                             location    => {
                                                              char_pos => undef,
                                                              left_side => "GenericType",
                                                              right_side => ["stmtmulti"],
                                                              rule_name => "GenericType_1429",
                                                              token => ")",
                                                              token_val => ")",
                                                              val => "char",
                                                            },
                                             names       => ["char"],
                                             typemod     => -1,
                                             typmods     => undef,
                                           }, "SQL::Translator::Statement::TypeName"),
                         }, "SQL::Translator::Statement::Column::Definition"),
                       ],
    }, "SQL::Translator::Statement::Create"),
    bless({
      relation      => bless({
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "VALUES",
                           token_val => "VALUES",
                           val => "test_timetz",
                         },
                         relname => "test_timetz",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
      returningList => undef,
      selectStmt    => bless({
                         valuesLists => [
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "AexprConst",
                               right_side => ["stmtmulti"],
                               rule_name => "AexprConst_1791",
                               token => undef,
                               token_val => undef,
                               val => "03:55:08 GMT+2",
                             },
                             type => "String",
                             val => "03:55:08 GMT+2",
                           }, "SQL::Translator::Statement::A_Const"),
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "AexprConst",
                               right_side => ["stmtmulti"],
                               rule_name => "AexprConst_1791",
                               token => undef,
                               token_val => undef,
                               val => "04:55:08 GMT+2",
                             },
                             type => "String",
                             val => "04:55:08 GMT+2",
                           }, "SQL::Translator::Statement::A_Const"),
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "AexprConst",
                               right_side => ["stmtmulti"],
                               rule_name => "AexprConst_1791",
                               token => undef,
                               token_val => undef,
                               val => "05:55:08 GMT+2",
                             },
                             type => "String",
                             val => "05:55:08 GMT+2",
                           }, "SQL::Translator::Statement::A_Const"),
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "AexprConst",
                               right_side => ["stmtmulti"],
                               rule_name => "AexprConst_1791",
                               token => undef,
                               token_val => undef,
                               val => "08:55:08 GMT+2",
                             },
                             type => "String",
                             val => "08:55:08 GMT+2",
                           }, "SQL::Translator::Statement::A_Const"),
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "AexprConst",
                               right_side => ["stmtmulti"],
                               rule_name => "AexprConst_1791",
                               token => undef,
                               token_val => undef,
                               val => "09:55:08 GMT+2",
                             },
                             type => "String",
                             val => "09:55:08 GMT+2",
                           }, "SQL::Translator::Statement::A_Const"),
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "AexprConst",
                               right_side => ["stmtmulti"],
                               rule_name => "AexprConst_1791",
                               token => undef,
                               token_val => undef,
                               val => "10:55:08 GMT+2",
                             },
                             type => "String",
                             val => "10:55:08 GMT+2",
                           }, "SQL::Translator::Statement::A_Const"),
                         ],
                       }, "SQL::Translator::Statement::Select"),
      withClause    => undef,
    }, "SQL::Translator::Statement::Insert"),
    bless({
      accessMethod => "gin",
      concurrent   => 0,
      idxname      => "idx_timetz",
      indexOid     => 0,
      indexParams  => [
                        bless({ name => "i", nulls_ordering => "DEFAULT", ordering => "DEFAULT" }, "SQL::Translator::Statement::IndexElem"),
                      ],
      relation     => bless({
                        inhOpt => "DEFAULT",
                        location => {
                          char_pos => undef,
                          left_side => "qualified_name",
                          right_side => ["stmtmulti"],
                          rule_name => "qualified_name_1777",
                          token => "USING",
                          token_val => "USING",
                          val => "test_timetz",
                        },
                        relname => "test_timetz",
                        relpersistence => "\"p\"",
                      }, "SQL::Translator::Statement::RangeVar"),
      unique       => 0,
    }, "SQL::Translator::Statement::Index"),
    bless({
      fromClause    => [
                         bless({
                           alias => undef,
                           inhOpt => "DEFAULT",
                           location => {
                             char_pos => undef,
                             left_side => "qualified_name",
                             right_side => ["stmtmulti"],
                             rule_name => "qualified_name_1777",
                             token => "WHERE",
                             token_val => "WHERE",
                             val => "test_timetz",
                           },
                           relname => "test_timetz",
                           relpersistence => "\"p\"",
                         }, "SQL::Translator::Statement::RangeVar"),
                       ],
      lockingClause => [undef, undef],
      sortClause    => [
                         bless({
                           node => bless({
                             fields   => ["i"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ";",
                                           token_val => ";",
                                           val => "i",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                           sortby_dir => "DEFAULT",
                           sortby_nulls => "DEFAULT",
                         }, "SQL::Translator::Statement::SortBy"),
                       ],
      targetList    => [
                         bless({
                           location => {
                             char_pos => undef,
                             left_side => "target_el",
                             right_side => ["stmtmulti"],
                             rule_name => "target_el_1774",
                             token => undef,
                             token_val => undef,
                             val => "*",
                           },
                           val => bless({
                             fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
                             location => {
                                           char_pos => undef,
                                           left_side => "target_el",
                                           right_side => ["stmtmulti"],
                                           rule_name => "target_el_1774",
                                           token => undef,
                                           token_val => undef,
                                           val => "*",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         }, "SQL::Translator::Statement::ResultTarget"),
                       ],
      whereClause   => bless({
                         kind     => "OP",
                         lexpr    => bless({
                                       fields   => ["i"],
                                       location => {
                                                     char_pos => undef,
                                                     left_side => "columnref",
                                                     right_side => ["stmtmulti"],
                                                     rule_name => "columnref_1752",
                                                     token => "<",
                                                     token_val => "<",
                                                     val => "i",
                                                   },
                                     }, "SQL::Translator::Statement::Column::Reference"),
                         location => {
                                       char_pos => undef,
                                       left_side => "a_expr",
                                       right_side => ["stmtmulti", ";", "stmt"],
                                       rule_name => "a_expr_1504",
                                       token => "ORDER",
                                       token_val => "ORDER",
                                       val => "<",
                                     },
                         name     => ["<"],
                         rexpr    => bless({
                                       arg => bless({
                                         location => {
                                           char_pos => undef,
                                           left_side => "AexprConst",
                                           right_side => ["stmtmulti"],
                                           rule_name => "AexprConst_1791",
                                           token => undef,
                                           token_val => undef,
                                           val => "08:55:08 GMT+2",
                                         },
                                         type => "String",
                                         val => "08:55:08 GMT+2",
                                       }, "SQL::Translator::Statement::A_Const"),
                                       location => {
                                         char_pos => undef,
                                         left_side => "a_expr",
                                         right_side => ["stmtmulti", ";", "stmt"],
                                         rule_name => "a_expr_1493",
                                         token => "ORDER",
                                         token_val => "ORDER",
                                         val => "::",
                                       },
                                       typeName => bless({
                                         arrayBounds => undef,
                                         location    => {
                                                          char_pos => undef,
                                                          left_side => "GenericType",
                                                          right_side => ["stmtmulti"],
                                                          rule_name => "GenericType_1429",
                                                          token => "ORDER",
                                                          token_val => "ORDER",
                                                          val => "timetz",
                                                        },
                                         names       => ["timetz"],
                                         typemod     => -1,
                                         typmods     => undef,
                                       }, "SQL::Translator::Statement::TypeName"),
                                     }, "SQL::Translator::Statement::TypeCast"),
                       }, "SQL::Translator::Statement::A_Expr"),
    }, "SQL::Translator::Statement::Select"),
    bless({
      fromClause    => [
                         bless({
                           alias => undef,
                           inhOpt => "DEFAULT",
                           location => {
                             char_pos => undef,
                             left_side => "qualified_name",
                             right_side => ["stmtmulti"],
                             rule_name => "qualified_name_1777",
                             token => "WHERE",
                             token_val => "WHERE",
                             val => "test_char",
                           },
                           relname => "test_char",
                           relpersistence => "\"p\"",
                         }, "SQL::Translator::Statement::RangeVar"),
                       ],
      lockingClause => [undef, undef],
      sortClause    => [
                         bless({
                           node => bless({
                             fields   => ["i"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ";",
                                           token_val => ";",
                                           val => "i",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                           sortby_dir => "DEFAULT",
                           sortby_nulls => "DEFAULT",
                         }, "SQL::Translator::Statement::SortBy"),
                       ],
      targetList    => [
                         bless({
                           location => {
                             char_pos => undef,
                             left_side => "target_el",
                             right_side => ["stmtmulti"],
                             rule_name => "target_el_1774",
                             token => undef,
                             token_val => undef,
                             val => "*",
                           },
                           val => bless({
                             fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
                             location => {
                                           char_pos => undef,
                                           left_side => "target_el",
                                           right_side => ["stmtmulti"],
                                           rule_name => "target_el_1774",
                                           token => undef,
                                           token_val => undef,
                                           val => "*",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         }, "SQL::Translator::Statement::ResultTarget"),
                       ],
      whereClause   => bless({
                         kind     => "OP",
                         lexpr    => bless({
                                       fields   => ["i"],
                                       location => {
                                                     char_pos => undef,
                                                     left_side => "columnref",
                                                     right_side => ["stmtmulti"],
                                                     rule_name => "columnref_1752",
                                                     token => "<",
                                                     token_val => "<",
                                                     val => "i",
                                                   },
                                     }, "SQL::Translator::Statement::Column::Reference"),
                         location => {
                                       char_pos => undef,
                                       left_side => "a_expr",
                                       right_side => ["stmtmulti", ";", "stmt"],
                                       rule_name => "a_expr_1504",
                                       token => "ORDER",
                                       token_val => "ORDER",
                                       val => "<",
                                     },
                         name     => ["<"],
                         rexpr    => bless({
                                       arg => bless({
                                         location => {
                                           char_pos => undef,
                                           left_side => "AexprConst",
                                           right_side => ["stmtmulti"],
                                           rule_name => "AexprConst_1791",
                                           token => undef,
                                           token_val => undef,
                                           val => "d",
                                         },
                                         type => "String",
                                         val => "d",
                                       }, "SQL::Translator::Statement::A_Const"),
                                       location => {
                                         char_pos => undef,
                                         left_side => "a_expr",
                                         right_side => ["stmtmulti", ";", "stmt"],
                                         rule_name => "a_expr_1493",
                                         token => "ORDER",
                                         token_val => "ORDER",
                                         val => "::",
                                       },
                                       typeName => bless({
                                         arrayBounds => undef,
                                         location    => {
                                                          char_pos => undef,
                                                          left_side => "GenericType",
                                                          right_side => ["stmtmulti"],
                                                          rule_name => "GenericType_1429",
                                                          token => "ORDER",
                                                          token_val => "ORDER",
                                                          val => "char",
                                                        },
                                         names       => ["char"],
                                         typemod     => -1,
                                         typmods     => undef,
                                       }, "SQL::Translator::Statement::TypeName"),
                                     }, "SQL::Translator::Statement::TypeCast"),
                       }, "SQL::Translator::Statement::A_Expr"),
    }, "SQL::Translator::Statement::Select"),
    bless({ extname => "btree_gin", if_not_exists => 0 }, "SQL::Translator::Statement::CreateExtension"),
    bless({
      funcname   => ["pg_file_rename", "pg_catalog"],
      options    => [
                      bless({
                        arg => ["MODULE_PATHNAME", "pg_file_rename"],
                        defaction => "UNSPEC",
                        defname => "as",
                      }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "c", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "volatile", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "text",
                                         },
                          names       => ["text"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "text",
                                         },
                          names       => ["text"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "text",
                                         },
                          names       => ["text"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "bool",
                                     },
                      names       => ["bool"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      funcname   => ["pg_file_rename", "pg_catalog"],
      options    => [
                      bless({
                        arg => [
                          "SELECT pg_catalog.pg_file_rename(\$1, \$2, NULL::pg_catalog.text);",
                        ],
                        defaction => "UNSPEC",
                        defname => "as",
                      }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "volatile", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "text",
                                         },
                          names       => ["text"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "text",
                                         },
                          names       => ["text"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "bool",
                                     },
                      names       => ["bool"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      funcname   => ["pg_logfile_rotate", "pg_catalog"],
      options    => [
                      bless({ arg => ["pg_rotate_logfile"], defaction => "UNSPEC", defname => "as" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "internal", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "volatile", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "int4",
                                     },
                      names       => ["int4"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      funcname   => ["gin_extract_query_int2"],
      options    => [
                      bless({ arg => ["MODULE_PATHNAME"], defaction => "UNSPEC", defname => "as" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "c", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "int2",
                                         },
                          names       => ["int2"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "internal",
                                         },
                          names       => ["internal"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "int2",
                                         },
                          names       => ["int2"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "internal",
                                         },
                          names       => ["internal"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "internal",
                                         },
                          names       => ["internal"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "internal",
                                     },
                      names       => ["internal"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      amname      => "gin",
      datatype    => bless({
                       arrayBounds => undef,
                       location    => {
                                        char_pos => undef,
                                        left_side => "GenericType",
                                        right_side => ["stmtmulti"],
                                        rule_name => "GenericType_1429",
                                        token => "USING",
                                        token_val => "USING",
                                        val => "int2",
                                      },
                       names       => ["int2"],
                       typemod     => -1,
                       typmods     => undef,
                     }, "SQL::Translator::Statement::TypeName"),
      isDefault   => 1,
      items       => [
                       bless({ itemtype => "OPERATOR", name => ["<"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => ["<="], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => ["="], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => [">="], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => [">"], number => 5 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["btint2cmp"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gin_extract_value_int2"], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gin_extract_query_int2"], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gin_btree_consistent"], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({
                         itemtype => "FUNCTION",
                         name => ["gin_compare_prefix_int2"],
                         number => 5,
                       }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({
                         itemtype   => "STORAGETYPE",
                         storedtype => bless({
                                         arrayBounds => undef,
                                         location    => {
                                                          char_pos => undef,
                                                          left_side => "GenericType",
                                                          right_side => ["stmtmulti"],
                                                          rule_name => "GenericType_1429",
                                                          token => ";",
                                                          token_val => ";",
                                                          val => "int2",
                                                        },
                                         names       => ["int2"],
                                         typemod     => -1,
                                         typmods     => undef,
                                       }, "SQL::Translator::Statement::TypeName"),
                       }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     ],
      opclassname => ["int2_ops"],
    }, "SQL::Translator::Statement::CreateOpClass"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_btree_consistent"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_int2"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_compare_prefix_int2"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_query_int2"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objargs => ["gin"],
      objname => ["int2_ops"],
      objtype => "OPFAMILY",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objargs => ["gin"],
      objname => ["int2_ops"],
      objtype => "OPCLASS",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_int8"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_float4"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_float8"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_money"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_oid"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_timestamp"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_timestamptz"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_time"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_timetz"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_date"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_interval"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_macaddr"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_inet"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_cidr"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_text"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_char"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_bytea"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_bit"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_varbit"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "btree_gin",
      objname => ["gin_extract_value_numeric"],
      objtype => "FUNCTION",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      definition => [
        bless({ arg => 4, defaction => "UNSPEC", defname => "internallength" }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "gbtreekey4_in",
                           },
            names       => ["gbtreekey4_in"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "INPUT",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "gbtreekey4_out",
                           },
            names       => ["gbtreekey4_out"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "output",
        }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["gbtreekey4"],
      kind => "TYPE",
      oldstyle => 0,
    }, "SQL::Translator::Statement::Define"),
    bless({
      definition => [
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "money",
                           },
            names       => ["money"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "leftarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "money",
                           },
            names       => ["money"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "rightarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "cash_dist",
                           },
            names       => ["cash_dist"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "PROCEDURE",
        }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => "<->", defaction => "UNSPEC", defname => "commutator" }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["<->"],
      kind => "OPERATOR",
      oldstyle => 0,
    }, "SQL::Translator::Statement::Define"),
    bless({
      amname => "gist",
      isDrop => 0,
      items => [
        bless({
          args     => [
                        bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "money",
                                         },
                          names       => ["money"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "money",
                                         },
                          names       => ["money"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      ],
          itemtype => "OPERATOR",
          name     => ["<>"],
          number   => 6,
        }, "SQL::Translator::Statement::CreateOpClass::Item"),
        bless({
          args => [
            bless({
              arrayBounds => undef,
              location    => {
                               char_pos => undef,
                               left_side => "GenericType",
                               right_side => ["stmtmulti"],
                               rule_name => "GenericType_1429",
                               token => ",",
                               token_val => ",",
                               val => "money",
                             },
              names       => ["money"],
              typemod     => -1,
              typmods     => undef,
            }, "SQL::Translator::Statement::TypeName"),
            bless({
              arrayBounds => undef,
              location    => {
                               char_pos => undef,
                               left_side => "GenericType",
                               right_side => ["stmtmulti"],
                               rule_name => "GenericType_1429",
                               token => ")",
                               token_val => ")",
                               val => "money",
                             },
              names       => ["money"],
              typemod     => -1,
              typmods     => undef,
            }, "SQL::Translator::Statement::TypeName"),
          ],
          itemtype => "OPERATOR",
          name => ["<->"],
          number => 15,
          order_family => ["money_ops", "pg_catalog"],
        }, "SQL::Translator::Statement::CreateOpClass::Item"),
        bless({
          class_args => [
            bless({
              arrayBounds => undef,
              location    => {
                               char_pos => undef,
                               left_side => "GenericType",
                               right_side => ["stmtmulti"],
                               rule_name => "GenericType_1429",
                               token => ",",
                               token_val => ",",
                               val => "money",
                             },
              names       => ["money"],
              typemod     => -1,
              typmods     => undef,
            }, "SQL::Translator::Statement::TypeName"),
            bless({
              arrayBounds => undef,
              location    => {
                               char_pos => undef,
                               left_side => "GenericType",
                               right_side => ["stmtmulti"],
                               rule_name => "GenericType_1429",
                               token => ")",
                               token_val => ")",
                               val => "money",
                             },
              names       => ["money"],
              typemod     => -1,
              typmods     => undef,
            }, "SQL::Translator::Statement::TypeName"),
          ],
          itemtype => "FUNCTION",
          name => ["gbt_cash_distance"],
          number => 8,
        }, "SQL::Translator::Statement::CreateOpClass::Item"),
      ],
      opfamilyname => ["gist_cash_ops"],
    }, "SQL::Translator::Statement::AlterOpFamily"),
    bless({
      amname => "gist",
      isDrop => 0,
      items => [
        bless({
          args     => [
                        bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "macaddr",
                                         },
                          names       => ["macaddr"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "macaddr",
                                         },
                          names       => ["macaddr"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      ],
          itemtype => "OPERATOR",
          name     => ["<>"],
          number   => 6,
        }, "SQL::Translator::Statement::CreateOpClass::Item"),
      ],
      opfamilyname => ["gist_macaddr_ops"],
    }, "SQL::Translator::Statement::AlterOpFamily"),
    bless({
      amname      => "gist",
      datatype    => bless({
                       arrayBounds => undef,
                       location    => {
                                        char_pos => undef,
                                        left_side => "GenericType",
                                        right_side => ["stmtmulti"],
                                        rule_name => "GenericType_1429",
                                        token => "USING",
                                        token_val => "USING",
                                        val => "oid",
                                      },
                       names       => ["oid"],
                       typemod     => -1,
                       typmods     => undef,
                     }, "SQL::Translator::Statement::TypeName"),
      isDefault   => 1,
      items       => [
                       bless({ itemtype => "OPERATOR", name => ["<"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => ["<="], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => ["="], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => [">="], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => [">"], number => 5 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gbt_oid_consistent"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gbt_oid_union"], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gbt_oid_compress"], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gbt_decompress"], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gbt_oid_penalty"], number => 5 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gbt_oid_picksplit"], number => 6 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["gbt_oid_same"], number => 7 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({
                         itemtype   => "STORAGETYPE",
                         storedtype => bless({
                                         arrayBounds => undef,
                                         location    => {
                                                          char_pos => undef,
                                                          left_side => "GenericType",
                                                          right_side => ["stmtmulti"],
                                                          rule_name => "GenericType_1429",
                                                          token => ";",
                                                          token_val => ";",
                                                          val => "gbtreekey8",
                                                        },
                                         names       => ["gbtreekey8"],
                                         typemod     => -1,
                                         typmods     => undef,
                                       }, "SQL::Translator::Statement::TypeName"),
                       }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     ],
      opclassname => ["gist_oid_ops"],
    }, "SQL::Translator::Statement::CreateOpClass"),
    bless({
      amname => "gist",
      isDrop => 0,
      items => [
        bless({
          args     => [
                        bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "oid",
                                         },
                          names       => ["oid"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "oid",
                                         },
                          names       => ["oid"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                      ],
          itemtype => "OPERATOR",
          name     => ["<>"],
          number   => 6,
        }, "SQL::Translator::Statement::CreateOpClass::Item"),
        bless({
          args => [
            bless({
              arrayBounds => undef,
              location    => {
                               char_pos => undef,
                               left_side => "GenericType",
                               right_side => ["stmtmulti"],
                               rule_name => "GenericType_1429",
                               token => ",",
                               token_val => ",",
                               val => "oid",
                             },
              names       => ["oid"],
              typemod     => -1,
              typmods     => undef,
            }, "SQL::Translator::Statement::TypeName"),
            bless({
              arrayBounds => undef,
              location    => {
                               char_pos => undef,
                               left_side => "GenericType",
                               right_side => ["stmtmulti"],
                               rule_name => "GenericType_1429",
                               token => ")",
                               token_val => ")",
                               val => "oid",
                             },
              names       => ["oid"],
              typemod     => -1,
              typmods     => undef,
            }, "SQL::Translator::Statement::TypeName"),
          ],
          itemtype => "OPERATOR",
          name => ["<->"],
          number => 15,
          order_family => ["oid_ops", "pg_catalog"],
        }, "SQL::Translator::Statement::CreateOpClass::Item"),
        bless({
          class_args => [
            bless({
              arrayBounds => undef,
              location    => {
                               char_pos => undef,
                               left_side => "GenericType",
                               right_side => ["stmtmulti"],
                               rule_name => "GenericType_1429",
                               token => ",",
                               token_val => ",",
                               val => "oid",
                             },
              names       => ["oid"],
              typemod     => -1,
              typmods     => undef,
            }, "SQL::Translator::Statement::TypeName"),
            bless({
              arrayBounds => undef,
              location    => {
                               char_pos => undef,
                               left_side => "GenericType",
                               right_side => ["stmtmulti"],
                               rule_name => "GenericType_1429",
                               token => ")",
                               token_val => ")",
                               val => "oid",
                             },
              names       => ["oid"],
              typemod     => -1,
              typmods     => undef,
            }, "SQL::Translator::Statement::TypeName"),
          ],
          itemtype => "FUNCTION",
          name => ["gbt_oid_distance"],
          number => 8,
        }, "SQL::Translator::Statement::CreateOpClass::Item"),
      ],
      opfamilyname => ["gist_oid_ops"],
    }, "SQL::Translator::Statement::AlterOpFamily"),
    bless({
      if_not_exists => 0,
      oncommit      => "NOOP",
      relation      => bless({
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "(",
                           token_val => "(",
                           val => "test_ne",
                         },
                         relname => "test_ne",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
      tableElts     => [
                         bless({
                           collOid      => 0,
                           colname      => "a",
                           constraints  => [],
                           inhcount     => 0,
                           is_from_type => 0,
                           is_local     => 1,
                           is_not_null  => 0,
                           storage      => 0,
                           typeName     => bless({
                                             arrayBounds => undef,
                                             location    => {
                                                              char_pos => undef,
                                                              left_side => "ConstDatetime",
                                                              right_side => ["stmtmulti"],
                                                              rule_name => "ConstDatetime_1469",
                                                              token => ",",
                                                              token_val => ",",
                                                              val => "TIMESTAMP",
                                                            },
                                             names       => ["pg_catalog", "timestamp"],
                                             typemod     => -1,
                                           }, "SQL::Translator::Statement::TypeName"),
                         }, "SQL::Translator::Statement::Column::Definition"),
                         bless({
                           collOid      => 0,
                           colname      => "b",
                           constraints  => [],
                           inhcount     => 0,
                           is_from_type => 0,
                           is_local     => 1,
                           is_not_null  => 0,
                           storage      => 0,
                           typeName     => bless({
                                             arrayBounds => undef,
                                             location    => {
                                                              char_pos => undef,
                                                              left_side => "Numeric",
                                                              right_side => ["stmtmulti"],
                                                              rule_name => "Numeric_1442",
                                                              token => ")",
                                                              token_val => ")",
                                                              val => "NUMERIC",
                                                            },
                                             names       => ["pg_catalog", "numeric"],
                                             typemod     => -1,
                                             typmods     => undef,
                                           }, "SQL::Translator::Statement::TypeName"),
                         }, "SQL::Translator::Statement::Column::Definition"),
                       ],
    }, "SQL::Translator::Statement::Create"),
    bless({
      accessMethod => "gist",
      concurrent   => 0,
      idxname      => "test_ne_idx",
      indexOid     => 0,
      indexParams  => [
                        bless({ name => "a", nulls_ordering => "DEFAULT", ordering => "DEFAULT" }, "SQL::Translator::Statement::IndexElem"),
                        bless({ name => "b", nulls_ordering => "DEFAULT", ordering => "DEFAULT" }, "SQL::Translator::Statement::IndexElem"),
                      ],
      relation     => bless({
                        inhOpt => "DEFAULT",
                        location => {
                          char_pos => undef,
                          left_side => "qualified_name",
                          right_side => ["stmtmulti"],
                          rule_name => "qualified_name_1777",
                          token => "USING",
                          token_val => "USING",
                          val => "test_ne",
                        },
                        relname => "test_ne",
                        relpersistence => "\"p\"",
                      }, "SQL::Translator::Statement::RangeVar"),
      unique       => 0,
    }, "SQL::Translator::Statement::Index"),
    bless({
      relation      => bless({
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "SELECT",
                           token_val => "SELECT",
                           val => "test_ne",
                         },
                         relname => "test_ne",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
      returningList => undef,
      selectStmt    => bless({
                         fromClause => [
                                         bless({
                                           funccallnode => bless({
                                             agg_distinct => 0,
                                             agg_star => 0,
                                             args => [
                                               bless({
                                                 location => {
                                                   char_pos => undef,
                                                   left_side => "AexprConst",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "AexprConst_1789",
                                                   token => undef,
                                                   token_val => undef,
                                                   val => 1,
                                                 },
                                                 type => "Integer",
                                                 val => 1,
                                               }, "SQL::Translator::Statement::A_Const"),
                                               bless({
                                                 location => {
                                                   char_pos => undef,
                                                   left_side => "AexprConst",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "AexprConst_1789",
                                                   token => undef,
                                                   token_val => undef,
                                                   val => 1000,
                                                 },
                                                 type => "Integer",
                                                 val => 1000,
                                               }, "SQL::Translator::Statement::A_Const"),
                                             ],
                                             func_variadic => 0,
                                             funcname => ["generate_series"],
                                             location => {
                                               char_pos => undef,
                                               left_side => "func_expr",
                                               right_side => ["stmtmulti"],
                                               rule_name => "func_expr_1585",
                                               token => ";",
                                               token_val => ";",
                                               val => 'fix',
                                             },
                                           }, "SQL::Translator::Statement::Function::Call"),
                                         }, "SQL::Translator::Statement::Range::Function"),
                                       ],
                         targetList => [
                                         bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "target_el",
                                             right_side => ["stmtmulti"],
                                             rule_name => "target_el_1773",
                                             token => ",",
                                             token_val => ",",
                                             val => bless({
                                               location => {
                                                 char_pos => undef,
                                                 left_side => "AexprConst",
                                                 right_side => ["stmtmulti"],
                                                 rule_name => "AexprConst_1791",
                                                 token => undef,
                                                 token_val => undef,
                                                 val => "2009-01-01",
                                               },
                                               type => "String",
                                               val => "2009-01-01",
                                             }, "SQL::Translator::Statement::A_Const"),
                                           },
                                           val => 'fix',
                                         }, "SQL::Translator::Statement::ResultTarget"),
                                         bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "target_el",
                                             right_side => ["stmtmulti"],
                                             rule_name => "target_el_1773",
                                             token => "FROM",
                                             token_val => "FROM",
                                             val => bless({
                                               location => {
                                                 char_pos => undef,
                                                 left_side => "AexprConst",
                                                 right_side => ["stmtmulti"],
                                                 rule_name => "AexprConst_1790",
                                                 token => undef,
                                                 token_val => undef,
                                                 val => 10.7,
                                               },
                                               type => "Float",
                                               val => 10.7,
                                             }, "SQL::Translator::Statement::A_Const"),
                                           },
                                           val => 'fix',
                                         }, "SQL::Translator::Statement::ResultTarget"),
                                       ],
                       }, "SQL::Translator::Statement::Select"),
      withClause    => undef,
    }, "SQL::Translator::Statement::Insert"),
    bless({
      relation      => bless({
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "VALUES",
                           token_val => "VALUES",
                           val => "test_ne",
                         },
                         relname => "test_ne",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
      returningList => undef,
      selectStmt    => bless({
                         valuesLists => [
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "AexprConst",
                               right_side => ["stmtmulti"],
                               rule_name => "AexprConst_1791",
                               token => undef,
                               token_val => undef,
                               val => "2007-02-03",
                             },
                             type => "String",
                             val => "2007-02-03",
                           }, "SQL::Translator::Statement::A_Const"),
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "a_expr",
                               right_side => ["stmtmulti"],
                               rule_name => "a_expr_1497",
                               token => ")",
                               token_val => ")",
                               val => "-",
                             },
                             type => "Float",
                             val => -91.3,
                           }, "SQL::Translator::Statement::A_Const"),
                         ],
                       }, "SQL::Translator::Statement::Select"),
      withClause    => undef,
    }, "SQL::Translator::Statement::Insert"),
    bless({
      relation      => bless({
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "VALUES",
                           token_val => "VALUES",
                           val => "test_ne",
                         },
                         relname => "test_ne",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
      returningList => undef,
      selectStmt    => bless({
                         valuesLists => [
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "AexprConst",
                               right_side => ["stmtmulti"],
                               rule_name => "AexprConst_1791",
                               token => undef,
                               token_val => undef,
                               val => "2011-09-01",
                             },
                             type => "String",
                             val => "2011-09-01",
                           }, "SQL::Translator::Statement::A_Const"),
                           bless({
                             location => {
                               char_pos => undef,
                               left_side => "AexprConst",
                               right_side => ["stmtmulti"],
                               rule_name => "AexprConst_1790",
                               token => undef,
                               token_val => undef,
                               val => 43.7,
                             },
                             type => "Float",
                             val => 43.7,
                           }, "SQL::Translator::Statement::A_Const"),
                         ],
                       }, "SQL::Translator::Statement::Select"),
      withClause    => undef,
    }, "SQL::Translator::Statement::Insert"),
    bless({
      relation      => bless({
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "SELECT",
                           token_val => "SELECT",
                           val => "test_ne",
                         },
                         relname => "test_ne",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
      returningList => undef,
      selectStmt    => bless({
                         fromClause => [
                                         bless({
                                           funccallnode => bless({
                                             agg_distinct => 0,
                                             agg_star => 0,
                                             args => [
                                               bless({
                                                 location => {
                                                   char_pos => undef,
                                                   left_side => "AexprConst",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "AexprConst_1789",
                                                   token => undef,
                                                   token_val => undef,
                                                   val => 1,
                                                 },
                                                 type => "Integer",
                                                 val => 1,
                                               }, "SQL::Translator::Statement::A_Const"),
                                               bless({
                                                 location => {
                                                   char_pos => undef,
                                                   left_side => "AexprConst",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "AexprConst_1789",
                                                   token => undef,
                                                   token_val => undef,
                                                   val => 1000,
                                                 },
                                                 type => "Integer",
                                                 val => 1000,
                                               }, "SQL::Translator::Statement::A_Const"),
                                             ],
                                             func_variadic => 0,
                                             funcname => ["generate_series"],
                                             location => {
                                               char_pos => undef,
                                               left_side => "func_expr",
                                               right_side => ["stmtmulti"],
                                               rule_name => "func_expr_1585",
                                               token => ";",
                                               token_val => ";",
                                               val => 'fix',
                                             },
                                           }, "SQL::Translator::Statement::Function::Call"),
                                         }, "SQL::Translator::Statement::Range::Function"),
                                       ],
                         targetList => [
                                         bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "target_el",
                                             right_side => ["stmtmulti"],
                                             rule_name => "target_el_1773",
                                             token => ",",
                                             token_val => ",",
                                             val => bless({
                                               location => {
                                                 char_pos => undef,
                                                 left_side => "AexprConst",
                                                 right_side => ["stmtmulti"],
                                                 rule_name => "AexprConst_1791",
                                                 token => undef,
                                                 token_val => undef,
                                                 val => "2009-01-01",
                                               },
                                               type => "String",
                                               val => "2009-01-01",
                                             }, "SQL::Translator::Statement::A_Const"),
                                           },
                                           val => 'fix',
                                         }, "SQL::Translator::Statement::ResultTarget"),
                                         bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "target_el",
                                             right_side => ["stmtmulti"],
                                             rule_name => "target_el_1773",
                                             token => "FROM",
                                             token_val => "FROM",
                                             val => bless({
                                               location => {
                                                 char_pos => undef,
                                                 left_side => "AexprConst",
                                                 right_side => ["stmtmulti"],
                                                 rule_name => "AexprConst_1790",
                                                 token => undef,
                                                 token_val => undef,
                                                 val => 10.7,
                                               },
                                               type => "Float",
                                               val => 10.7,
                                             }, "SQL::Translator::Statement::A_Const"),
                                           },
                                           val => 'fix',
                                         }, "SQL::Translator::Statement::ResultTarget"),
                                       ],
                       }, "SQL::Translator::Statement::Select"),
      withClause    => undef,
    }, "SQL::Translator::Statement::Insert"),
    bless({
      options => [
                   bless({ arg => "OFF", defaction => "UNSPEC", defname => "costs" }, "SQL::Translator::Statement::DefElem"),
                 ],
      query   => bless({
                   fromClause  => [
                                    bless({
                                      alias => undef,
                                      inhOpt => "DEFAULT",
                                      location => {
                                        char_pos => undef,
                                        left_side => "qualified_name",
                                        right_side => ["stmtmulti"],
                                        rule_name => "qualified_name_1777",
                                        token => "WHERE",
                                        token_val => "WHERE",
                                        val => "test_ne",
                                      },
                                      relname => "test_ne",
                                      relpersistence => "\"p\"",
                                    }, "SQL::Translator::Statement::RangeVar"),
                                  ],
                   targetList  => [
                                    bless({
                                      location => {
                                        char_pos => undef,
                                        left_side => "target_el",
                                        right_side => ["stmtmulti"],
                                        rule_name => "target_el_1774",
                                        token => undef,
                                        token_val => undef,
                                        val => "*",
                                      },
                                      val => bless({
                                        fields   => [bless({}, "SQL::Translator::Statement::A_Star")],
                                        location => {
                                                      char_pos => undef,
                                                      left_side => "target_el",
                                                      right_side => ["stmtmulti"],
                                                      rule_name => "target_el_1774",
                                                      token => undef,
                                                      token_val => undef,
                                                      val => "*",
                                                    },
                                      }, "SQL::Translator::Statement::Column::Reference"),
                                    }, "SQL::Translator::Statement::ResultTarget"),
                                  ],
                   whereClause => bless({
                                    kind     => "AND",
                                    lexpr    => bless({
                                                  kind     => "OP",
                                                  lexpr    => bless({
                                                                fields   => ["a"],
                                                                location => {
                                                                              char_pos => undef,
                                                                              left_side => "columnref",
                                                                              right_side => ["stmtmulti"],
                                                                              rule_name => "columnref_1752",
                                                                              token => "Op",
                                                                              token_val => "<>",
                                                                              val => "a",
                                                                            },
                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                  location => {
                                                                char_pos => undef,
                                                                left_side => "a_expr",
                                                                right_side => ["stmtmulti", ";", "stmt"],
                                                                rule_name => "a_expr_1507",
                                                                token => "AND",
                                                                token_val => "AND",
                                                                val => ["<>"],
                                                              },
                                                  name     => 'fix',
                                                  rexpr    => bless({
                                                                location => {
                                                                  char_pos => undef,
                                                                  left_side => "AexprConst",
                                                                  right_side => ["stmtmulti"],
                                                                  rule_name => "AexprConst_1791",
                                                                  token => undef,
                                                                  token_val => undef,
                                                                  val => "2009-01-01",
                                                                },
                                                                type => "String",
                                                                val => "2009-01-01",
                                                              }, "SQL::Translator::Statement::A_Const"),
                                                }, "SQL::Translator::Statement::A_Expr"),
                                    location => {
                                                  char_pos => undef,
                                                  left_side => "a_expr",
                                                  right_side => ["stmtmulti", ";", "stmt"],
                                                  rule_name => "a_expr_1510",
                                                  token => ";",
                                                  token_val => ";",
                                                  val => "AND",
                                                },
                                    rexpr    => bless({
                                                  kind     => "OP",
                                                  lexpr    => bless({
                                                                fields   => ["b"],
                                                                location => {
                                                                              char_pos => undef,
                                                                              left_side => "columnref",
                                                                              right_side => ["stmtmulti"],
                                                                              rule_name => "columnref_1752",
                                                                              token => "Op",
                                                                              token_val => "<>",
                                                                              val => "b",
                                                                            },
                                                              }, "SQL::Translator::Statement::Column::Reference"),
                                                  location => {
                                                                char_pos => undef,
                                                                left_side => "a_expr",
                                                                right_side => ["stmtmulti", ";", "stmt"],
                                                                rule_name => "a_expr_1507",
                                                                token => ";",
                                                                token_val => ";",
                                                                val => ["<>"],
                                                              },
                                                  name     => 'fix',
                                                  rexpr    => bless({
                                                                location => {
                                                                  char_pos => undef,
                                                                  left_side => "AexprConst",
                                                                  right_side => ["stmtmulti"],
                                                                  rule_name => "AexprConst_1790",
                                                                  token => undef,
                                                                  token_val => undef,
                                                                  val => 10.7,
                                                                },
                                                                type => "Float",
                                                                val => 10.7,
                                                              }, "SQL::Translator::Statement::A_Const"),
                                                }, "SQL::Translator::Statement::A_Expr"),
                                  }, "SQL::Translator::Statement::A_Expr"),
                 }, "SQL::Translator::Statement::Select"),
    }, "SQL::Translator::Statement::Explain"),
    bless({
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "macaddrtmp",
                         },
                         relname => "macaddrtmp",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => "FROM",
                           token_val => "FROM",
                           val => bless({
                             agg_distinct  => 0,
                             agg_star      => 1,
                             func_variadic => 0,
                             funcname      => ["count"],
                             location      => {
                                                char_pos => undef,
                                                left_side => "func_expr",
                                                right_side => ["stmtmulti"],
                                                rule_name => "func_expr_1591",
                                                token => "FROM",
                                                token_val => "FROM",
                                                val => 'fix',
                                              },
                           }, "SQL::Translator::Statement::Function::Call"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["a"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "Op",
                                                   token_val => "<=",
                                                   val => "a",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1507",
                                     token => ";",
                                     token_val => ";",
                                     val => ["<="],
                                   },
                       name     => 'fix',
                       rexpr    => bless({
                                     arg => bless({
                                       location => {
                                         char_pos => undef,
                                         left_side => "AexprConst",
                                         right_side => ["stmtmulti"],
                                         rule_name => "AexprConst_1791",
                                         token => undef,
                                         token_val => undef,
                                         val => "22:00:5c:e5:9b:0d",
                                       },
                                       type => "String",
                                       val => "22:00:5c:e5:9b:0d",
                                     }, "SQL::Translator::Statement::A_Const"),
                                     location => {
                                       char_pos => undef,
                                       left_side => "a_expr",
                                       right_side => ["stmtmulti", ";", "stmt"],
                                       rule_name => "a_expr_1493",
                                       token => ";",
                                       token_val => ";",
                                       val => "::",
                                     },
                                     typeName => bless({
                                       arrayBounds => undef,
                                       location    => {
                                                        char_pos => undef,
                                                        left_side => "GenericType",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "GenericType_1429",
                                                        token => ";",
                                                        token_val => ";",
                                                        val => "macaddr",
                                                      },
                                       names       => ["macaddr"],
                                       typemod     => -1,
                                       typmods     => undef,
                                     }, "SQL::Translator::Statement::TypeName"),
                                   }, "SQL::Translator::Statement::TypeCast"),
                     }, "SQL::Translator::Statement::A_Expr"),
    }, "SQL::Translator::Statement::Select"),
    bless({
      definition => [
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "chkpass",
                           },
            names       => ["chkpass"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "leftarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "text",
                           },
            names       => ["text"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "rightarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => ["<>"], defaction => "UNSPEC", defname => "negator" }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "eq",
                           },
            names       => ["eq"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "procedure",
        }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["="],
      kind => "OPERATOR",
      oldstyle => 0,
    }, "SQL::Translator::Statement::Define"),
    bless({
      definition => [
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "chkpass",
                           },
            names       => ["chkpass"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "leftarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "text",
                           },
            names       => ["text"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "rightarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => ["="], defaction => "UNSPEC", defname => "negator" }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "ne",
                           },
            names       => ["ne"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "procedure",
        }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["<>"],
      kind => "OPERATOR",
      oldstyle => 0,
    }, "SQL::Translator::Statement::Define"),
    bless({
      comment => "password type with checks",
      objname => ["chkpass"],
      objtype => "TYPE",
    }, "SQL::Translator::Statement::Comment"),
    bless({
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "typeoids",
                         },
                         relname => "typeoids",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      relation    => bless({
                       alias          => undef,
                       catalogname    => undef,
                       inhOpt         => "DEFAULT",
                       location       => {
                                           char_pos => undef,
                                           left_side => "qualified_name",
                                           right_side => ["stmtmulti"],
                                           rule_name => "qualified_name_1778",
                                           token => "SET",
                                           token_val => "SET",
                                           val => "pg_catalog",
                                         },
                       relname        => "pg_type",
                       relpersistence => "\"p\"",
                       schemaname     => "pg_catalog",
                     }, "SQL::Translator::Statement::RangeVar"),
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "set_target",
                           right_side => ["stmtmulti"],
                           rule_name => "set_target_1251",
                           token => "=",
                           token_val => "=",
                           val => "typcollation",
                         },
                         name => "typcollation",
                         val => bless({
                           location => {
                             char_pos => undef,
                             left_side => "AexprConst",
                             right_side => ["stmtmulti"],
                             rule_name => "AexprConst_1789",
                             token => undef,
                             token_val => undef,
                             val => 100,
                           },
                           type => "Integer",
                           val => 100,
                         }, "SQL::Translator::Statement::A_Const"),
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["oid"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "=",
                                                   token_val => "=",
                                                   val => "oid",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1506",
                                     token => ";",
                                     token_val => ";",
                                     val => "=",
                                   },
                       name     => ["="],
                       rexpr    => bless({
                                     fields   => ["typeoids", "typoid"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1753",
                                                   token => ";",
                                                   token_val => ";",
                                                   val => "typeoids",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                     }, "SQL::Translator::Statement::A_Expr"),
      withClause  => bless({
                       ctes => [
                         bless({
                           aliascolnames => ["typoid"],
                           ctename       => "typeoids",
                           ctequery      => bless({
                                              all  => 0,
                                              larg => bless({
                                                        targetList => [
                                                          bless({
                                                            location => {
                                                              char_pos => undef,
                                                              left_side => "target_el",
                                                              right_side => ["stmtmulti"],
                                                              rule_name => "target_el_1773",
                                                              token => "UNION",
                                                              token_val => "UNION",
                                                              val => bless({
                                                                arg => bless({
                                                                  location => {
                                                                    char_pos => undef,
                                                                    left_side => "AexprConst",
                                                                    right_side => ["stmtmulti"],
                                                                    rule_name => "AexprConst_1791",
                                                                    token => undef,
                                                                    token_val => undef,
                                                                    val => "citext",
                                                                  },
                                                                  type => "String",
                                                                  val => "citext",
                                                                }, "SQL::Translator::Statement::A_Const"),
                                                                location => {
                                                                  char_pos => undef,
                                                                  left_side => "a_expr",
                                                                  right_side => ["stmtmulti", ";", "stmt"],
                                                                  rule_name => "a_expr_1493",
                                                                  token => "UNION",
                                                                  token_val => "UNION",
                                                                  val => "::",
                                                                },
                                                                typeName => bless({
                                                                  arrayBounds => undef,
                                                                  location    => {
                                                                                   char_pos => undef,
                                                                                   left_side => "GenericType",
                                                                                   right_side => ["stmtmulti"],
                                                                                   rule_name => "GenericType_1430",
                                                                                   token => "UNION",
                                                                                   token_val => "UNION",
                                                                                   val => "pg_catalog",
                                                                                 },
                                                                  names       => ["regtype", "pg_catalog"],
                                                                  typemod     => -1,
                                                                  typmods     => undef,
                                                                }, "SQL::Translator::Statement::TypeName"),
                                                              }, "SQL::Translator::Statement::TypeCast"),
                                                            },
                                                            val => 'fix',
                                                          }, "SQL::Translator::Statement::ResultTarget"),
                                                        ],
                                                      }, "SQL::Translator::Statement::Select"),
                                              op   => "UNION",
                                              rarg => bless({
                                                        fromClause  => [
                                                                         bless({
                                                                           alias          => undef,
                                                                           catalogname    => undef,
                                                                           inhOpt         => "DEFAULT",
                                                                           location       => {
                                                                                               char_pos => undef,
                                                                                               left_side => "qualified_name",
                                                                                               right_side => ["stmtmulti"],
                                                                                               rule_name => "qualified_name_1778",
                                                                                               token => ",",
                                                                                               token_val => ",",
                                                                                               val => "pg_catalog",
                                                                                             },
                                                                           relname        => "pg_type",
                                                                           relpersistence => "\"p\"",
                                                                           schemaname     => "pg_catalog",
                                                                         }, "SQL::Translator::Statement::RangeVar"),
                                                                         bless({
                                                                           alias => undef,
                                                                           inhOpt => "DEFAULT",
                                                                           location => {
                                                                             char_pos => undef,
                                                                             left_side => "qualified_name",
                                                                             right_side => ["stmtmulti"],
                                                                             rule_name => "qualified_name_1777",
                                                                             token => "WHERE",
                                                                             token_val => "WHERE",
                                                                             val => "typeoids",
                                                                           },
                                                                           relname => "typeoids",
                                                                           relpersistence => "\"p\"",
                                                                         }, "SQL::Translator::Statement::RangeVar"),
                                                                       ],
                                                        targetList  => [
                                                                         bless({
                                                                           location => {
                                                                             char_pos => undef,
                                                                             left_side => "target_el",
                                                                             right_side => ["stmtmulti"],
                                                                             rule_name => "target_el_1773",
                                                                             token => "FROM",
                                                                             token_val => "FROM",
                                                                             val => bless({
                                                                               fields   => ["oid"],
                                                                               location => {
                                                                                             char_pos => undef,
                                                                                             left_side => "columnref",
                                                                                             right_side => ["stmtmulti"],
                                                                                             rule_name => "columnref_1752",
                                                                                             token => "FROM",
                                                                                             token_val => "FROM",
                                                                                             val => "oid",
                                                                                           },
                                                                             }, "SQL::Translator::Statement::Column::Reference"),
                                                                           },
                                                                           val => 'fix',
                                                                         }, "SQL::Translator::Statement::ResultTarget"),
                                                                       ],
                                                        whereClause => bless({
                                                                         kind     => "OR",
                                                                         lexpr    => bless({
                                                                                       kind     => "OP",
                                                                                       lexpr    => bless({
                                                                                                     fields   => ["typelem"],
                                                                                                     location => {
                                                                                                                   char_pos => undef,
                                                                                                                   left_side => "columnref",
                                                                                                                   right_side => ["stmtmulti"],
                                                                                                                   rule_name => "columnref_1752",
                                                                                                                   token => "=",
                                                                                                                   token_val => "=",
                                                                                                                   val => "typelem",
                                                                                                                 },
                                                                                                   }, "SQL::Translator::Statement::Column::Reference"),
                                                                                       location => {
                                                                                                     char_pos => undef,
                                                                                                     left_side => "a_expr",
                                                                                                     right_side => ["stmtmulti", ";", "stmt"],
                                                                                                     rule_name => "a_expr_1506",
                                                                                                     token => "OR",
                                                                                                     token_val => "OR",
                                                                                                     val => "=",
                                                                                                   },
                                                                                       name     => ["="],
                                                                                       rexpr    => bless({
                                                                                                     fields   => ["typoid"],
                                                                                                     location => {
                                                                                                                   char_pos => undef,
                                                                                                                   left_side => "columnref",
                                                                                                                   right_side => ["stmtmulti"],
                                                                                                                   rule_name => "columnref_1752",
                                                                                                                   token => "OR",
                                                                                                                   token_val => "OR",
                                                                                                                   val => "typoid",
                                                                                                                 },
                                                                                                   }, "SQL::Translator::Statement::Column::Reference"),
                                                                                     }, "SQL::Translator::Statement::A_Expr"),
                                                                         location => {
                                                                                       char_pos => undef,
                                                                                       left_side => "a_expr",
                                                                                       right_side => ["stmtmulti", ";", "stmt"],
                                                                                       rule_name => "a_expr_1511",
                                                                                       token => ")",
                                                                                       token_val => ")",
                                                                                       val => "OR",
                                                                                     },
                                                                         rexpr    => bless({
                                                                                       kind     => "OP",
                                                                                       lexpr    => bless({
                                                                                                     fields   => ["typbasetype"],
                                                                                                     location => {
                                                                                                                   char_pos => undef,
                                                                                                                   left_side => "columnref",
                                                                                                                   right_side => ["stmtmulti"],
                                                                                                                   rule_name => "columnref_1752",
                                                                                                                   token => "=",
                                                                                                                   token_val => "=",
                                                                                                                   val => "typbasetype",
                                                                                                                 },
                                                                                                   }, "SQL::Translator::Statement::Column::Reference"),
                                                                                       location => {
                                                                                                     char_pos => undef,
                                                                                                     left_side => "a_expr",
                                                                                                     right_side => ["stmtmulti", ";", "stmt"],
                                                                                                     rule_name => "a_expr_1506",
                                                                                                     token => ")",
                                                                                                     token_val => ")",
                                                                                                     val => "=",
                                                                                                   },
                                                                                       name     => ["="],
                                                                                       rexpr    => bless({
                                                                                                     fields   => ["typoid"],
                                                                                                     location => {
                                                                                                                   char_pos => undef,
                                                                                                                   left_side => "columnref",
                                                                                                                   right_side => ["stmtmulti"],
                                                                                                                   rule_name => "columnref_1752",
                                                                                                                   token => ")",
                                                                                                                   token_val => ")",
                                                                                                                   val => "typoid",
                                                                                                                 },
                                                                                                   }, "SQL::Translator::Statement::Column::Reference"),
                                                                                     }, "SQL::Translator::Statement::A_Expr"),
                                                                       }, "SQL::Translator::Statement::A_Expr"),
                                                      }, "SQL::Translator::Statement::Select"),
                                            }, "SQL::Translator::Statement::Select"),
                           location      => {
                                              char_pos => undef,
                                              left_side => "common_table_expr",
                                              right_side => ["stmtmulti"],
                                              rule_name => "common_table_expr_1288",
                                              token => undef,
                                              token_val => undef,
                                              val => "typeoids",
                                            },
                         }, "SQL::Translator::Statement::CommonTableExpr"),
                       ],
                       location => {
                         char_pos => undef,
                         left_side => "with_clause",
                         right_side => ["stmtmulti"],
                         rule_name => "with_clause_1285",
                         token => "UPDATE",
                         token_val => "UPDATE",
                         val => "WITH",
                       },
                       recursive => 1,
                     }, "SQL::Translator::Statement::WithClause"),
    }, "SQL::Translator::Statement::Update"),
    bless({
      relation    => bless({
                       alias          => undef,
                       catalogname    => undef,
                       inhOpt         => "DEFAULT",
                       location       => {
                                           char_pos => undef,
                                           left_side => "qualified_name",
                                           right_side => ["stmtmulti"],
                                           rule_name => "qualified_name_1778",
                                           token => "SET",
                                           token_val => "SET",
                                           val => "pg_catalog",
                                         },
                       relname        => "pg_index",
                       relpersistence => "\"p\"",
                       schemaname     => "pg_catalog",
                     }, "SQL::Translator::Statement::RangeVar"),
      targetList  => [
                       bless({
                         indirection => [
                           undef,
                           bless({
                             uidx => bless({
                               location => {
                                 char_pos => undef,
                                 left_side => "AexprConst",
                                 right_side => ["stmtmulti"],
                                 rule_name => "AexprConst_1789",
                                 token => undef,
                                 token_val => undef,
                                 val => 7,
                               },
                               type => "Integer",
                               val => 7,
                             }, "SQL::Translator::Statement::A_Const"),
                           }, "SQL::Translator::Statement::A_Indices"),
                         ],
                         location => {
                           char_pos => undef,
                           left_side => "set_target",
                           right_side => ["stmtmulti"],
                           rule_name => "set_target_1251",
                           token => "=",
                           token_val => "=",
                           val => "indcollation",
                         },
                         name => "indcollation",
                         val => bless({
                           location => {
                             char_pos => undef,
                             left_side => "AexprConst",
                             right_side => ["stmtmulti"],
                             rule_name => "AexprConst_1789",
                             token => undef,
                             token_val => undef,
                             val => 100,
                           },
                           type => "Integer",
                           val => 100,
                         }, "SQL::Translator::Statement::A_Const"),
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       location    => {
                                        char_pos => undef,
                                        left_side => "a_expr",
                                        right_side => ["stmtmulti", ";", "stmt"],
                                        rule_name => "a_expr_1544",
                                        token => undef,
                                        token_val => undef,
                                        val => "IN",
                                      },
                       operName    => ["="],
                       subLinkType => "ANY_SUBLINK",
                       subselect   => bless({
                                        fromClause    => [
                                                           bless({
                                                             alias          => undef,
                                                             catalogname    => undef,
                                                             inhOpt         => "DEFAULT",
                                                             location       => {
                                                                                 char_pos => undef,
                                                                                 left_side => "qualified_name",
                                                                                 right_side => ["stmtmulti"],
                                                                                 rule_name => "qualified_name_1778",
                                                                                 token => ",",
                                                                                 token_val => ",",
                                                                                 val => "pg_catalog",
                                                                               },
                                                             relname        => "pg_opclass",
                                                             relpersistence => "\"p\"",
                                                             schemaname     => "pg_catalog",
                                                           }, "SQL::Translator::Statement::RangeVar"),
                                                           bless({
                                                             alias => undef,
                                                             inhOpt => "DEFAULT",
                                                             location => {
                                                               char_pos => undef,
                                                               left_side => "qualified_name",
                                                               right_side => ["stmtmulti"],
                                                               rule_name => "qualified_name_1777",
                                                               token => "WHERE",
                                                               token_val => "WHERE",
                                                               val => "typeoids",
                                                             },
                                                             relname => "typeoids",
                                                             relpersistence => "\"p\"",
                                                           }, "SQL::Translator::Statement::RangeVar"),
                                                         ],
                                        lockingClause => [undef, undef],
                                        targetList    => [
                                                           bless({
                                                             location => {
                                                               char_pos => undef,
                                                               left_side => "target_el",
                                                               right_side => ["stmtmulti"],
                                                               rule_name => "target_el_1773",
                                                               token => "FROM",
                                                               token_val => "FROM",
                                                               val => bless({
                                                                 fields   => ["oid"],
                                                                 location => {
                                                                               char_pos => undef,
                                                                               left_side => "columnref",
                                                                               right_side => ["stmtmulti"],
                                                                               rule_name => "columnref_1752",
                                                                               token => "FROM",
                                                                               token_val => "FROM",
                                                                               val => "oid",
                                                                             },
                                                               }, "SQL::Translator::Statement::Column::Reference"),
                                                             },
                                                             val => 'fix',
                                                           }, "SQL::Translator::Statement::ResultTarget"),
                                                         ],
                                        whereClause   => bless({
                                                           kind     => "OP",
                                                           lexpr    => bless({
                                                                         fields   => ["opcintype"],
                                                                         location => {
                                                                                       char_pos => undef,
                                                                                       left_side => "columnref",
                                                                                       right_side => ["stmtmulti"],
                                                                                       rule_name => "columnref_1752",
                                                                                       token => "=",
                                                                                       token_val => "=",
                                                                                       val => "opcintype",
                                                                                     },
                                                                       }, "SQL::Translator::Statement::Column::Reference"),
                                                           location => {
                                                                         char_pos => undef,
                                                                         left_side => "a_expr",
                                                                         right_side => ["stmtmulti", ";", "stmt"],
                                                                         rule_name => "a_expr_1506",
                                                                         token => ")",
                                                                         token_val => ")",
                                                                         val => "=",
                                                                       },
                                                           name     => ["="],
                                                           rexpr    => bless({
                                                                         fields   => ["typeoids", "typoid"],
                                                                         location => {
                                                                                       char_pos => undef,
                                                                                       left_side => "columnref",
                                                                                       right_side => ["stmtmulti"],
                                                                                       rule_name => "columnref_1753",
                                                                                       token => ")",
                                                                                       token_val => ")",
                                                                                       val => "typeoids",
                                                                                     },
                                                                       }, "SQL::Translator::Statement::Column::Reference"),
                                                         }, "SQL::Translator::Statement::A_Expr"),
                                        withClause    => undef,
                                      }, "SQL::Translator::Statement::Select"),
                       testexpr    => bless({
                                        arg => bless({
                                          fields   => ["indclass"],
                                          location => {
                                                        char_pos => undef,
                                                        left_side => "columnref",
                                                        right_side => ["stmtmulti"],
                                                        rule_name => "columnref_1753",
                                                        token => "IN",
                                                        token_val => "IN",
                                                        val => "indclass",
                                                      },
                                        }, "SQL::Translator::Statement::Column::Reference"),
                                        indirection => [
                                          bless({
                                            uidx => bless({
                                              location => {
                                                char_pos => undef,
                                                left_side => "AexprConst",
                                                right_side => ["stmtmulti"],
                                                rule_name => "AexprConst_1789",
                                                token => undef,
                                                token_val => undef,
                                                val => 7,
                                              },
                                              type => "Integer",
                                              val => 7,
                                            }, "SQL::Translator::Statement::A_Const"),
                                          }, "SQL::Translator::Statement::A_Indices"),
                                        ],
                                      }, "SQL::Translator::Statement::A_Indirection"),
                     }, "SQL::Translator::Statement::SubLink"),
    }, "SQL::Translator::Statement::Update"),
    bless({
      definition => [
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citextin",
                           },
            names       => ["citextin"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "INPUT",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citextout",
                           },
            names       => ["citextout"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "output",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citextrecv",
                           },
            names       => ["citextrecv"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "receive",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citextsend",
                           },
            names       => ["citextsend"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "send",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "variable",
                           },
            names       => ["variable"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "internallength",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "extended",
                           },
            names       => ["extended"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "STORAGE",
        }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => "S", defaction => "UNSPEC", defname => "category" }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => "false", defaction => "UNSPEC", defname => "preferred" }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => "true", defaction => "UNSPEC", defname => "collatable" }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["citext"],
      kind => "TYPE",
      oldstyle => 0,
    }, "SQL::Translator::Statement::Define"),
    bless({
      context    => "IMPLICIT",
      inout      => 0,
      sourcetype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "citext",
                                     },
                      names       => ["citext"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
      targettype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => ")",
                                       token_val => ")",
                                       val => "text",
                                     },
                      names       => ["text"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateCast"),
    bless({
      context    => "IMPLICIT",
      inout      => 0,
      sourcetype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "citext",
                                     },
                      names       => ["citext"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
      targettype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "CharacterWithoutLength",
                                       right_side => ["stmtmulti"],
                                       rule_name => "CharacterWithoutLength_1457",
                                       token => ")",
                                       token_val => ")",
                                       val => "varchar",
                                     },
                      names       => ["pg_catalog", "varchar"],
                      typemod     => -1,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateCast"),
    bless({
      context    => "ASSIGNMENT",
      inout      => 0,
      sourcetype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "citext",
                                     },
                      names       => ["citext"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
      targettype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => ")",
                                       token_val => ")",
                                       val => "bpchar",
                                     },
                      names       => ["bpchar"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateCast"),
    bless({
      context    => "ASSIGNMENT",
      inout      => 0,
      sourcetype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "text",
                                     },
                      names       => ["text"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
      targettype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => ")",
                                       token_val => ")",
                                       val => "citext",
                                     },
                      names       => ["citext"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateCast"),
    bless({
      context    => "ASSIGNMENT",
      inout      => 0,
      sourcetype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "CharacterWithoutLength",
                                       right_side => ["stmtmulti"],
                                       rule_name => "CharacterWithoutLength_1457",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "varchar",
                                     },
                      names       => ["pg_catalog", "varchar"],
                      typemod     => -1,
                    }, "SQL::Translator::Statement::TypeName"),
      targettype => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => ")",
                                       token_val => ")",
                                       val => "citext",
                                     },
                      names       => ["citext"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateCast"),
    bless({
      context => "ASSIGNMENT",
      func => bless({ funcname => ["citext"] }, "SQL::Translator::Statement::Function"),
      inout => 0,
      sourcetype => bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => "AS",
                         token_val => "AS",
                         val => "bpchar",
                       },
        names       => ["bpchar"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
      targettype => bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ")",
                         token_val => ")",
                         val => "citext",
                       },
        names       => ["citext"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateCast"),
    bless({
      context => "ASSIGNMENT",
      func => bless({ funcname => ["citext"] }, "SQL::Translator::Statement::Function"),
      inout => 0,
      sourcetype => bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "Numeric",
                         right_side => ["stmtmulti"],
                         rule_name => "Numeric_1443",
                         token => undef,
                         token_val => undef,
                         val => "boolean",
                       },
        names       => ["pg_catalog", "bool"],
        typemod     => -1,
      }, "SQL::Translator::Statement::TypeName"),
      targettype => bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ")",
                         token_val => ")",
                         val => "citext",
                       },
        names       => ["citext"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateCast"),
    bless({
      context => "ASSIGNMENT",
      func => bless({ funcname => ["citext"] }, "SQL::Translator::Statement::Function"),
      inout => 0,
      sourcetype => bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => "AS",
                         token_val => "AS",
                         val => "inet",
                       },
        names       => ["inet"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
      targettype => bless({
        arrayBounds => undef,
        location    => {
                         char_pos => undef,
                         left_side => "GenericType",
                         right_side => ["stmtmulti"],
                         rule_name => "GenericType_1429",
                         token => ")",
                         token_val => ")",
                         val => "citext",
                       },
        names       => ["citext"],
        typemod     => -1,
        typmods     => undef,
      }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateCast"),
    bless({
      definition => [
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "leftarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "rightarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => ["="], defaction => "UNSPEC", defname => "commutator" }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => ["<>"], defaction => "UNSPEC", defname => "negator" }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext_eq",
                           },
            names       => ["citext_eq"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "PROCEDURE",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "eqsel",
                           },
            names       => ["eqsel"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "RESTRICT",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "eqjoinsel",
                           },
            names       => ["eqjoinsel"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "JOIN",
        }, "SQL::Translator::Statement::DefElem"),
        bless({ defaction => "UNSPEC", defname => "hashes" }, "SQL::Translator::Statement::DefElem"),
        bless({ defaction => "UNSPEC", defname => "merges" }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["="],
      kind => "OPERATOR",
      oldstyle => 0,
    }, "SQL::Translator::Statement::Define"),
    bless({
      definition => [
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "texticregexne",
                           },
            names       => ["texticregexne"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "PROCEDURE",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "leftarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "citext",
                           },
            names       => ["citext"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "rightarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => ["~*"], defaction => "UNSPEC", defname => "negator" }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "icregexnesel",
                           },
            names       => ["icregexnesel"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "RESTRICT",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "icregexnejoinsel",
                           },
            names       => ["icregexnejoinsel"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "JOIN",
        }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["!~*"],
      kind => "OPERATOR",
      oldstyle => 0,
    }, "SQL::Translator::Statement::Define"),
    bless({
      funcname   => ["regexp_matches"],
      options    => [
                      bless({
                        arg => [
                          "\n    SELECT pg_catalog.regexp_matches( \$1::pg_catalog.text, \$2::pg_catalog.text, 'i' );\n",
                        ],
                        defaction => "UNSPEC",
                        defname => "as",
                      }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => [undef, -1],
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "[",
                                       token_val => "[",
                                       val => "TEXT",
                                     },
                      names       => ["TEXT"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      funcname   => ["regexp_split_to_array"],
      options    => [
                      bless({
                        arg => [
                          "\n    SELECT pg_catalog.regexp_split_to_array( \$1::pg_catalog.text, \$2::pg_catalog.text, CASE WHEN pg_catalog.strpos(\$3, 'c') = 0 THEN  \$3 || 'i' ELSE \$3 END );\n",
                        ],
                        defaction => "UNSPEC",
                        defname => "as",
                      }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "text",
                                         },
                          names       => ["text"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => [undef, -1],
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "[",
                                       token_val => "[",
                                       val => "TEXT",
                                     },
                      names       => ["TEXT"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      funcname   => ["replace"],
      options    => [
                      bless({
                        arg => [
                          "\n    SELECT pg_catalog.regexp_replace( \$1::pg_catalog.text, pg_catalog.regexp_replace(\$2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\\\\\\\1', 'g'), \$3::pg_catalog.text, 'gi' );\n",
                        ],
                        defaction => "UNSPEC",
                        defname => "as",
                      }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "TEXT",
                                     },
                      names       => ["TEXT"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      funcname   => ["split_part"],
      options    => [
                      bless({
                        arg => [
                          "\n    SELECT (pg_catalog.regexp_split_to_array( \$1::pg_catalog.text, pg_catalog.regexp_replace(\$2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\\\\\\\1', 'g'), 'i'))[\$3];\n",
                        ],
                        defaction => "UNSPEC",
                        defname => "as",
                      }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "Numeric",
                                           right_side => ["stmtmulti"],
                                           rule_name => "Numeric_1433",
                                           token => undef,
                                           token_val => undef,
                                           val => "int",
                                         },
                          names       => ["pg_catalog", "int4"],
                          typemod     => -1,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "TEXT",
                                     },
                      names       => ["TEXT"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      funcname   => ["translate"],
      options    => [
                      bless({
                        arg => [
                          "\n    SELECT pg_catalog.translate( pg_catalog.translate( \$1::pg_catalog.text, pg_catalog.lower(\$2::pg_catalog.text), \$3), pg_catalog.upper(\$2::pg_catalog.text), \$3);\n",
                        ],
                        defaction => "UNSPEC",
                        defname => "as",
                      }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ",",
                                           token_val => ",",
                                           val => "citext",
                                         },
                          names       => ["citext"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "text",
                                         },
                          names       => ["text"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "TEXT",
                                     },
                      names       => ["TEXT"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      cols => [
        bless({
          location => {
            char_pos => undef,
            left_side => "insert_column_item",
            right_side => ["stmtmulti"],
            rule_name => "insert_column_item_1225",
            token => ")",
            token_val => ")",
            val => "name",
          },
          name => "name",
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
      relation => bless({
        inhOpt => "DEFAULT",
        location => {
          char_pos => undef,
          left_side => "qualified_name",
          right_side => ["stmtmulti"],
          rule_name => "qualified_name_1777",
          token => "(",
          token_val => "(",
          val => "try",
        },
        relname => "try",
        relpersistence => "\"p\"",
      }, "SQL::Translator::Statement::RangeVar"),
      returningList => undef,
      selectStmt => bless({
        valuesLists => [
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "a",
            },
            type => "String",
            val => "a",
          }, "SQL::Translator::Statement::A_Const"),
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "ab",
            },
            type => "String",
            val => "ab",
          }, "SQL::Translator::Statement::A_Const"),
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "\xE2",
            },
            type => "String",
            val => "\xE2",
          }, "SQL::Translator::Statement::A_Const"),
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "aba",
            },
            type => "String",
            val => "aba",
          }, "SQL::Translator::Statement::A_Const"),
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "b",
            },
            type => "String",
            val => "b",
          }, "SQL::Translator::Statement::A_Const"),
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "ba",
            },
            type => "String",
            val => "ba",
          }, "SQL::Translator::Statement::A_Const"),
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "bab",
            },
            type => "String",
            val => "bab",
          }, "SQL::Translator::Statement::A_Const"),
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "AZ",
            },
            type => "String",
            val => "AZ",
          }, "SQL::Translator::Statement::A_Const"),
        ],
      }, "SQL::Translator::Statement::Select"),
      withClause => undef,
    }, "SQL::Translator::Statement::Insert"),
    bless({
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "a",
                                           },
                                           type => "String",
                                           val => "a",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "eq_a",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "Op",
                                                   token_val => "<>",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1507",
                                     token => ";",
                                     token_val => ";",
                                     val => ["<>"],
                                   },
                       name     => 'fix',
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "\xE2",
                                     },
                                     type => "String",
                                     val => "\xE2",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    }, "SQL::Translator::Statement::Select"),
    bless({
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "where",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "a",
                                           },
                                           type => "String",
                                           val => "a",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "t",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "=",
                                                   token_val => "=",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1506",
                                     token => ";",
                                     token_val => ";",
                                     val => "=",
                                   },
                       name     => ["="],
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "a",
                                     },
                                     type => "String",
                                     val => "a",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    }, "SQL::Translator::Statement::Select"),
    bless({
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "WHERE",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "A",
                                           },
                                           type => "String",
                                           val => "A",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "eq_A",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "Op",
                                                   token_val => "<>",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1507",
                                     token => ";",
                                     token_val => ";",
                                     val => ["<>"],
                                   },
                       name     => 'fix',
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "\xE2",
                                     },
                                     type => "String",
                                     val => "\xE2",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    }, "SQL::Translator::Statement::Select"),
    bless({
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "where",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "A",
                                           },
                                           type => "String",
                                           val => "A",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "t",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "=",
                                                   token_val => "=",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1506",
                                     token => ";",
                                     token_val => ";",
                                     val => "=",
                                   },
                       name     => ["="],
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "A",
                                     },
                                     type => "String",
                                     val => "A",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    }, "SQL::Translator::Statement::Select"),
    bless({
      fromClause  => [
                       bless({
                         alias => undef,
                         inhOpt => "DEFAULT",
                         location => {
                           char_pos => undef,
                           left_side => "qualified_name",
                           right_side => ["stmtmulti"],
                           rule_name => "qualified_name_1777",
                           token => "WHERE",
                           token_val => "where",
                           val => "try",
                         },
                         relname => "try",
                         relpersistence => "\"p\"",
                       }, "SQL::Translator::Statement::RangeVar"),
                     ],
      targetList  => [
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1773",
                           token => ",",
                           token_val => ",",
                           val => bless({
                             fields   => ["name"],
                             location => {
                                           char_pos => undef,
                                           left_side => "columnref",
                                           right_side => ["stmtmulti"],
                                           rule_name => "columnref_1752",
                                           token => ",",
                                           token_val => ",",
                                           val => "name",
                                         },
                           }, "SQL::Translator::Statement::Column::Reference"),
                         },
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                       bless({
                         location => {
                           char_pos => undef,
                           left_side => "target_el",
                           right_side => ["stmtmulti"],
                           rule_name => "target_el_1771",
                           token => undef,
                           token_val => undef,
                           val => bless({
                             kind     => "OP",
                             lexpr    => bless({
                                           location => {
                                             char_pos => undef,
                                             left_side => "AexprConst",
                                             right_side => ["stmtmulti"],
                                             rule_name => "AexprConst_1791",
                                             token => undef,
                                             token_val => undef,
                                             val => "A",
                                           },
                                           type => "String",
                                           val => "A",
                                         }, "SQL::Translator::Statement::A_Const"),
                             location => {
                                           char_pos => undef,
                                           left_side => "a_expr",
                                           right_side => ["stmtmulti", ";", "stmt"],
                                           rule_name => "a_expr_1506",
                                           token => "AS",
                                           token_val => "AS",
                                           val => "=",
                                         },
                             name     => ["="],
                             rexpr    => bless({
                                           fields   => ["name"],
                                           location => {
                                                         char_pos => undef,
                                                         left_side => "columnref",
                                                         right_side => ["stmtmulti"],
                                                         rule_name => "columnref_1752",
                                                         token => "AS",
                                                         token_val => "AS",
                                                         val => "name",
                                                       },
                                         }, "SQL::Translator::Statement::Column::Reference"),
                           }, "SQL::Translator::Statement::A_Expr"),
                         },
                         name => "t",
                         val => 'fix',
                       }, "SQL::Translator::Statement::ResultTarget"),
                     ],
      whereClause => bless({
                       kind     => "OP",
                       lexpr    => bless({
                                     fields   => ["name"],
                                     location => {
                                                   char_pos => undef,
                                                   left_side => "columnref",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "columnref_1752",
                                                   token => "=",
                                                   token_val => "=",
                                                   val => "name",
                                                 },
                                   }, "SQL::Translator::Statement::Column::Reference"),
                       location => {
                                     char_pos => undef,
                                     left_side => "a_expr",
                                     right_side => ["stmtmulti", ";", "stmt"],
                                     rule_name => "a_expr_1506",
                                     token => ";",
                                     token_val => ";",
                                     val => "=",
                                   },
                       name     => ["="],
                       rexpr    => bless({
                                     location => {
                                       char_pos => undef,
                                       left_side => "AexprConst",
                                       right_side => ["stmtmulti"],
                                       rule_name => "AexprConst_1791",
                                       token => undef,
                                       token_val => undef,
                                       val => "A",
                                     },
                                     type => "String",
                                     val => "A",
                                   }, "SQL::Translator::Statement::A_Const"),
                     }, "SQL::Translator::Statement::A_Expr"),
    }, "SQL::Translator::Statement::Select"),
    bless({
      cols => [
        bless({
          location => {
            char_pos => undef,
            left_side => "insert_column_item",
            right_side => ["stmtmulti"],
            rule_name => "insert_column_item_1225",
            token => ")",
            token_val => ")",
            val => "name",
          },
          name => "name",
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
      relation => bless({
        inhOpt => "DEFAULT",
        location => {
          char_pos => undef,
          left_side => "qualified_name",
          right_side => ["stmtmulti"],
          rule_name => "qualified_name_1777",
          token => "(",
          token_val => "(",
          val => "try",
        },
        relname => "try",
        relpersistence => "\"p\"",
      }, "SQL::Translator::Statement::RangeVar"),
      returningList => undef,
      selectStmt => bless({
        valuesLists => [
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "a",
            },
            type => "String",
            val => "a",
          }, "SQL::Translator::Statement::A_Const"),
        ],
      }, "SQL::Translator::Statement::Select"),
      withClause => undef,
    }, "SQL::Translator::Statement::Insert"),
    bless({
      cols => [
        bless({
          location => {
            char_pos => undef,
            left_side => "insert_column_item",
            right_side => ["stmtmulti"],
            rule_name => "insert_column_item_1225",
            token => ")",
            token_val => ")",
            val => "name",
          },
          name => "name",
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
      relation => bless({
        inhOpt => "DEFAULT",
        location => {
          char_pos => undef,
          left_side => "qualified_name",
          right_side => ["stmtmulti"],
          rule_name => "qualified_name_1777",
          token => "(",
          token_val => "(",
          val => "try",
        },
        relname => "try",
        relpersistence => "\"p\"",
      }, "SQL::Translator::Statement::RangeVar"),
      returningList => undef,
      selectStmt => bless({
        valuesLists => [
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "A",
            },
            type => "String",
            val => "A",
          }, "SQL::Translator::Statement::A_Const"),
        ],
      }, "SQL::Translator::Statement::Select"),
      withClause => undef,
    }, "SQL::Translator::Statement::Insert"),
    bless({
      cols => [
        bless({
          location => {
            char_pos => undef,
            left_side => "insert_column_item",
            right_side => ["stmtmulti"],
            rule_name => "insert_column_item_1225",
            token => ")",
            token_val => ")",
            val => "name",
          },
          name => "name",
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
      relation => bless({
        inhOpt => "DEFAULT",
        location => {
          char_pos => undef,
          left_side => "qualified_name",
          right_side => ["stmtmulti"],
          rule_name => "qualified_name_1777",
          token => "(",
          token_val => "(",
          val => "try",
        },
        relname => "try",
        relpersistence => "\"p\"",
      }, "SQL::Translator::Statement::RangeVar"),
      returningList => undef,
      selectStmt => bless({
        valuesLists => [
          bless({
            location => {
              char_pos => undef,
              left_side => "AexprConst",
              right_side => ["stmtmulti"],
              rule_name => "AexprConst_1791",
              token => undef,
              token_val => undef,
              val => "aB",
            },
            type => "String",
            val => "aB",
          }, "SQL::Translator::Statement::A_Const"),
        ],
      }, "SQL::Translator::Statement::Select"),
      withClause => undef,
    }, "SQL::Translator::Statement::Insert"),
    bless({
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aa",
                                  },
                                  type => "String",
                                  val => "aa",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "ab",
                                  },
                                  type => "String",
                                  val => "ab",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_smaller"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "aa",
                            },
                            type => "String",
                            val => "aa",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    }, "SQL::Translator::Statement::Select"),
    bless({
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "AAAA",
                                  },
                                  type => "String",
                                  val => "AAAA",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "bbbb",
                                  },
                                  type => "String",
                                  val => "bbbb",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_smaller"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "AAAA",
                            },
                            type => "String",
                            val => "AAAA",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    }, "SQL::Translator::Statement::Select"),
    bless({
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aardvark",
                                  },
                                  type => "String",
                                  val => "aardvark",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "Aaba",
                                  },
                                  type => "String",
                                  val => "Aaba",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_smaller"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "Aaba",
                            },
                            type => "String",
                            val => "Aaba",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    }, "SQL::Translator::Statement::Select"),
    bless({
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aardvark",
                                  },
                                  type => "String",
                                  val => "aardvark",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "AARDVARK",
                                  },
                                  type => "String",
                                  val => "AARDVARK",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_smaller"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "AARDVARK",
                            },
                            type => "String",
                            val => "AARDVARK",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    }, "SQL::Translator::Statement::Select"),
    bless({
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aa",
                                  },
                                  type => "String",
                                  val => "aa",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "ab",
                                  },
                                  type => "String",
                                  val => "ab",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_larger"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "ab",
                            },
                            type => "String",
                            val => "ab",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    }, "SQL::Translator::Statement::Select"),
    bless({
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "AAAA",
                                  },
                                  type => "String",
                                  val => "AAAA",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "bbbb",
                                  },
                                  type => "String",
                                  val => "bbbb",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_larger"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "bbbb",
                            },
                            type => "String",
                            val => "bbbb",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    }, "SQL::Translator::Statement::Select"),
    bless({
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1771",
            token => undef,
            token_val => undef,
            val => bless({
              kind     => "OP",
              lexpr    => bless({
                            agg_distinct => 0,
                            agg_star => 0,
                            args => [
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "aardvark",
                                  },
                                  type => "String",
                                  val => "aardvark",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ",",
                                  token_val => ",",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ",",
                                                   token_val => ",",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                              bless({
                                arg => bless({
                                  location => {
                                    char_pos => undef,
                                    left_side => "AexprConst",
                                    right_side => ["stmtmulti"],
                                    rule_name => "AexprConst_1791",
                                    token => undef,
                                    token_val => undef,
                                    val => "Aaba",
                                  },
                                  type => "String",
                                  val => "Aaba",
                                }, "SQL::Translator::Statement::A_Const"),
                                location => {
                                  char_pos => undef,
                                  left_side => "a_expr",
                                  right_side => ["stmtmulti", ";", "stmt"],
                                  rule_name => "a_expr_1493",
                                  token => ")",
                                  token_val => ")",
                                  val => "::",
                                },
                                typeName => bless({
                                  arrayBounds => undef,
                                  location    => {
                                                   char_pos => undef,
                                                   left_side => "GenericType",
                                                   right_side => ["stmtmulti"],
                                                   rule_name => "GenericType_1429",
                                                   token => ")",
                                                   token_val => ")",
                                                   val => "citext",
                                                 },
                                  names       => ["citext"],
                                  typemod     => -1,
                                  typmods     => undef,
                                }, "SQL::Translator::Statement::TypeName"),
                              }, "SQL::Translator::Statement::TypeCast"),
                            ],
                            func_variadic => 0,
                            funcname => ["citext_larger"],
                            location => {
                              char_pos => undef,
                              left_side => "func_expr",
                              right_side => ["stmtmulti"],
                              rule_name => "func_expr_1585",
                              token => "=",
                              token_val => "=",
                              val => 'fix',
                            },
                          }, "SQL::Translator::Statement::Function::Call"),
              location => {
                            char_pos => undef,
                            left_side => "a_expr",
                            right_side => ["stmtmulti", ";", "stmt"],
                            rule_name => "a_expr_1506",
                            token => "AS",
                            token_val => "AS",
                            val => "=",
                          },
              name     => ["="],
              rexpr    => bless({
                            location => {
                              char_pos => undef,
                              left_side => "AexprConst",
                              right_side => ["stmtmulti"],
                              rule_name => "AexprConst_1791",
                              token => undef,
                              token_val => undef,
                              val => "aardvark",
                            },
                            type => "String",
                            val => "aardvark",
                          }, "SQL::Translator::Statement::A_Const"),
            }, "SQL::Translator::Statement::A_Expr"),
          },
          name => "t",
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    }, "SQL::Translator::Statement::Select"),
    bless({
      definition => [
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "cube",
                           },
            names       => ["cube"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "leftarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "cube",
                           },
            names       => ["cube"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "rightarg",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "cube_contains",
                           },
            names       => ["cube_contains"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "PROCEDURE",
        }, "SQL::Translator::Statement::DefElem"),
        bless({ arg => "<\@", defaction => "UNSPEC", defname => "commutator" }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "contsel",
                           },
            names       => ["contsel"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "RESTRICT",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "contjoinsel",
                           },
            names       => ["contjoinsel"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "JOIN",
        }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["\@>"],
      kind => "OPERATOR",
      oldstyle => 0,
    }, "SQL::Translator::Statement::Define"),
    bless({
      amname      => "gist",
      datatype    => bless({
                       arrayBounds => undef,
                       location    => {
                                        char_pos => undef,
                                        left_side => "GenericType",
                                        right_side => ["stmtmulti"],
                                        rule_name => "GenericType_1429",
                                        token => "USING",
                                        token_val => "USING",
                                        val => "cube",
                                      },
                       names       => ["cube"],
                       typemod     => -1,
                       typmods     => undef,
                     }, "SQL::Translator::Statement::TypeName"),
      isDefault   => 1,
      items       => [
                       bless({ itemtype => "OPERATOR", name => ["&&"], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => ["="], number => 6 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => ["\@>"], number => 7 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => ["<\@"], number => 8 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => ["\@"], number => 13 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "OPERATOR", name => ["~"], number => 14 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["g_cube_consistent"], number => 1 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["g_cube_union"], number => 2 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["g_cube_compress"], number => 3 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["g_cube_decompress"], number => 4 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["g_cube_penalty"], number => 5 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["g_cube_picksplit"], number => 6 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                       bless({ itemtype => "FUNCTION", name => ["g_cube_same"], number => 7 }, "SQL::Translator::Statement::CreateOpClass::Item"),
                     ],
      opclassname => ["gist_cube_ops"],
    }, "SQL::Translator::Statement::CreateOpClass"),
    bless({
      action  => 1,
      extname => "cube",
      objargs => [
                   bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => ",",
                                      token_val => ",",
                                      val => "cube",
                                    },
                     names       => ["cube"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
                   bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => ")",
                                      token_val => ")",
                                      val => "cube",
                                    },
                     names       => ["cube"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
                 ],
      objname => ["<\@"],
      objtype => "OPERATOR",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "cube",
      objargs => [
                   bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => ",",
                                      token_val => ",",
                                      val => "cube",
                                    },
                     names       => ["cube"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
                   bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => ")",
                                      token_val => ")",
                                      val => "cube",
                                    },
                     names       => ["cube"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
                 ],
      objname => ["\@>"],
      objtype => "OPERATOR",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "cube",
      objargs => [
                   bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => ",",
                                      token_val => ",",
                                      val => "cube",
                                    },
                     names       => ["cube"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
                   bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => ")",
                                      token_val => ")",
                                      val => "cube",
                                    },
                     names       => ["cube"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
                 ],
      objname => ["~"],
      objtype => "OPERATOR",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      action  => 1,
      extname => "cube",
      objargs => [
                   bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => ",",
                                      token_val => ",",
                                      val => "cube",
                                    },
                     names       => ["cube"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
                   bless({
                     arrayBounds => undef,
                     location    => {
                                      char_pos => undef,
                                      left_side => "GenericType",
                                      right_side => ["stmtmulti"],
                                      rule_name => "GenericType_1429",
                                      token => ")",
                                      token_val => ")",
                                      val => "cube",
                                    },
                     names       => ["cube"],
                     typemod     => -1,
                     typmods     => undef,
                   }, "SQL::Translator::Statement::TypeName"),
                 ],
      objname => ["\@"],
      objtype => "OPERATOR",
    }, "SQL::Translator::Statement::AlterExtensionContents"),
    bless({
      targetList => [
        bless({
          location => {
            char_pos => undef,
            left_side => "target_el",
            right_side => ["stmtmulti"],
            rule_name => "target_el_1773",
            token => ";",
            token_val => ";",
            val => bless({
              arg => bless({
                location => {
                  char_pos => undef,
                  left_side => "AexprConst",
                  right_side => ["stmtmulti"],
                  rule_name => "AexprConst_1791",
                  token => undef,
                  token_val => undef,
                  val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
                },
                type => "String",
                val => "(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)",
              }, "SQL::Translator::Statement::A_Const"),
              location => {
                char_pos => undef,
                left_side => "a_expr",
                right_side => ["stmtmulti", ";", "stmt"],
                rule_name => "a_expr_1493",
                token => ";",
                token_val => ";",
                val => "::",
              },
              typeName => bless({
                arrayBounds => undef,
                location    => {
                                 char_pos => undef,
                                 left_side => "GenericType",
                                 right_side => ["stmtmulti"],
                                 rule_name => "GenericType_1429",
                                 token => ";",
                                 token_val => ";",
                                 val => "cube",
                               },
                names       => ["cube"],
                typemod     => -1,
                typmods     => undef,
              }, "SQL::Translator::Statement::TypeName"),
            }, "SQL::Translator::Statement::TypeCast"),
          },
          val => 'fix',
        }, "SQL::Translator::Statement::ResultTarget"),
      ],
    }, "SQL::Translator::Statement::Select"),
    bless({
      funcname   => ["dblink_get_notify"],
      options    => [
                      bless({
                        arg => ["MODULE_PATHNAME", "dblink_get_notify"],
                        defaction => "UNSPEC",
                        defname => "as",
                      }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "c", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                                     arrayBounds => undef,
                                     location    => {
                                                      char_pos => undef,
                                                      left_side => "GenericType",
                                                      right_side => ["stmtmulti"],
                                                      rule_name => "GenericType_1429",
                                                      token => ",",
                                                      token_val => ",",
                                                      val => "TEXT",
                                                    },
                                     names       => ["TEXT"],
                                     typemod     => -1,
                                     typmods     => undef,
                                   }, "SQL::Translator::Statement::TypeName"),
                        mode    => "OUT",
                        name    => "notify_name",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                                     arrayBounds => undef,
                                     location    => {
                                                      char_pos => undef,
                                                      left_side => "GenericType",
                                                      right_side => ["stmtmulti"],
                                                      rule_name => "GenericType_1429",
                                                      token => ",",
                                                      token_val => ",",
                                                      val => "int4",
                                                    },
                                     names       => ["int4"],
                                     typemod     => -1,
                                     typmods     => undef,
                                   }, "SQL::Translator::Statement::TypeName"),
                        mode    => "OUT",
                        name    => "be_pid",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                      bless({
                        argType => bless({
                                     arrayBounds => undef,
                                     location    => {
                                                      char_pos => undef,
                                                      left_side => "GenericType",
                                                      right_side => ["stmtmulti"],
                                                      rule_name => "GenericType_1429",
                                                      token => ")",
                                                      token_val => ")",
                                                      val => "TEXT",
                                                    },
                                     names       => ["TEXT"],
                                     typemod     => -1,
                                     typmods     => undef,
                                   }, "SQL::Translator::Statement::TypeName"),
                        mode    => "OUT",
                        name    => "extra",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1429",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "record",
                                     },
                      names       => ["record"],
                      setof       => 1,
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      constraints => [],
      domainname  => ["lo"],
      typeName    => bless({
                       arrayBounds => undef,
                       location    => {
                                        char_pos => undef,
                                        left_side => "GenericType",
                                        right_side => ["stmtmulti"],
                                        rule_name => "GenericType_1430",
                                        token => ";",
                                        token_val => ";",
                                        val => "pg_catalog",
                                      },
                       names       => ["oid", "pg_catalog"],
                       typemod     => -1,
                       typmods     => undef,
                     }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateDomain"),
    bless({
      funcname   => ["lo_oid"],
      options    => [
                      bless({
                        arg => ["SELECT \$1::pg_catalog.oid"],
                        defaction => "UNSPEC",
                        defname => "as",
                      }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "sql", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => 1, defaction => "UNSPEC", defname => "strict" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "immutable", defaction => "UNSPEC", defname => "volatility" }, "SQL::Translator::Statement::DefElem"),
                    ],
      parameters => [
                      bless({
                        argType => bless({
                          arrayBounds => undef,
                          location    => {
                                           char_pos => undef,
                                           left_side => "GenericType",
                                           right_side => ["stmtmulti"],
                                           rule_name => "GenericType_1429",
                                           token => ")",
                                           token_val => ")",
                                           val => "lo",
                                         },
                          names       => ["lo"],
                          typemod     => -1,
                          typmods     => undef,
                        }, "SQL::Translator::Statement::TypeName"),
                        mode => "IN",
                      }, "SQL::Translator::Statement::Function::Parameter"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1430",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "pg_catalog",
                                     },
                      names       => ["oid", "pg_catalog"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      funcname   => ["lo_manage"],
      options    => [
                      bless({ arg => ["MODULE_PATHNAME"], defaction => "UNSPEC", defname => "as" }, "SQL::Translator::Statement::DefElem"),
                      bless({ arg => "c", defaction => "UNSPEC", defname => "language" }, "SQL::Translator::Statement::DefElem"),
                    ],
      replace    => 0,
      returnType => bless({
                      arrayBounds => undef,
                      location    => {
                                       char_pos => undef,
                                       left_side => "GenericType",
                                       right_side => ["stmtmulti"],
                                       rule_name => "GenericType_1430",
                                       token => "AS",
                                       token_val => "AS",
                                       val => "pg_catalog",
                                     },
                      names       => ["trigger", "pg_catalog"],
                      typemod     => -1,
                      typmods     => undef,
                    }, "SQL::Translator::Statement::TypeName"),
    }, "SQL::Translator::Statement::CreateFunction"),
    bless({
      arguments  => [[]],
      behavior   => "RESTRICT",
      concurrent => 0,
      missing_ok => 0,
      objects    => [["xml_is_well_formed", "extschema"]],
      removeType => "FUNCTION",
    }, "SQL::Translator::Statement::Drop"),
    bless({
      definition => [
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "testprs_start",
                           },
            names       => ["testprs_start"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "START",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "testprs_getlexeme",
                           },
            names       => ["testprs_getlexeme"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "gettoken",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ",",
                             token_val => ",",
                             val => "testprs_end",
                           },
            names       => ["testprs_end"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "END",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1430",
                             token => ",",
                             token_val => ",",
                             val => "pg_catalog",
                           },
            names       => ["prsd_headline", "pg_catalog"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "headline",
        }, "SQL::Translator::Statement::DefElem"),
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "testprs_lextype",
                           },
            names       => ["testprs_lextype"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "lextypes",
        }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["testparser"],
      kind => "TSPARSER",
    }, "SQL::Translator::Statement::Define"),
    bless({
      definition => [
        bless({
          arg => bless({
            arrayBounds => undef,
            location    => {
                             char_pos => undef,
                             left_side => "GenericType",
                             right_side => ["stmtmulti"],
                             rule_name => "GenericType_1429",
                             token => ")",
                             token_val => ")",
                             val => "testparser",
                           },
            names       => ["testparser"],
            typemod     => -1,
            typmods     => undef,
          }, "SQL::Translator::Statement::TypeName"),
          defaction => "UNSPEC",
          defname => "PARSER",
        }, "SQL::Translator::Statement::DefElem"),
      ],
      defnames => ["testcfg"],
      kind => "TSCONFIGURATION",
    }, "SQL::Translator::Statement::Define"),
    bless({
      cfgname   => ["testcfg"],
      dicts     => ["simple"],
      override  => 0,
      replace   => 0,
      tokentype => ["word"],
    }, "SQL::Translator::Statement::AlterTSConfiguration"),
  ];
  $a->[48]{selectStmt}{fromClause}[0]{funccallnode}{location}{val} = $a->[48]{selectStmt}{fromClause}[0]{funccallnode}{funcname};
  $a->[48]{selectStmt}{targetList}[0]{val} = $a->[48]{selectStmt}{targetList}[0]{location}{val};
  $a->[48]{selectStmt}{targetList}[1]{val} = $a->[48]{selectStmt}{targetList}[1]{location}{val};
  $a->[51]{selectStmt}{fromClause}[0]{funccallnode}{location}{val} = $a->[51]{selectStmt}{fromClause}[0]{funccallnode}{funcname};
  $a->[51]{selectStmt}{targetList}[0]{val} = $a->[51]{selectStmt}{targetList}[0]{location}{val};
  $a->[51]{selectStmt}{targetList}[1]{val} = $a->[51]{selectStmt}{targetList}[1]{location}{val};
  $a->[52]{query}{whereClause}{lexpr}{name} = $a->[52]{query}{whereClause}{lexpr}{location}{val};
  $a->[52]{query}{whereClause}{rexpr}{name} = $a->[52]{query}{whereClause}{rexpr}{location}{val};
  $a->[53]{targetList}[0]{location}{val}{location}{val} = $a->[53]{targetList}[0]{location}{val}{funcname};
  $a->[53]{targetList}[0]{val} = $a->[53]{targetList}[0]{location}{val};
  $a->[53]{whereClause}{name} = $a->[53]{whereClause}{location}{val};
  $a->[57]{withClause}{ctes}[0]{ctequery}{larg}{targetList}[0]{val} = $a->[57]{withClause}{ctes}[0]{ctequery}{larg}{targetList}[0]{location}{val};
  $a->[57]{withClause}{ctes}[0]{ctequery}{rarg}{targetList}[0]{val} = $a->[57]{withClause}{ctes}[0]{ctequery}{rarg}{targetList}[0]{location}{val};
  $a->[58]{whereClause}{subselect}{targetList}[0]{val} = $a->[58]{whereClause}{subselect}{targetList}[0]{location}{val};
  $a->[76]{targetList}[0]{val} = $a->[76]{targetList}[0]{location}{val};
  $a->[76]{targetList}[1]{val} = $a->[76]{targetList}[1]{location}{val};
  $a->[76]{whereClause}{name} = $a->[76]{whereClause}{location}{val};
  $a->[77]{targetList}[0]{val} = $a->[77]{targetList}[0]{location}{val};
  $a->[77]{targetList}[1]{val} = $a->[77]{targetList}[1]{location}{val};
  $a->[78]{targetList}[0]{val} = $a->[78]{targetList}[0]{location}{val};
  $a->[78]{targetList}[1]{val} = $a->[78]{targetList}[1]{location}{val};
  $a->[78]{whereClause}{name} = $a->[78]{whereClause}{location}{val};
  $a->[79]{targetList}[0]{val} = $a->[79]{targetList}[0]{location}{val};
  $a->[79]{targetList}[1]{val} = $a->[79]{targetList}[1]{location}{val};
  $a->[80]{targetList}[0]{val} = $a->[80]{targetList}[0]{location}{val};
  $a->[80]{targetList}[1]{val} = $a->[80]{targetList}[1]{location}{val};
  $a->[84]{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->[84]{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->[84]{targetList}[0]{val} = $a->[84]{targetList}[0]{location}{val};
  $a->[85]{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->[85]{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->[85]{targetList}[0]{val} = $a->[85]{targetList}[0]{location}{val};
  $a->[86]{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->[86]{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->[86]{targetList}[0]{val} = $a->[86]{targetList}[0]{location}{val};
  $a->[87]{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->[87]{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->[87]{targetList}[0]{val} = $a->[87]{targetList}[0]{location}{val};
  $a->[88]{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->[88]{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->[88]{targetList}[0]{val} = $a->[88]{targetList}[0]{location}{val};
  $a->[89]{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->[89]{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->[89]{targetList}[0]{val} = $a->[89]{targetList}[0]{location}{val};
  $a->[90]{targetList}[0]{location}{val}{lexpr}{location}{val} = $a->[90]{targetList}[0]{location}{val}{lexpr}{funcname};
  $a->[90]{targetList}[0]{val} = $a->[90]{targetList}[0]{location}{val};
  $a->[97]{targetList}[0]{val} = $a->[97]{targetList}[0]{location}{val};
  $a;
}
